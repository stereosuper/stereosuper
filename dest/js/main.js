!function t(e,i,n){function r(a,o){if(!i[a]){if(!e[a]){var l="function"==typeof require&&require;if(!o&&l)return l(a,!0);if(s)return s(a,!0);var h=new Error("Cannot find module '"+a+"'");throw h.code="MODULE_NOT_FOUND",h}var u=i[a]={exports:{}};e[a][0].call(u.exports,function(t){var i=e[a][1][t];return r(i?i:t)},u,u.exports,t,e,i,n)}return i[a].exports}for(var s="function"==typeof require&&require,a=0;a<n.length;a++)r(n[a]);return r}({1:[function(t,e,i){(function(t){var i="undefined"!=typeof e&&e.exports&&"undefined"!=typeof t?t:this||window;(i._gsQueue||(i._gsQueue=[])).push(function(){"use strict";i._gsDefine("TweenMax",["core.Animation","core.SimpleTimeline","TweenLite"],function(t,e,i){var n=function(t){var e,i=[],n=t.length;for(e=0;e!==n;i.push(t[e++]));return i},r=function(t,e,i){var n,r,s=t.cycle;for(n in s)r=s[n],t[n]="function"==typeof r?r(i,e[i]):r[i%r.length];delete t.cycle},s=function(t,e,n){i.call(this,t,e,n),this._cycle=0,this._yoyo=this.vars.yoyo===!0,this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._dirty=!0,this.render=s.prototype.render},a=1e-10,o=i._internals,l=o.isSelector,h=o.isArray,u=s.prototype=i.to({},.1,{}),c=[];s.version="1.19.0",u.constructor=s,u.kill()._gc=!1,s.killTweensOf=s.killDelayedCallsTo=i.killTweensOf,s.getTweensOf=i.getTweensOf,s.lagSmoothing=i.lagSmoothing,s.ticker=i.ticker,s.render=i.render,u.invalidate=function(){return this._yoyo=this.vars.yoyo===!0,this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._uncache(!0),i.prototype.invalidate.call(this)},u.updateTo=function(t,e){var n,r=this.ratio,s=this.vars.immediateRender||t.immediateRender;e&&this._startTime<this._timeline._time&&(this._startTime=this._timeline._time,this._uncache(!1),this._gc?this._enabled(!0,!1):this._timeline.insert(this,this._startTime-this._delay));for(n in t)this.vars[n]=t[n];if(this._initted||s)if(e)this._initted=!1,s&&this.render(0,!0,!0);else if(this._gc&&this._enabled(!0,!1),this._notifyPluginsOfEnabled&&this._firstPT&&i._onPluginEvent("_onDisable",this),this._time/this._duration>.998){var a=this._totalTime;this.render(0,!0,!1),this._initted=!1,this.render(a,!0,!1)}else if(this._initted=!1,this._init(),this._time>0||s)for(var o,l=1/(1-r),h=this._firstPT;h;)o=h.s+h.c,h.c*=l,h.s=o-h.c,h=h._next;return this},u.render=function(t,e,i){this._initted||0===this._duration&&this.vars.repeat&&this.invalidate();var n,r,s,l,h,u,c,f,p=this._dirty?this.totalDuration():this._totalDuration,d=this._time,_=this._totalTime,m=this._cycle,g=this._duration,v=this._rawPrevTime;if(t>=p-1e-7?(this._totalTime=p,this._cycle=this._repeat,this._yoyo&&0!==(1&this._cycle)?(this._time=0,this.ratio=this._ease._calcEnd?this._ease.getRatio(0):0):(this._time=g,this.ratio=this._ease._calcEnd?this._ease.getRatio(1):1),this._reversed||(n=!0,r="onComplete",i=i||this._timeline.autoRemoveChildren),0===g&&(this._initted||!this.vars.lazy||i)&&(this._startTime===this._timeline._duration&&(t=0),(v<0||t<=0&&t>=-1e-7||v===a&&"isPause"!==this.data)&&v!==t&&(i=!0,v>a&&(r="onReverseComplete")),this._rawPrevTime=f=!e||t||v===t?t:a)):t<1e-7?(this._totalTime=this._time=this._cycle=0,this.ratio=this._ease._calcEnd?this._ease.getRatio(0):0,(0!==_||0===g&&v>0)&&(r="onReverseComplete",n=this._reversed),t<0&&(this._active=!1,0===g&&(this._initted||!this.vars.lazy||i)&&(v>=0&&(i=!0),this._rawPrevTime=f=!e||t||v===t?t:a)),this._initted||(i=!0)):(this._totalTime=this._time=t,0!==this._repeat&&(l=g+this._repeatDelay,this._cycle=this._totalTime/l>>0,0!==this._cycle&&this._cycle===this._totalTime/l&&_<=t&&this._cycle--,this._time=this._totalTime-this._cycle*l,this._yoyo&&0!==(1&this._cycle)&&(this._time=g-this._time),this._time>g?this._time=g:this._time<0&&(this._time=0)),this._easeType?(h=this._time/g,u=this._easeType,c=this._easePower,(1===u||3===u&&h>=.5)&&(h=1-h),3===u&&(h*=2),1===c?h*=h:2===c?h*=h*h:3===c?h*=h*h*h:4===c&&(h*=h*h*h*h),1===u?this.ratio=1-h:2===u?this.ratio=h:this._time/g<.5?this.ratio=h/2:this.ratio=1-h/2):this.ratio=this._ease.getRatio(this._time/g)),d===this._time&&!i&&m===this._cycle)return void(_!==this._totalTime&&this._onUpdate&&(e||this._callback("onUpdate")));if(!this._initted){if(this._init(),!this._initted||this._gc)return;if(!i&&this._firstPT&&(this.vars.lazy!==!1&&this._duration||this.vars.lazy&&!this._duration))return this._time=d,this._totalTime=_,this._rawPrevTime=v,this._cycle=m,o.lazyTweens.push(this),void(this._lazy=[t,e]);this._time&&!n?this.ratio=this._ease.getRatio(this._time/g):n&&this._ease._calcEnd&&(this.ratio=this._ease.getRatio(0===this._time?0:1))}for(this._lazy!==!1&&(this._lazy=!1),this._active||!this._paused&&this._time!==d&&t>=0&&(this._active=!0),0===_&&(2===this._initted&&t>0&&this._init(),this._startAt&&(t>=0?this._startAt.render(t,e,i):r||(r="_dummyGS")),this.vars.onStart&&(0===this._totalTime&&0!==g||e||this._callback("onStart"))),s=this._firstPT;s;)s.f?s.t[s.p](s.c*this.ratio+s.s):s.t[s.p]=s.c*this.ratio+s.s,s=s._next;this._onUpdate&&(t<0&&this._startAt&&this._startTime&&this._startAt.render(t,e,i),e||(this._totalTime!==_||r)&&this._callback("onUpdate")),this._cycle!==m&&(e||this._gc||this.vars.onRepeat&&this._callback("onRepeat")),r&&(this._gc&&!i||(t<0&&this._startAt&&!this._onUpdate&&this._startTime&&this._startAt.render(t,e,i),n&&(this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[r]&&this._callback(r),0===g&&this._rawPrevTime===a&&f!==a&&(this._rawPrevTime=0)))},s.to=function(t,e,i){return new s(t,e,i)},s.from=function(t,e,i){return i.runBackwards=!0,i.immediateRender=0!=i.immediateRender,new s(t,e,i)},s.fromTo=function(t,e,i,n){return n.startAt=i,n.immediateRender=0!=n.immediateRender&&0!=i.immediateRender,new s(t,e,n)},s.staggerTo=s.allTo=function(t,e,a,o,u,f,p){o=o||0;var d,_,m,g,v=0,y=[],T=function(){a.onComplete&&a.onComplete.apply(a.onCompleteScope||this,arguments),u.apply(p||a.callbackScope||this,f||c)},w=a.cycle,b=a.startAt&&a.startAt.cycle;for(h(t)||("string"==typeof t&&(t=i.selector(t)||t),l(t)&&(t=n(t))),t=t||[],o<0&&(t=n(t),t.reverse(),o*=-1),d=t.length-1,m=0;m<=d;m++){_={};for(g in a)_[g]=a[g];if(w&&(r(_,t,m),null!=_.duration&&(e=_.duration,delete _.duration)),b){b=_.startAt={};for(g in a.startAt)b[g]=a.startAt[g];r(_.startAt,t,m)}_.delay=v+(_.delay||0),m===d&&u&&(_.onComplete=T),y[m]=new s(t[m],e,_),v+=o}return y},s.staggerFrom=s.allFrom=function(t,e,i,n,r,a,o){return i.runBackwards=!0,i.immediateRender=0!=i.immediateRender,s.staggerTo(t,e,i,n,r,a,o)},s.staggerFromTo=s.allFromTo=function(t,e,i,n,r,a,o,l){return n.startAt=i,n.immediateRender=0!=n.immediateRender&&0!=i.immediateRender,s.staggerTo(t,e,n,r,a,o,l)},s.delayedCall=function(t,e,i,n,r){return new s(e,0,{delay:t,onComplete:e,onCompleteParams:i,callbackScope:n,onReverseComplete:e,onReverseCompleteParams:i,immediateRender:!1,useFrames:r,overwrite:0})},s.set=function(t,e){return new s(t,0,e)},s.isTweening=function(t){return i.getTweensOf(t,!0).length>0};var f=function(t,e){for(var n=[],r=0,s=t._first;s;)s instanceof i?n[r++]=s:(e&&(n[r++]=s),n=n.concat(f(s,e)),r=n.length),s=s._next;return n},p=s.getAllTweens=function(e){return f(t._rootTimeline,e).concat(f(t._rootFramesTimeline,e))};s.killAll=function(t,i,n,r){null==i&&(i=!0),null==n&&(n=!0);var s,a,o,l=p(0!=r),h=l.length,u=i&&n&&r;for(o=0;o<h;o++)a=l[o],(u||a instanceof e||(s=a.target===a.vars.onComplete)&&n||i&&!s)&&(t?a.totalTime(a._reversed?0:a.totalDuration()):a._enabled(!1,!1))},s.killChildTweensOf=function(t,e){if(null!=t){var r,a,u,c,f,p=o.tweenLookup;if("string"==typeof t&&(t=i.selector(t)||t),l(t)&&(t=n(t)),h(t))for(c=t.length;--c>-1;)s.killChildTweensOf(t[c],e);else{r=[];for(u in p)for(a=p[u].target.parentNode;a;)a===t&&(r=r.concat(p[u].tweens)),a=a.parentNode;for(f=r.length,c=0;c<f;c++)e&&r[c].totalTime(r[c].totalDuration()),r[c]._enabled(!1,!1)}}};var d=function(t,i,n,r){i=i!==!1,n=n!==!1,r=r!==!1;for(var s,a,o=p(r),l=i&&n&&r,h=o.length;--h>-1;)a=o[h],(l||a instanceof e||(s=a.target===a.vars.onComplete)&&n||i&&!s)&&a.paused(t)};return s.pauseAll=function(t,e,i){d(!0,t,e,i)},s.resumeAll=function(t,e,i){d(!1,t,e,i)},s.globalTimeScale=function(e){var n=t._rootTimeline,r=i.ticker.time;return arguments.length?(e=e||a,n._startTime=r-(r-n._startTime)*n._timeScale/e,n=t._rootFramesTimeline,r=i.ticker.frame,n._startTime=r-(r-n._startTime)*n._timeScale/e,n._timeScale=t._rootTimeline._timeScale=e,e):n._timeScale},u.progress=function(t,e){return arguments.length?this.totalTime(this.duration()*(this._yoyo&&0!==(1&this._cycle)?1-t:t)+this._cycle*(this._duration+this._repeatDelay),e):this._time/this.duration()},u.totalProgress=function(t,e){return arguments.length?this.totalTime(this.totalDuration()*t,e):this._totalTime/this.totalDuration()},u.time=function(t,e){return arguments.length?(this._dirty&&this.totalDuration(),t>this._duration&&(t=this._duration),this._yoyo&&0!==(1&this._cycle)?t=this._duration-t+this._cycle*(this._duration+this._repeatDelay):0!==this._repeat&&(t+=this._cycle*(this._duration+this._repeatDelay)),this.totalTime(t,e)):this._time},u.duration=function(e){return arguments.length?t.prototype.duration.call(this,e):this._duration},u.totalDuration=function(t){return arguments.length?this._repeat===-1?this:this.duration((t-this._repeat*this._repeatDelay)/(this._repeat+1)):(this._dirty&&(this._totalDuration=this._repeat===-1?999999999999:this._duration*(this._repeat+1)+this._repeatDelay*this._repeat,this._dirty=!1),this._totalDuration)},u.repeat=function(t){return arguments.length?(this._repeat=t,this._uncache(!0)):this._repeat},u.repeatDelay=function(t){return arguments.length?(this._repeatDelay=t,this._uncache(!0)):this._repeatDelay},u.yoyo=function(t){return arguments.length?(this._yoyo=t,this):this._yoyo},s},!0),i._gsDefine("TimelineLite",["core.Animation","core.SimpleTimeline","TweenLite"],function(t,e,n){var r=function(t){e.call(this,t),this._labels={},this.autoRemoveChildren=this.vars.autoRemoveChildren===!0,this.smoothChildTiming=this.vars.smoothChildTiming===!0,this._sortChildren=!0,this._onUpdate=this.vars.onUpdate;var i,n,r=this.vars;for(n in r)i=r[n],h(i)&&i.join("").indexOf("{self}")!==-1&&(r[n]=this._swapSelfInParams(i));h(r.tweens)&&this.add(r.tweens,0,r.align,r.stagger)},s=1e-10,a=n._internals,o=r._internals={},l=a.isSelector,h=a.isArray,u=a.lazyTweens,c=a.lazyRender,f=i._gsDefine.globals,p=function(t){var e,i={};for(e in t)i[e]=t[e];return i},d=function(t,e,i){var n,r,s=t.cycle;for(n in s)r=s[n],t[n]="function"==typeof r?r.call(e[i],i):r[i%r.length];delete t.cycle},_=o.pauseCallback=function(){},m=function(t){var e,i=[],n=t.length;for(e=0;e!==n;i.push(t[e++]));return i},g=r.prototype=new e;return r.version="1.19.0",g.constructor=r,g.kill()._gc=g._forcingPlayhead=g._hasPause=!1,g.to=function(t,e,i,r){var s=i.repeat&&f.TweenMax||n;return e?this.add(new s(t,e,i),r):this.set(t,i,r)},g.from=function(t,e,i,r){return this.add((i.repeat&&f.TweenMax||n).from(t,e,i),r)},g.fromTo=function(t,e,i,r,s){var a=r.repeat&&f.TweenMax||n;return e?this.add(a.fromTo(t,e,i,r),s):this.set(t,r,s)},g.staggerTo=function(t,e,i,s,a,o,h,u){var c,f,_=new r({onComplete:o,onCompleteParams:h,callbackScope:u,smoothChildTiming:this.smoothChildTiming}),g=i.cycle;for("string"==typeof t&&(t=n.selector(t)||t),t=t||[],l(t)&&(t=m(t)),s=s||0,s<0&&(t=m(t),t.reverse(),s*=-1),f=0;f<t.length;f++)c=p(i),c.startAt&&(c.startAt=p(c.startAt),c.startAt.cycle&&d(c.startAt,t,f)),g&&(d(c,t,f),null!=c.duration&&(e=c.duration,delete c.duration)),_.to(t[f],e,c,f*s);return this.add(_,a)},g.staggerFrom=function(t,e,i,n,r,s,a,o){return i.immediateRender=0!=i.immediateRender,i.runBackwards=!0,this.staggerTo(t,e,i,n,r,s,a,o)},g.staggerFromTo=function(t,e,i,n,r,s,a,o,l){return n.startAt=i,n.immediateRender=0!=n.immediateRender&&0!=i.immediateRender,this.staggerTo(t,e,n,r,s,a,o,l)},g.call=function(t,e,i,r){return this.add(n.delayedCall(0,t,e,i),r)},g.set=function(t,e,i){return i=this._parseTimeOrLabel(i,0,!0),null==e.immediateRender&&(e.immediateRender=i===this._time&&!this._paused),this.add(new n(t,0,e),i)},r.exportRoot=function(t,e){t=t||{},null==t.smoothChildTiming&&(t.smoothChildTiming=!0);var i,s,a=new r(t),o=a._timeline;for(null==e&&(e=!0),o._remove(a,!0),a._startTime=0,a._rawPrevTime=a._time=a._totalTime=o._time,i=o._first;i;)s=i._next,e&&i instanceof n&&i.target===i.vars.onComplete||a.add(i,i._startTime-i._delay),i=s;return o.add(a,0),a},g.add=function(i,s,a,o){var l,u,c,f,p,d;if("number"!=typeof s&&(s=this._parseTimeOrLabel(s,0,!0,i)),!(i instanceof t)){if(i instanceof Array||i&&i.push&&h(i)){for(a=a||"normal",o=o||0,l=s,u=i.length,c=0;c<u;c++)h(f=i[c])&&(f=new r({tweens:f})),this.add(f,l),"string"!=typeof f&&"function"!=typeof f&&("sequence"===a?l=f._startTime+f.totalDuration()/f._timeScale:"start"===a&&(f._startTime-=f.delay())),l+=o;return this._uncache(!0)}if("string"==typeof i)return this.addLabel(i,s);if("function"!=typeof i)throw"Cannot add "+i+" into the timeline; it is not a tween, timeline, function, or string.";i=n.delayedCall(0,i)}if(e.prototype.add.call(this,i,s),(this._gc||this._time===this._duration)&&!this._paused&&this._duration<this.duration())for(p=this,d=p.rawTime()>i._startTime;p._timeline;)d&&p._timeline.smoothChildTiming?p.totalTime(p._totalTime,!0):p._gc&&p._enabled(!0,!1),p=p._timeline;return this},g.remove=function(e){if(e instanceof t){this._remove(e,!1);var i=e._timeline=e.vars.useFrames?t._rootFramesTimeline:t._rootTimeline;return e._startTime=(e._paused?e._pauseTime:i._time)-(e._reversed?e.totalDuration()-e._totalTime:e._totalTime)/e._timeScale,this}if(e instanceof Array||e&&e.push&&h(e)){for(var n=e.length;--n>-1;)this.remove(e[n]);return this}return"string"==typeof e?this.removeLabel(e):this.kill(null,e)},g._remove=function(t,i){e.prototype._remove.call(this,t,i);var n=this._last;return n?this._time>n._startTime+n._totalDuration/n._timeScale&&(this._time=this.duration(),this._totalTime=this._totalDuration):this._time=this._totalTime=this._duration=this._totalDuration=0,this},g.append=function(t,e){return this.add(t,this._parseTimeOrLabel(null,e,!0,t))},g.insert=g.insertMultiple=function(t,e,i,n){return this.add(t,e||0,i,n)},g.appendMultiple=function(t,e,i,n){return this.add(t,this._parseTimeOrLabel(null,e,!0,t),i,n)},g.addLabel=function(t,e){return this._labels[t]=this._parseTimeOrLabel(e),this},g.addPause=function(t,e,i,r){var s=n.delayedCall(0,_,i,r||this);return s.vars.onComplete=s.vars.onReverseComplete=e,s.data="isPause",this._hasPause=!0,this.add(s,t)},g.removeLabel=function(t){return delete this._labels[t],this},g.getLabelTime=function(t){return null!=this._labels[t]?this._labels[t]:-1},g._parseTimeOrLabel=function(e,i,n,r){var s;if(r instanceof t&&r.timeline===this)this.remove(r);else if(r&&(r instanceof Array||r.push&&h(r)))for(s=r.length;--s>-1;)r[s]instanceof t&&r[s].timeline===this&&this.remove(r[s]);if("string"==typeof i)return this._parseTimeOrLabel(i,n&&"number"==typeof e&&null==this._labels[i]?e-this.duration():0,n);if(i=i||0,"string"!=typeof e||!isNaN(e)&&null==this._labels[e])null==e&&(e=this.duration());else{if(s=e.indexOf("="),s===-1)return null==this._labels[e]?n?this._labels[e]=this.duration()+i:i:this._labels[e]+i;i=parseInt(e.charAt(s-1)+"1",10)*Number(e.substr(s+1)),e=s>1?this._parseTimeOrLabel(e.substr(0,s-1),0,n):this.duration()}return Number(e)+i},g.seek=function(t,e){return this.totalTime("number"==typeof t?t:this._parseTimeOrLabel(t),e!==!1)},g.stop=function(){return this.paused(!0)},g.gotoAndPlay=function(t,e){return this.play(t,e)},g.gotoAndStop=function(t,e){return this.pause(t,e)},g.render=function(t,e,i){this._gc&&this._enabled(!0,!1);var n,r,a,o,l,h,f,p=this._dirty?this.totalDuration():this._totalDuration,d=this._time,_=this._startTime,m=this._timeScale,g=this._paused;if(t>=p-1e-7)this._totalTime=this._time=p,this._reversed||this._hasPausedChild()||(r=!0,o="onComplete",l=!!this._timeline.autoRemoveChildren,0===this._duration&&(t<=0&&t>=-1e-7||this._rawPrevTime<0||this._rawPrevTime===s)&&this._rawPrevTime!==t&&this._first&&(l=!0,this._rawPrevTime>s&&(o="onReverseComplete"))),this._rawPrevTime=this._duration||!e||t||this._rawPrevTime===t?t:s,t=p+1e-4;else if(t<1e-7)if(this._totalTime=this._time=0,(0!==d||0===this._duration&&this._rawPrevTime!==s&&(this._rawPrevTime>0||t<0&&this._rawPrevTime>=0))&&(o="onReverseComplete",r=this._reversed),t<0)this._active=!1,this._timeline.autoRemoveChildren&&this._reversed?(l=r=!0,o="onReverseComplete"):this._rawPrevTime>=0&&this._first&&(l=!0),this._rawPrevTime=t;else{if(this._rawPrevTime=this._duration||!e||t||this._rawPrevTime===t?t:s,0===t&&r)for(n=this._first;n&&0===n._startTime;)n._duration||(r=!1),n=n._next;t=0,this._initted||(l=!0)}else{if(this._hasPause&&!this._forcingPlayhead&&!e){if(t>=d)for(n=this._first;n&&n._startTime<=t&&!h;)n._duration||"isPause"!==n.data||n.ratio||0===n._startTime&&0===this._rawPrevTime||(h=n),n=n._next;else for(n=this._last;n&&n._startTime>=t&&!h;)n._duration||"isPause"===n.data&&n._rawPrevTime>0&&(h=n),n=n._prev;h&&(this._time=t=h._startTime,this._totalTime=t+this._cycle*(this._totalDuration+this._repeatDelay))}this._totalTime=this._time=this._rawPrevTime=t}if(this._time!==d&&this._first||i||l||h){if(this._initted||(this._initted=!0),this._active||!this._paused&&this._time!==d&&t>0&&(this._active=!0),0===d&&this.vars.onStart&&(0===this._time&&this._duration||e||this._callback("onStart")),f=this._time,f>=d)for(n=this._first;n&&(a=n._next,f===this._time&&(!this._paused||g));)(n._active||n._startTime<=f&&!n._paused&&!n._gc)&&(h===n&&this.pause(),n._reversed?n.render((n._dirty?n.totalDuration():n._totalDuration)-(t-n._startTime)*n._timeScale,e,i):n.render((t-n._startTime)*n._timeScale,e,i)),n=a;else for(n=this._last;n&&(a=n._prev,f===this._time&&(!this._paused||g));){if(n._active||n._startTime<=d&&!n._paused&&!n._gc){if(h===n){for(h=n._prev;h&&h.endTime()>this._time;)h.render(h._reversed?h.totalDuration()-(t-h._startTime)*h._timeScale:(t-h._startTime)*h._timeScale,e,i),h=h._prev;h=null,this.pause()}n._reversed?n.render((n._dirty?n.totalDuration():n._totalDuration)-(t-n._startTime)*n._timeScale,e,i):n.render((t-n._startTime)*n._timeScale,e,i)}n=a}this._onUpdate&&(e||(u.length&&c(),this._callback("onUpdate"))),o&&(this._gc||_!==this._startTime&&m===this._timeScale||(0===this._time||p>=this.totalDuration())&&(r&&(u.length&&c(),this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[o]&&this._callback(o)))}},g._hasPausedChild=function(){for(var t=this._first;t;){if(t._paused||t instanceof r&&t._hasPausedChild())return!0;t=t._next}return!1},g.getChildren=function(t,e,i,r){r=r||-9999999999;for(var s=[],a=this._first,o=0;a;)a._startTime<r||(a instanceof n?e!==!1&&(s[o++]=a):(i!==!1&&(s[o++]=a),t!==!1&&(s=s.concat(a.getChildren(!0,e,i)),o=s.length))),a=a._next;return s},g.getTweensOf=function(t,e){var i,r,s=this._gc,a=[],o=0;for(s&&this._enabled(!0,!0),i=n.getTweensOf(t),r=i.length;--r>-1;)(i[r].timeline===this||e&&this._contains(i[r]))&&(a[o++]=i[r]);return s&&this._enabled(!1,!0),a},g.recent=function(){return this._recent},g._contains=function(t){for(var e=t.timeline;e;){if(e===this)return!0;e=e.timeline}return!1},g.shiftChildren=function(t,e,i){i=i||0;for(var n,r=this._first,s=this._labels;r;)r._startTime>=i&&(r._startTime+=t),r=r._next;if(e)for(n in s)s[n]>=i&&(s[n]+=t);return this._uncache(!0)},g._kill=function(t,e){if(!t&&!e)return this._enabled(!1,!1);for(var i=e?this.getTweensOf(e):this.getChildren(!0,!0,!1),n=i.length,r=!1;--n>-1;)i[n]._kill(t,e)&&(r=!0);return r},g.clear=function(t){var e=this.getChildren(!1,!0,!0),i=e.length;for(this._time=this._totalTime=0;--i>-1;)e[i]._enabled(!1,!1);return t!==!1&&(this._labels={}),this._uncache(!0)},g.invalidate=function(){for(var e=this._first;e;)e.invalidate(),e=e._next;return t.prototype.invalidate.call(this)},g._enabled=function(t,i){if(t===this._gc)for(var n=this._first;n;)n._enabled(t,!0),n=n._next;return e.prototype._enabled.call(this,t,i)},g.totalTime=function(e,i,n){this._forcingPlayhead=!0;var r=t.prototype.totalTime.apply(this,arguments);return this._forcingPlayhead=!1,r},g.duration=function(t){return arguments.length?(0!==this.duration()&&0!==t&&this.timeScale(this._duration/t),this):(this._dirty&&this.totalDuration(),this._duration)},g.totalDuration=function(t){if(!arguments.length){if(this._dirty){for(var e,i,n=0,r=this._last,s=999999999999;r;)e=r._prev,r._dirty&&r.totalDuration(),r._startTime>s&&this._sortChildren&&!r._paused?this.add(r,r._startTime-r._delay):s=r._startTime,r._startTime<0&&!r._paused&&(n-=r._startTime,this._timeline.smoothChildTiming&&(this._startTime+=r._startTime/this._timeScale),this.shiftChildren(-r._startTime,!1,-9999999999),s=0),i=r._startTime+r._totalDuration/r._timeScale,i>n&&(n=i),r=e;this._duration=this._totalDuration=n,this._dirty=!1}return this._totalDuration}return t&&this.totalDuration()?this.timeScale(this._totalDuration/t):this},g.paused=function(e){if(!e)for(var i=this._first,n=this._time;i;)i._startTime===n&&"isPause"===i.data&&(i._rawPrevTime=0),i=i._next;return t.prototype.paused.apply(this,arguments)},g.usesFrames=function(){for(var e=this._timeline;e._timeline;)e=e._timeline;return e===t._rootFramesTimeline},g.rawTime=function(){return this._paused?this._totalTime:(this._timeline.rawTime()-this._startTime)*this._timeScale},r},!0),i._gsDefine("TimelineMax",["TimelineLite","TweenLite","easing.Ease"],function(t,e,n){var r=function(e){t.call(this,e),this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._cycle=0,this._yoyo=this.vars.yoyo===!0,this._dirty=!0},s=1e-10,a=e._internals,o=a.lazyTweens,l=a.lazyRender,h=i._gsDefine.globals,u=new n(null,null,1,0),c=r.prototype=new t;return c.constructor=r,c.kill()._gc=!1,r.version="1.19.0",c.invalidate=function(){return this._yoyo=this.vars.yoyo===!0,this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._uncache(!0),t.prototype.invalidate.call(this)},c.addCallback=function(t,i,n,r){return this.add(e.delayedCall(0,t,n,r),i)},c.removeCallback=function(t,e){if(t)if(null==e)this._kill(null,t);else for(var i=this.getTweensOf(t,!1),n=i.length,r=this._parseTimeOrLabel(e);--n>-1;)i[n]._startTime===r&&i[n]._enabled(!1,!1);return this},c.removePause=function(e){return this.removeCallback(t._internals.pauseCallback,e)},c.tweenTo=function(t,i){i=i||{};var n,r,s,a={ease:u,useFrames:this.usesFrames(),immediateRender:!1},o=i.repeat&&h.TweenMax||e;for(r in i)a[r]=i[r];return a.time=this._parseTimeOrLabel(t),n=Math.abs(Number(a.time)-this._time)/this._timeScale||.001,s=new o(this,n,a),a.onStart=function(){s.target.paused(!0),s.vars.time!==s.target.time()&&n===s.duration()&&s.duration(Math.abs(s.vars.time-s.target.time())/s.target._timeScale),i.onStart&&s._callback("onStart")},s},c.tweenFromTo=function(t,e,i){i=i||{},t=this._parseTimeOrLabel(t),i.startAt={onComplete:this.seek,onCompleteParams:[t],callbackScope:this},i.immediateRender=i.immediateRender!==!1;var n=this.tweenTo(e,i);return n.duration(Math.abs(n.vars.time-t)/this._timeScale||.001)},c.render=function(t,e,i){this._gc&&this._enabled(!0,!1);var n,r,a,h,u,c,f,p,d=this._dirty?this.totalDuration():this._totalDuration,_=this._duration,m=this._time,g=this._totalTime,v=this._startTime,y=this._timeScale,T=this._rawPrevTime,w=this._paused,b=this._cycle;if(t>=d-1e-7)this._locked||(this._totalTime=d,this._cycle=this._repeat),this._reversed||this._hasPausedChild()||(r=!0,h="onComplete",u=!!this._timeline.autoRemoveChildren,0===this._duration&&(t<=0&&t>=-1e-7||T<0||T===s)&&T!==t&&this._first&&(u=!0,T>s&&(h="onReverseComplete"))),this._rawPrevTime=this._duration||!e||t||this._rawPrevTime===t?t:s,this._yoyo&&0!==(1&this._cycle)?this._time=t=0:(this._time=_,t=_+1e-4);else if(t<1e-7)if(this._locked||(this._totalTime=this._cycle=0),this._time=0,(0!==m||0===_&&T!==s&&(T>0||t<0&&T>=0)&&!this._locked)&&(h="onReverseComplete",r=this._reversed),t<0)this._active=!1,this._timeline.autoRemoveChildren&&this._reversed?(u=r=!0,h="onReverseComplete"):T>=0&&this._first&&(u=!0),this._rawPrevTime=t;else{if(this._rawPrevTime=_||!e||t||this._rawPrevTime===t?t:s,0===t&&r)for(n=this._first;n&&0===n._startTime;)n._duration||(r=!1),n=n._next;t=0,this._initted||(u=!0)}else if(0===_&&T<0&&(u=!0),this._time=this._rawPrevTime=t,this._locked||(this._totalTime=t,0!==this._repeat&&(c=_+this._repeatDelay,this._cycle=this._totalTime/c>>0,0!==this._cycle&&this._cycle===this._totalTime/c&&g<=t&&this._cycle--,this._time=this._totalTime-this._cycle*c,this._yoyo&&0!==(1&this._cycle)&&(this._time=_-this._time),this._time>_?(this._time=_,t=_+1e-4):this._time<0?this._time=t=0:t=this._time)),this._hasPause&&!this._forcingPlayhead&&!e){if(t=this._time,t>=m)for(n=this._first;n&&n._startTime<=t&&!f;)n._duration||"isPause"!==n.data||n.ratio||0===n._startTime&&0===this._rawPrevTime||(f=n),n=n._next;else for(n=this._last;n&&n._startTime>=t&&!f;)n._duration||"isPause"===n.data&&n._rawPrevTime>0&&(f=n),n=n._prev;f&&(this._time=t=f._startTime,this._totalTime=t+this._cycle*(this._totalDuration+this._repeatDelay))}if(this._cycle!==b&&!this._locked){var x=this._yoyo&&0!==(1&b),P=x===(this._yoyo&&0!==(1&this._cycle)),S=this._totalTime,C=this._cycle,k=this._rawPrevTime,O=this._time;if(this._totalTime=b*_,this._cycle<b?x=!x:this._totalTime+=_,this._time=m,this._rawPrevTime=0===_?T-1e-4:T,this._cycle=b,this._locked=!0,m=x?0:_,this.render(m,e,0===_),e||this._gc||this.vars.onRepeat&&this._callback("onRepeat"),m!==this._time)return;if(P&&(m=x?_+1e-4:-1e-4,this.render(m,!0,!1)),this._locked=!1,this._paused&&!w)return;this._time=O,this._totalTime=S,this._cycle=C,this._rawPrevTime=k}if(!(this._time!==m&&this._first||i||u||f))return void(g!==this._totalTime&&this._onUpdate&&(e||this._callback("onUpdate")));if(this._initted||(this._initted=!0),this._active||!this._paused&&this._totalTime!==g&&t>0&&(this._active=!0),0===g&&this.vars.onStart&&(0===this._totalTime&&this._totalDuration||e||this._callback("onStart")),p=this._time,p>=m)for(n=this._first;n&&(a=n._next,p===this._time&&(!this._paused||w));)(n._active||n._startTime<=this._time&&!n._paused&&!n._gc)&&(f===n&&this.pause(),n._reversed?n.render((n._dirty?n.totalDuration():n._totalDuration)-(t-n._startTime)*n._timeScale,e,i):n.render((t-n._startTime)*n._timeScale,e,i)),n=a;else for(n=this._last;n&&(a=n._prev,p===this._time&&(!this._paused||w));){if(n._active||n._startTime<=m&&!n._paused&&!n._gc){if(f===n){for(f=n._prev;f&&f.endTime()>this._time;)f.render(f._reversed?f.totalDuration()-(t-f._startTime)*f._timeScale:(t-f._startTime)*f._timeScale,e,i),f=f._prev;f=null,this.pause()}n._reversed?n.render((n._dirty?n.totalDuration():n._totalDuration)-(t-n._startTime)*n._timeScale,e,i):n.render((t-n._startTime)*n._timeScale,e,i)}n=a}this._onUpdate&&(e||(o.length&&l(),this._callback("onUpdate"))),h&&(this._locked||this._gc||v!==this._startTime&&y===this._timeScale||(0===this._time||d>=this.totalDuration())&&(r&&(o.length&&l(),this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[h]&&this._callback(h)))},c.getActive=function(t,e,i){null==t&&(t=!0),null==e&&(e=!0),null==i&&(i=!1);var n,r,s=[],a=this.getChildren(t,e,i),o=0,l=a.length;for(n=0;n<l;n++)r=a[n],r.isActive()&&(s[o++]=r);return s},c.getLabelAfter=function(t){t||0!==t&&(t=this._time);var e,i=this.getLabelsArray(),n=i.length;for(e=0;e<n;e++)if(i[e].time>t)return i[e].name;return null},c.getLabelBefore=function(t){null==t&&(t=this._time);for(var e=this.getLabelsArray(),i=e.length;--i>-1;)if(e[i].time<t)return e[i].name;return null},c.getLabelsArray=function(){var t,e=[],i=0;for(t in this._labels)e[i++]={time:this._labels[t],name:t};return e.sort(function(t,e){return t.time-e.time}),e},c.progress=function(t,e){return arguments.length?this.totalTime(this.duration()*(this._yoyo&&0!==(1&this._cycle)?1-t:t)+this._cycle*(this._duration+this._repeatDelay),e):this._time/this.duration()},c.totalProgress=function(t,e){return arguments.length?this.totalTime(this.totalDuration()*t,e):this._totalTime/this.totalDuration()},c.totalDuration=function(e){return arguments.length?this._repeat!==-1&&e?this.timeScale(this.totalDuration()/e):this:(this._dirty&&(t.prototype.totalDuration.call(this),this._totalDuration=this._repeat===-1?999999999999:this._duration*(this._repeat+1)+this._repeatDelay*this._repeat),this._totalDuration)},c.time=function(t,e){return arguments.length?(this._dirty&&this.totalDuration(),t>this._duration&&(t=this._duration),this._yoyo&&0!==(1&this._cycle)?t=this._duration-t+this._cycle*(this._duration+this._repeatDelay):0!==this._repeat&&(t+=this._cycle*(this._duration+this._repeatDelay)),this.totalTime(t,e)):this._time},c.repeat=function(t){return arguments.length?(this._repeat=t,this._uncache(!0)):this._repeat},c.repeatDelay=function(t){return arguments.length?(this._repeatDelay=t,this._uncache(!0)):this._repeatDelay},c.yoyo=function(t){return arguments.length?(this._yoyo=t,this):this._yoyo},c.currentLabel=function(t){return arguments.length?this.seek(t,!0):this.getLabelBefore(this._time+1e-8)},r},!0),function(){var t=180/Math.PI,e=[],n=[],r=[],s={},a=i._gsDefine.globals,o=function(t,e,i,n){i===n&&(i=n-(n-e)/1e6),t===e&&(e=t+(i-t)/1e6),this.a=t,this.b=e,this.c=i,this.d=n,this.da=n-t,this.ca=i-t,this.ba=e-t},l=",x,y,z,left,top,right,bottom,marginTop,marginLeft,marginRight,marginBottom,paddingLeft,paddingTop,paddingRight,paddingBottom,backgroundPosition,backgroundPosition_y,",h=function(t,e,i,n){var r={a:t},s={},a={},o={c:n},l=(t+e)/2,h=(e+i)/2,u=(i+n)/2,c=(l+h)/2,f=(h+u)/2,p=(f-c)/8;return r.b=l+(t-l)/4,s.b=c+p,r.c=s.a=(r.b+s.b)/2,s.c=a.a=(c+f)/2,a.b=f-p,o.b=u+(n-u)/4,a.c=o.a=(a.b+o.b)/2,[r,s,a,o]},u=function(t,i,s,a,o){var l,u,c,f,p,d,_,m,g,v,y,T,w,b=t.length-1,x=0,P=t[0].a;for(l=0;l<b;l++)p=t[x],u=p.a,c=p.d,f=t[x+1].d,o?(y=e[l],T=n[l],w=(T+y)*i*.25/(a?.5:r[l]||.5),d=c-(c-u)*(a?.5*i:0!==y?w/y:0),_=c+(f-c)*(a?.5*i:0!==T?w/T:0),m=c-(d+((_-d)*(3*y/(y+T)+.5)/4||0))):(d=c-(c-u)*i*.5,_=c+(f-c)*i*.5,m=c-(d+_)/2),d+=m,_+=m,p.c=g=d,0!==l?p.b=P:p.b=P=p.a+.6*(p.c-p.a),p.da=c-u,p.ca=g-u,p.ba=P-u,s?(v=h(u,P,g,c),t.splice(x,1,v[0],v[1],v[2],v[3]),x+=4):x++,P=_;p=t[x],p.b=P,p.c=P+.4*(p.d-P),p.da=p.d-p.a,p.ca=p.c-p.a,p.ba=P-p.a,s&&(v=h(p.a,P,p.c,p.d),t.splice(x,1,v[0],v[1],v[2],v[3]))},c=function(t,i,r,s){var a,l,h,u,c,f,p=[];if(s)for(t=[s].concat(t),l=t.length;--l>-1;)"string"==typeof(f=t[l][i])&&"="===f.charAt(1)&&(t[l][i]=s[i]+Number(f.charAt(0)+f.substr(2)));if(a=t.length-2,a<0)return p[0]=new o(t[0][i],0,0,t[a<-1?0:1][i]),p;for(l=0;l<a;l++)h=t[l][i],u=t[l+1][i],p[l]=new o(h,0,0,u),r&&(c=t[l+2][i],e[l]=(e[l]||0)+(u-h)*(u-h),n[l]=(n[l]||0)+(c-u)*(c-u));return p[l]=new o(t[l][i],0,0,t[l+1][i]),p},f=function(t,i,a,o,h,f){var p,d,_,m,g,v,y,T,w={},b=[],x=f||t[0];h="string"==typeof h?","+h+",":l,null==i&&(i=1);for(d in t[0])b.push(d);if(t.length>1){for(T=t[t.length-1],y=!0,p=b.length;--p>-1;)if(d=b[p],Math.abs(x[d]-T[d])>.05){y=!1;break}y&&(t=t.concat(),f&&t.unshift(f),t.push(t[1]),f=t[t.length-3])}for(e.length=n.length=r.length=0,p=b.length;--p>-1;)d=b[p],s[d]=h.indexOf(","+d+",")!==-1,w[d]=c(t,d,s[d],f);for(p=e.length;--p>-1;)e[p]=Math.sqrt(e[p]),n[p]=Math.sqrt(n[p]);if(!o){for(p=b.length;--p>-1;)if(s[d])for(_=w[b[p]],v=_.length-1,m=0;m<v;m++)g=_[m+1].da/n[m]+_[m].da/e[m]||0,r[m]=(r[m]||0)+g*g;for(p=r.length;--p>-1;)r[p]=Math.sqrt(r[p])}for(p=b.length,m=a?4:1;--p>-1;)d=b[p],_=w[d],u(_,i,a,o,s[d]),y&&(_.splice(0,m),_.splice(_.length-m,m));return w},p=function(t,e,i){e=e||"soft";var n,r,s,a,l,h,u,c,f,p,d,_={},m="cubic"===e?3:2,g="soft"===e,v=[];if(g&&i&&(t=[i].concat(t)),null==t||t.length<m+1)throw"invalid Bezier data";for(f in t[0])v.push(f);for(h=v.length;--h>-1;){for(f=v[h],_[f]=l=[],p=0,c=t.length,u=0;u<c;u++)n=null==i?t[u][f]:"string"==typeof(d=t[u][f])&&"="===d.charAt(1)?i[f]+Number(d.charAt(0)+d.substr(2)):Number(d),g&&u>1&&u<c-1&&(l[p++]=(n+l[p-2])/2),l[p++]=n;for(c=p-m+1,p=0,u=0;u<c;u+=m)n=l[u],r=l[u+1],s=l[u+2],a=2===m?0:l[u+3],l[p++]=d=3===m?new o(n,r,s,a):new o(n,(2*r+n)/3,(2*r+s)/3,s);l.length=p}return _},d=function(t,e,i){for(var n,r,s,a,o,l,h,u,c,f,p,d=1/i,_=t.length;--_>-1;)for(f=t[_],
s=f.a,a=f.d-s,o=f.c-s,l=f.b-s,n=r=0,u=1;u<=i;u++)h=d*u,c=1-h,n=r-(r=(h*h*a+3*c*(h*o+c*l))*h),p=_*i+u-1,e[p]=(e[p]||0)+n*n},_=function(t,e){e=e>>0||6;var i,n,r,s,a=[],o=[],l=0,h=0,u=e-1,c=[],f=[];for(i in t)d(t[i],a,e);for(r=a.length,n=0;n<r;n++)l+=Math.sqrt(a[n]),s=n%e,f[s]=l,s===u&&(h+=l,s=n/e>>0,c[s]=f,o[s]=h,l=0,f=[]);return{length:h,lengths:o,segments:c}},m=i._gsDefine.plugin({propName:"bezier",priority:-1,version:"1.3.7",API:2,global:!0,init:function(t,e,i){this._target=t,e instanceof Array&&(e={values:e}),this._func={},this._mod={},this._props=[],this._timeRes=null==e.timeResolution?6:parseInt(e.timeResolution,10);var n,r,s,a,o,l=e.values||[],h={},u=l[0],c=e.autoRotate||i.vars.orientToBezier;this._autoRotate=c?c instanceof Array?c:[["x","y","rotation",c===!0?0:Number(c)||0]]:null;for(n in u)this._props.push(n);for(s=this._props.length;--s>-1;)n=this._props[s],this._overwriteProps.push(n),r=this._func[n]="function"==typeof t[n],h[n]=r?t[n.indexOf("set")||"function"!=typeof t["get"+n.substr(3)]?n:"get"+n.substr(3)]():parseFloat(t[n]),o||h[n]!==l[0][n]&&(o=h);if(this._beziers="cubic"!==e.type&&"quadratic"!==e.type&&"soft"!==e.type?f(l,isNaN(e.curviness)?1:e.curviness,!1,"thruBasic"===e.type,e.correlate,o):p(l,e.type,h),this._segCount=this._beziers[n].length,this._timeRes){var d=_(this._beziers,this._timeRes);this._length=d.length,this._lengths=d.lengths,this._segments=d.segments,this._l1=this._li=this._s1=this._si=0,this._l2=this._lengths[0],this._curSeg=this._segments[0],this._s2=this._curSeg[0],this._prec=1/this._curSeg.length}if(c=this._autoRotate)for(this._initialRotations=[],c[0]instanceof Array||(this._autoRotate=c=[c]),s=c.length;--s>-1;){for(a=0;a<3;a++)n=c[s][a],this._func[n]="function"==typeof t[n]&&t[n.indexOf("set")||"function"!=typeof t["get"+n.substr(3)]?n:"get"+n.substr(3)];n=c[s][2],this._initialRotations[s]=(this._func[n]?this._func[n].call(this._target):this._target[n])||0,this._overwriteProps.push(n)}return this._startRatio=i.vars.runBackwards?1:0,!0},set:function(e){var i,n,r,s,a,o,l,h,u,c,f=this._segCount,p=this._func,d=this._target,_=e!==this._startRatio;if(this._timeRes){if(u=this._lengths,c=this._curSeg,e*=this._length,r=this._li,e>this._l2&&r<f-1){for(h=f-1;r<h&&(this._l2=u[++r])<=e;);this._l1=u[r-1],this._li=r,this._curSeg=c=this._segments[r],this._s2=c[this._s1=this._si=0]}else if(e<this._l1&&r>0){for(;r>0&&(this._l1=u[--r])>=e;);0===r&&e<this._l1?this._l1=0:r++,this._l2=u[r],this._li=r,this._curSeg=c=this._segments[r],this._s1=c[(this._si=c.length-1)-1]||0,this._s2=c[this._si]}if(i=r,e-=this._l1,r=this._si,e>this._s2&&r<c.length-1){for(h=c.length-1;r<h&&(this._s2=c[++r])<=e;);this._s1=c[r-1],this._si=r}else if(e<this._s1&&r>0){for(;r>0&&(this._s1=c[--r])>=e;);0===r&&e<this._s1?this._s1=0:r++,this._s2=c[r],this._si=r}o=(r+(e-this._s1)/(this._s2-this._s1))*this._prec||0}else i=e<0?0:e>=1?f-1:f*e>>0,o=(e-i*(1/f))*f;for(n=1-o,r=this._props.length;--r>-1;)s=this._props[r],a=this._beziers[s][i],l=(o*o*a.da+3*n*(o*a.ca+n*a.ba))*o+a.a,this._mod[s]&&(l=this._mod[s](l,d)),p[s]?d[s](l):d[s]=l;if(this._autoRotate){var m,g,v,y,T,w,b,x=this._autoRotate;for(r=x.length;--r>-1;)s=x[r][2],w=x[r][3]||0,b=x[r][4]===!0?1:t,a=this._beziers[x[r][0]],m=this._beziers[x[r][1]],a&&m&&(a=a[i],m=m[i],g=a.a+(a.b-a.a)*o,y=a.b+(a.c-a.b)*o,g+=(y-g)*o,y+=(a.c+(a.d-a.c)*o-y)*o,v=m.a+(m.b-m.a)*o,T=m.b+(m.c-m.b)*o,v+=(T-v)*o,T+=(m.c+(m.d-m.c)*o-T)*o,l=_?Math.atan2(T-v,y-g)*b+w:this._initialRotations[r],this._mod[s]&&(l=this._mod[s](l,d)),p[s]?d[s](l):d[s]=l)}}}),g=m.prototype;m.bezierThrough=f,m.cubicToQuadratic=h,m._autoCSS=!0,m.quadraticToCubic=function(t,e,i){return new o(t,(2*e+t)/3,(2*e+i)/3,i)},m._cssRegister=function(){var t=a.CSSPlugin;if(t){var e=t._internals,i=e._parseToProxy,n=e._setPluginRatio,r=e.CSSPropTween;e._registerComplexSpecialProp("bezier",{parser:function(t,e,s,a,o,l){e instanceof Array&&(e={values:e}),l=new m;var h,u,c,f=e.values,p=f.length-1,d=[],_={};if(p<0)return o;for(h=0;h<=p;h++)c=i(t,f[h],a,o,l,p!==h),d[h]=c.end;for(u in e)_[u]=e[u];return _.values=d,o=new r(t,"bezier",0,0,c.pt,2),o.data=c,o.plugin=l,o.setRatio=n,0===_.autoRotate&&(_.autoRotate=!0),!_.autoRotate||_.autoRotate instanceof Array||(h=_.autoRotate===!0?0:Number(_.autoRotate),_.autoRotate=null!=c.end.left?[["left","top","rotation",h,!1]]:null!=c.end.x&&[["x","y","rotation",h,!1]]),_.autoRotate&&(a._transform||a._enableTransforms(!1),c.autoRotate=a._target._gsTransform,c.proxy.rotation=c.autoRotate.rotation||0,a._overwriteProps.push("rotation")),l._onInitTween(c.proxy,_,a._tween),o}})}},g._mod=function(t){for(var e,i=this._overwriteProps,n=i.length;--n>-1;)e=t[i[n]],e&&"function"==typeof e&&(this._mod[i[n]]=e)},g._kill=function(t){var e,i,n=this._props;for(e in this._beziers)if(e in t)for(delete this._beziers[e],delete this._func[e],i=n.length;--i>-1;)n[i]===e&&n.splice(i,1);if(n=this._autoRotate)for(i=n.length;--i>-1;)t[n[i][2]]&&n.splice(i,1);return this._super._kill.call(this,t)}}(),i._gsDefine("plugins.CSSPlugin",["plugins.TweenPlugin","TweenLite"],function(t,e){var n,r,s,a,o=function(){t.call(this,"css"),this._overwriteProps.length=0,this.setRatio=o.prototype.setRatio},l=i._gsDefine.globals,h={},u=o.prototype=new t("css");u.constructor=o,o.version="1.19.0",o.API=2,o.defaultTransformPerspective=0,o.defaultSkewType="compensated",o.defaultSmoothOrigin=!0,u="px",o.suffixMap={top:u,right:u,bottom:u,left:u,width:u,height:u,fontSize:u,padding:u,margin:u,perspective:u,lineHeight:""};var c,f,p,d,_,m,g,v,y=/(?:\-|\.|\b)(\d|\.|e\-)+/g,T=/(?:\d|\-\d|\.\d|\-\.\d|\+=\d|\-=\d|\+=.\d|\-=\.\d)+/g,w=/(?:\+=|\-=|\-|\b)[\d\-\.]+[a-zA-Z0-9]*(?:%|\b)/gi,b=/(?![+-]?\d*\.?\d+|[+-]|e[+-]\d+)[^0-9]/g,x=/(?:\d|\-|\+|=|#|\.)*/g,P=/opacity *= *([^)]*)/i,S=/opacity:([^;]*)/i,C=/alpha\(opacity *=.+?\)/i,k=/^(rgb|hsl)/,O=/([A-Z])/g,A=/-([a-z])/gi,R=/(^(?:url\(\"|url\())|(?:(\"\))$|\)$)/gi,D=function(t,e){return e.toUpperCase()},M=/(?:Left|Right|Width)/i,j=/(M11|M12|M21|M22)=[\d\-\.e]+/gi,E=/progid\:DXImageTransform\.Microsoft\.Matrix\(.+?\)/i,F=/,(?=[^\)]*(?:\(|$))/gi,N=/[\s,\(]/i,L=Math.PI/180,I=180/Math.PI,z={},q=document,B=function(t){return q.createElementNS?q.createElementNS("http://www.w3.org/1999/xhtml",t):q.createElement(t)},X=B("div"),Y=B("img"),H=o._internals={_specialProps:h},W=navigator.userAgent,U=function(){var t=W.indexOf("Android"),e=B("a");return p=W.indexOf("Safari")!==-1&&W.indexOf("Chrome")===-1&&(t===-1||Number(W.substr(t+8,1))>3),_=p&&Number(W.substr(W.indexOf("Version/")+8,1))<6,d=W.indexOf("Firefox")!==-1,(/MSIE ([0-9]{1,}[\.0-9]{0,})/.exec(W)||/Trident\/.*rv:([0-9]{1,}[\.0-9]{0,})/.exec(W))&&(m=parseFloat(RegExp.$1)),!!e&&(e.style.cssText="top:1px;opacity:.55;",/^0.55/.test(e.style.opacity))}(),V=function(t){return P.test("string"==typeof t?t:(t.currentStyle?t.currentStyle.filter:t.style.filter)||"")?parseFloat(RegExp.$1)/100:1},$=function(t){window.console&&console.log(t)},G="",Q="",Z=function(t,e){e=e||X;var i,n,r=e.style;if(void 0!==r[t])return t;for(t=t.charAt(0).toUpperCase()+t.substr(1),i=["O","Moz","ms","Ms","Webkit"],n=5;--n>-1&&void 0===r[i[n]+t];);return n>=0?(Q=3===n?"ms":i[n],G="-"+Q.toLowerCase()+"-",Q+t):null},K=q.defaultView?q.defaultView.getComputedStyle:function(){},J=o.getStyle=function(t,e,i,n,r){var s;return U||"opacity"!==e?(!n&&t.style[e]?s=t.style[e]:(i=i||K(t))?s=i[e]||i.getPropertyValue(e)||i.getPropertyValue(e.replace(O,"-$1").toLowerCase()):t.currentStyle&&(s=t.currentStyle[e]),null==r||s&&"none"!==s&&"auto"!==s&&"auto auto"!==s?s:r):V(t)},tt=H.convertToPixels=function(t,i,n,r,s){if("px"===r||!r)return n;if("auto"===r||!n)return 0;var a,l,h,u=M.test(i),c=t,f=X.style,p=n<0,d=1===n;if(p&&(n=-n),d&&(n*=100),"%"===r&&i.indexOf("border")!==-1)a=n/100*(u?t.clientWidth:t.clientHeight);else{if(f.cssText="border:0 solid red;position:"+J(t,"position")+";line-height:0;","%"!==r&&c.appendChild&&"v"!==r.charAt(0)&&"rem"!==r)f[u?"borderLeftWidth":"borderTopWidth"]=n+r;else{if(c=t.parentNode||q.body,l=c._gsCache,h=e.ticker.frame,l&&u&&l.time===h)return l.width*n/100;f[u?"width":"height"]=n+r}c.appendChild(X),a=parseFloat(X[u?"offsetWidth":"offsetHeight"]),c.removeChild(X),u&&"%"===r&&o.cacheWidths!==!1&&(l=c._gsCache=c._gsCache||{},l.time=h,l.width=a/n*100),0!==a||s||(a=tt(t,i,n,r,!0))}return d&&(a/=100),p?-a:a},et=H.calculateOffset=function(t,e,i){if("absolute"!==J(t,"position",i))return 0;var n="left"===e?"Left":"Top",r=J(t,"margin"+n,i);return t["offset"+n]-(tt(t,e,parseFloat(r),r.replace(x,""))||0)},it=function(t,e){var i,n,r,s={};if(e=e||K(t,null))if(i=e.length)for(;--i>-1;)r=e[i],r.indexOf("-transform")!==-1&&At!==r||(s[r.replace(A,D)]=e.getPropertyValue(r));else for(i in e)i.indexOf("Transform")!==-1&&Ot!==i||(s[i]=e[i]);else if(e=t.currentStyle||t.style)for(i in e)"string"==typeof i&&void 0===s[i]&&(s[i.replace(A,D)]=e[i]);return U||(s.opacity=V(t)),n=Xt(t,e,!1),s.rotation=n.rotation,s.skewX=n.skewX,s.scaleX=n.scaleX,s.scaleY=n.scaleY,s.x=n.x,s.y=n.y,Dt&&(s.z=n.z,s.rotationX=n.rotationX,s.rotationY=n.rotationY,s.scaleZ=n.scaleZ),s.filters&&delete s.filters,s},nt=function(t,e,i,n,r){var s,a,o,l={},h=t.style;for(a in i)"cssText"!==a&&"length"!==a&&isNaN(a)&&(e[a]!==(s=i[a])||r&&r[a])&&a.indexOf("Origin")===-1&&("number"!=typeof s&&"string"!=typeof s||(l[a]="auto"!==s||"left"!==a&&"top"!==a?""!==s&&"auto"!==s&&"none"!==s||"string"!=typeof e[a]||""===e[a].replace(b,"")?s:0:et(t,a),void 0!==h[a]&&(o=new vt(h,a,h[a],o))));if(n)for(a in n)"className"!==a&&(l[a]=n[a]);return{difs:l,firstMPT:o}},rt={width:["Left","Right"],height:["Top","Bottom"]},st=["marginLeft","marginRight","marginTop","marginBottom"],at=function(t,e,i){if("svg"===(t.nodeName+"").toLowerCase())return(i||K(t))[e]||0;if(t.getBBox&&zt(t))return t.getBBox()[e]||0;var n=parseFloat("width"===e?t.offsetWidth:t.offsetHeight),r=rt[e],s=r.length;for(i=i||K(t,null);--s>-1;)n-=parseFloat(J(t,"padding"+r[s],i,!0))||0,n-=parseFloat(J(t,"border"+r[s]+"Width",i,!0))||0;return n},ot=function(t,e){if("contain"===t||"auto"===t||"auto auto"===t)return t+" ";null!=t&&""!==t||(t="0 0");var i,n=t.split(" "),r=t.indexOf("left")!==-1?"0%":t.indexOf("right")!==-1?"100%":n[0],s=t.indexOf("top")!==-1?"0%":t.indexOf("bottom")!==-1?"100%":n[1];if(n.length>3&&!e){for(n=t.split(", ").join(",").split(","),t=[],i=0;i<n.length;i++)t.push(ot(n[i]));return t.join(",")}return null==s?s="center"===r?"50%":"0":"center"===s&&(s="50%"),("center"===r||isNaN(parseFloat(r))&&(r+"").indexOf("=")===-1)&&(r="50%"),t=r+" "+s+(n.length>2?" "+n[2]:""),e&&(e.oxp=r.indexOf("%")!==-1,e.oyp=s.indexOf("%")!==-1,e.oxr="="===r.charAt(1),e.oyr="="===s.charAt(1),e.ox=parseFloat(r.replace(b,"")),e.oy=parseFloat(s.replace(b,"")),e.v=t),e||t},lt=function(t,e){return"function"==typeof t&&(t=t(v,g)),"string"==typeof t&&"="===t.charAt(1)?parseInt(t.charAt(0)+"1",10)*parseFloat(t.substr(2)):parseFloat(t)-parseFloat(e)||0},ht=function(t,e){return"function"==typeof t&&(t=t(v,g)),null==t?e:"string"==typeof t&&"="===t.charAt(1)?parseInt(t.charAt(0)+"1",10)*parseFloat(t.substr(2))+e:parseFloat(t)||0},ut=function(t,e,i,n){var r,s,a,o,l,h=1e-6;return"function"==typeof t&&(t=t(v,g)),null==t?o=e:"number"==typeof t?o=t:(r=360,s=t.split("_"),l="="===t.charAt(1),a=(l?parseInt(t.charAt(0)+"1",10)*parseFloat(s[0].substr(2)):parseFloat(s[0]))*(t.indexOf("rad")===-1?1:I)-(l?0:e),s.length&&(n&&(n[i]=e+a),t.indexOf("short")!==-1&&(a%=r,a!==a%(r/2)&&(a=a<0?a+r:a-r)),t.indexOf("_cw")!==-1&&a<0?a=(a+9999999999*r)%r-(a/r|0)*r:t.indexOf("ccw")!==-1&&a>0&&(a=(a-9999999999*r)%r-(a/r|0)*r)),o=e+a),o<h&&o>-h&&(o=0),o},ct={aqua:[0,255,255],lime:[0,255,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,255],navy:[0,0,128],white:[255,255,255],fuchsia:[255,0,255],olive:[128,128,0],yellow:[255,255,0],orange:[255,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[255,0,0],pink:[255,192,203],cyan:[0,255,255],transparent:[255,255,255,0]},ft=function(t,e,i){return t=t<0?t+1:t>1?t-1:t,255*(6*t<1?e+(i-e)*t*6:t<.5?i:3*t<2?e+(i-e)*(2/3-t)*6:e)+.5|0},pt=o.parseColor=function(t,e){var i,n,r,s,a,o,l,h,u,c,f;if(t)if("number"==typeof t)i=[t>>16,t>>8&255,255&t];else{if(","===t.charAt(t.length-1)&&(t=t.substr(0,t.length-1)),ct[t])i=ct[t];else if("#"===t.charAt(0))4===t.length&&(n=t.charAt(1),r=t.charAt(2),s=t.charAt(3),t="#"+n+n+r+r+s+s),t=parseInt(t.substr(1),16),i=[t>>16,t>>8&255,255&t];else if("hsl"===t.substr(0,3))if(i=f=t.match(y),e){if(t.indexOf("=")!==-1)return t.match(T)}else a=Number(i[0])%360/360,o=Number(i[1])/100,l=Number(i[2])/100,r=l<=.5?l*(o+1):l+o-l*o,n=2*l-r,i.length>3&&(i[3]=Number(t[3])),i[0]=ft(a+1/3,n,r),i[1]=ft(a,n,r),i[2]=ft(a-1/3,n,r);else i=t.match(y)||ct.transparent;i[0]=Number(i[0]),i[1]=Number(i[1]),i[2]=Number(i[2]),i.length>3&&(i[3]=Number(i[3]))}else i=ct.black;return e&&!f&&(n=i[0]/255,r=i[1]/255,s=i[2]/255,h=Math.max(n,r,s),u=Math.min(n,r,s),l=(h+u)/2,h===u?a=o=0:(c=h-u,o=l>.5?c/(2-h-u):c/(h+u),a=h===n?(r-s)/c+(r<s?6:0):h===r?(s-n)/c+2:(n-r)/c+4,a*=60),i[0]=a+.5|0,i[1]=100*o+.5|0,i[2]=100*l+.5|0),i},dt=function(t,e){var i,n,r,s=t.match(_t)||[],a=0,o=s.length?"":t;for(i=0;i<s.length;i++)n=s[i],r=t.substr(a,t.indexOf(n,a)-a),a+=r.length+n.length,n=pt(n,e),3===n.length&&n.push(1),o+=r+(e?"hsla("+n[0]+","+n[1]+"%,"+n[2]+"%,"+n[3]:"rgba("+n.join(","))+")";return o+t.substr(a)},_t="(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3}){1,2}\\b";for(u in ct)_t+="|"+u+"\\b";_t=new RegExp(_t+")","gi"),o.colorStringFilter=function(t){var e,i=t[0]+t[1];_t.test(i)&&(e=i.indexOf("hsl(")!==-1||i.indexOf("hsla(")!==-1,t[0]=dt(t[0],e),t[1]=dt(t[1],e)),_t.lastIndex=0},e.defaultStringFilter||(e.defaultStringFilter=o.colorStringFilter);var mt=function(t,e,i,n){if(null==t)return function(t){return t};var r,s=e?(t.match(_t)||[""])[0]:"",a=t.split(s).join("").match(w)||[],o=t.substr(0,t.indexOf(a[0])),l=")"===t.charAt(t.length-1)?")":"",h=t.indexOf(" ")!==-1?" ":",",u=a.length,c=u>0?a[0].replace(y,""):"";return u?r=e?function(t){var e,f,p,d;if("number"==typeof t)t+=c;else if(n&&F.test(t)){for(d=t.replace(F,"|").split("|"),p=0;p<d.length;p++)d[p]=r(d[p]);return d.join(",")}if(e=(t.match(_t)||[s])[0],f=t.split(e).join("").match(w)||[],p=f.length,u>p--)for(;++p<u;)f[p]=i?f[(p-1)/2|0]:a[p];return o+f.join(h)+h+e+l+(t.indexOf("inset")!==-1?" inset":"")}:function(t){var e,s,f;if("number"==typeof t)t+=c;else if(n&&F.test(t)){for(s=t.replace(F,"|").split("|"),f=0;f<s.length;f++)s[f]=r(s[f]);return s.join(",")}if(e=t.match(w)||[],f=e.length,u>f--)for(;++f<u;)e[f]=i?e[(f-1)/2|0]:a[f];return o+e.join(h)+l}:function(t){return t}},gt=function(t){return t=t.split(","),function(e,i,n,r,s,a,o){var l,h=(i+"").split(" ");for(o={},l=0;l<4;l++)o[t[l]]=h[l]=h[l]||h[(l-1)/2>>0];return r.parse(e,o,s,a)}},vt=(H._setPluginRatio=function(t){this.plugin.setRatio(t);for(var e,i,n,r,s,a=this.data,o=a.proxy,l=a.firstMPT,h=1e-6;l;)e=o[l.v],l.r?e=Math.round(e):e<h&&e>-h&&(e=0),l.t[l.p]=e,l=l._next;if(a.autoRotate&&(a.autoRotate.rotation=a.mod?a.mod(o.rotation,this.t):o.rotation),1===t||0===t)for(l=a.firstMPT,s=1===t?"e":"b";l;){if(i=l.t,i.type){if(1===i.type){for(r=i.xs0+i.s+i.xs1,n=1;n<i.l;n++)r+=i["xn"+n]+i["xs"+(n+1)];i[s]=r}}else i[s]=i.s+i.xs0;l=l._next}},function(t,e,i,n,r){this.t=t,this.p=e,this.v=i,this.r=r,n&&(n._prev=this,this._next=n)}),yt=(H._parseToProxy=function(t,e,i,n,r,s){var a,o,l,h,u,c=n,f={},p={},d=i._transform,_=z;for(i._transform=null,z=e,n=u=i.parse(t,e,n,r),z=_,s&&(i._transform=d,c&&(c._prev=null,c._prev&&(c._prev._next=null)));n&&n!==c;){if(n.type<=1&&(o=n.p,p[o]=n.s+n.c,f[o]=n.s,s||(h=new vt(n,"s",o,h,n.r),n.c=0),1===n.type))for(a=n.l;--a>0;)l="xn"+a,o=n.p+"_"+l,p[o]=n.data[l],f[o]=n[l],s||(h=new vt(n,l,o,h,n.rxp[l]));n=n._next}return{proxy:f,end:p,firstMPT:h,pt:u}},H.CSSPropTween=function(t,e,i,r,s,o,l,h,u,c,f){this.t=t,this.p=e,this.s=i,this.c=r,this.n=l||e,t instanceof yt||a.push(this.n),this.r=h,this.type=o||0,u&&(this.pr=u,n=!0),this.b=void 0===c?i:c,this.e=void 0===f?i+r:f,s&&(this._next=s,s._prev=this)}),Tt=function(t,e,i,n,r,s){var a=new yt(t,e,i,n-i,r,(-1),s);return a.b=i,a.e=a.xs0=n,a},wt=o.parseComplex=function(t,e,i,n,r,s,a,l,h,u){i=i||s||"","function"==typeof n&&(n=n(v,g)),a=new yt(t,e,0,0,a,u?2:1,null,(!1),l,i,n),n+="",r&&_t.test(n+i)&&(n=[i,n],o.colorStringFilter(n),i=n[0],n=n[1]);var f,p,d,_,m,w,b,x,P,S,C,k,O,A=i.split(", ").join(",").split(" "),R=n.split(", ").join(",").split(" "),D=A.length,M=c!==!1;for(n.indexOf(",")===-1&&i.indexOf(",")===-1||(A=A.join(" ").replace(F,", ").split(" "),R=R.join(" ").replace(F,", ").split(" "),D=A.length),D!==R.length&&(A=(s||"").split(" "),D=A.length),a.plugin=h,a.setRatio=u,_t.lastIndex=0,f=0;f<D;f++)if(_=A[f],m=R[f],x=parseFloat(_),x||0===x)a.appendXtra("",x,lt(m,x),m.replace(T,""),M&&m.indexOf("px")!==-1,!0);else if(r&&_t.test(_))k=m.indexOf(")")+1,k=")"+(k?m.substr(k):""),O=m.indexOf("hsl")!==-1&&U,_=pt(_,O),m=pt(m,O),P=_.length+m.length>6,P&&!U&&0===m[3]?(a["xs"+a.l]+=a.l?" transparent":"transparent",a.e=a.e.split(R[f]).join("transparent")):(U||(P=!1),O?a.appendXtra(P?"hsla(":"hsl(",_[0],lt(m[0],_[0]),",",!1,!0).appendXtra("",_[1],lt(m[1],_[1]),"%,",!1).appendXtra("",_[2],lt(m[2],_[2]),P?"%,":"%"+k,!1):a.appendXtra(P?"rgba(":"rgb(",_[0],m[0]-_[0],",",!0,!0).appendXtra("",_[1],m[1]-_[1],",",!0).appendXtra("",_[2],m[2]-_[2],P?",":k,!0),P&&(_=_.length<4?1:_[3],a.appendXtra("",_,(m.length<4?1:m[3])-_,k,!1))),_t.lastIndex=0;else if(w=_.match(y)){if(b=m.match(T),!b||b.length!==w.length)return a;for(d=0,p=0;p<w.length;p++)C=w[p],S=_.indexOf(C,d),a.appendXtra(_.substr(d,S-d),Number(C),lt(b[p],C),"",M&&"px"===_.substr(S+C.length,2),0===p),d=S+C.length;a["xs"+a.l]+=_.substr(d)}else a["xs"+a.l]+=a.l||a["xs"+a.l]?" "+m:m;if(n.indexOf("=")!==-1&&a.data){for(k=a.xs0+a.data.s,f=1;f<a.l;f++)k+=a["xs"+f]+a.data["xn"+f];a.e=k+a["xs"+f]}return a.l||(a.type=-1,a.xs0=a.e),a.xfirst||a},bt=9;for(u=yt.prototype,u.l=u.pr=0;--bt>0;)u["xn"+bt]=0,u["xs"+bt]="";u.xs0="",u._next=u._prev=u.xfirst=u.data=u.plugin=u.setRatio=u.rxp=null,u.appendXtra=function(t,e,i,n,r,s){var a=this,o=a.l;return a["xs"+o]+=s&&(o||a["xs"+o])?" "+t:t||"",i||0===o||a.plugin?(a.l++,a.type=a.setRatio?2:1,a["xs"+a.l]=n||"",o>0?(a.data["xn"+o]=e+i,a.rxp["xn"+o]=r,a["xn"+o]=e,a.plugin||(a.xfirst=new yt(a,"xn"+o,e,i,a.xfirst||a,0,a.n,r,a.pr),a.xfirst.xs0=0),a):(a.data={s:e+i},a.rxp={},a.s=e,a.c=i,a.r=r,a)):(a["xs"+o]+=e+(n||""),a)};var xt=function(t,e){e=e||{},this.p=e.prefix?Z(t)||t:t,h[t]=h[this.p]=this,this.format=e.formatter||mt(e.defaultValue,e.color,e.collapsible,e.multi),e.parser&&(this.parse=e.parser),this.clrs=e.color,this.multi=e.multi,this.keyword=e.keyword,this.dflt=e.defaultValue,this.pr=e.priority||0},Pt=H._registerComplexSpecialProp=function(t,e,i){"object"!=typeof e&&(e={parser:i});var n,r,s=t.split(","),a=e.defaultValue;for(i=i||[a],n=0;n<s.length;n++)e.prefix=0===n&&e.prefix,e.defaultValue=i[n]||a,r=new xt(s[n],e)},St=H._registerPluginProp=function(t){if(!h[t]){var e=t.charAt(0).toUpperCase()+t.substr(1)+"Plugin";Pt(t,{parser:function(t,i,n,r,s,a,o){var u=l.com.greensock.plugins[e];return u?(u._cssRegister(),h[n].parse(t,i,n,r,s,a,o)):($("Error: "+e+" js file not loaded."),s)}})}};u=xt.prototype,u.parseComplex=function(t,e,i,n,r,s){var a,o,l,h,u,c,f=this.keyword;if(this.multi&&(F.test(i)||F.test(e)?(o=e.replace(F,"|").split("|"),l=i.replace(F,"|").split("|")):f&&(o=[e],l=[i])),l){for(h=l.length>o.length?l.length:o.length,a=0;a<h;a++)e=o[a]=o[a]||this.dflt,i=l[a]=l[a]||this.dflt,f&&(u=e.indexOf(f),c=i.indexOf(f),u!==c&&(c===-1?o[a]=o[a].split(f).join(""):u===-1&&(o[a]+=" "+f)));e=o.join(", "),i=l.join(", ")}return wt(t,this.p,e,i,this.clrs,this.dflt,n,this.pr,r,s)},u.parse=function(t,e,i,n,r,a,o){return this.parseComplex(t.style,this.format(J(t,this.p,s,!1,this.dflt)),this.format(e),r,a)},o.registerSpecialProp=function(t,e,i){Pt(t,{parser:function(t,n,r,s,a,o,l){var h=new yt(t,r,0,0,a,2,r,(!1),i);return h.plugin=o,h.setRatio=e(t,n,s._tween,r),h},priority:i})},o.useSVGTransformAttr=p||d;var Ct,kt="scaleX,scaleY,scaleZ,x,y,z,skewX,skewY,rotation,rotationX,rotationY,perspective,xPercent,yPercent".split(","),Ot=Z("transform"),At=G+"transform",Rt=Z("transformOrigin"),Dt=null!==Z("perspective"),Mt=H.Transform=function(){this.perspective=parseFloat(o.defaultTransformPerspective)||0,this.force3D=!(o.defaultForce3D===!1||!Dt)&&(o.defaultForce3D||"auto")},jt=window.SVGElement,Et=function(t,e,i){var n,r=q.createElementNS("http://www.w3.org/2000/svg",t),s=/([a-z])([A-Z])/g;for(n in i)r.setAttributeNS(null,n.replace(s,"$1-$2").toLowerCase(),i[n]);return e.appendChild(r),r},Ft=q.documentElement,Nt=function(){var t,e,i,n=m||/Android/i.test(W)&&!window.chrome;return q.createElementNS&&!n&&(t=Et("svg",Ft),e=Et("rect",t,{width:100,height:50,x:100}),i=e.getBoundingClientRect().width,e.style[Rt]="50% 50%",e.style[Ot]="scaleX(0.5)",n=i===e.getBoundingClientRect().width&&!(d&&Dt),Ft.removeChild(t)),n}(),Lt=function(t,e,i,n,r,s){var a,l,h,u,c,f,p,d,_,m,g,v,y,T,w=t._gsTransform,b=Bt(t,!0);w&&(y=w.xOrigin,T=w.yOrigin),(!n||(a=n.split(" ")).length<2)&&(p=t.getBBox(),e=ot(e).split(" "),a=[(e[0].indexOf("%")!==-1?parseFloat(e[0])/100*p.width:parseFloat(e[0]))+p.x,(e[1].indexOf("%")!==-1?parseFloat(e[1])/100*p.height:parseFloat(e[1]))+p.y]),i.xOrigin=u=parseFloat(a[0]),i.yOrigin=c=parseFloat(a[1]),n&&b!==qt&&(f=b[0],p=b[1],d=b[2],_=b[3],m=b[4],g=b[5],v=f*_-p*d,l=u*(_/v)+c*(-d/v)+(d*g-_*m)/v,h=u*(-p/v)+c*(f/v)-(f*g-p*m)/v,u=i.xOrigin=a[0]=l,c=i.yOrigin=a[1]=h),w&&(s&&(i.xOffset=w.xOffset,i.yOffset=w.yOffset,w=i),r||r!==!1&&o.defaultSmoothOrigin!==!1?(l=u-y,h=c-T,w.xOffset+=l*b[0]+h*b[2]-l,w.yOffset+=l*b[1]+h*b[3]-h):w.xOffset=w.yOffset=0),s||t.setAttribute("data-svg-origin",a.join(" "))},It=function(t){try{return t.getBBox()}catch(t){}},zt=function(t){return!!(jt&&t.getBBox&&t.getCTM&&It(t)&&(!t.parentNode||t.parentNode.getBBox&&t.parentNode.getCTM))},qt=[1,0,0,1,0,0],Bt=function(t,e){var i,n,r,s,a,o,l=t._gsTransform||new Mt,h=1e5,u=t.style;if(Ot?n=J(t,At,null,!0):t.currentStyle&&(n=t.currentStyle.filter.match(j),n=n&&4===n.length?[n[0].substr(4),Number(n[2].substr(4)),Number(n[1].substr(4)),n[3].substr(4),l.x||0,l.y||0].join(","):""),i=!n||"none"===n||"matrix(1, 0, 0, 1, 0, 0)"===n,i&&Ot&&((o="none"===K(t).display)||!t.parentNode)&&(o&&(s=u.display,u.display="block"),t.parentNode||(a=1,Ft.appendChild(t)),n=J(t,At,null,!0),i=!n||"none"===n||"matrix(1, 0, 0, 1, 0, 0)"===n,s?u.display=s:o&&Ut(u,"display"),a&&Ft.removeChild(t)),(l.svg||t.getBBox&&zt(t))&&(i&&(u[Ot]+"").indexOf("matrix")!==-1&&(n=u[Ot],i=0),r=t.getAttribute("transform"),i&&r&&(r.indexOf("matrix")!==-1?(n=r,i=0):r.indexOf("translate")!==-1&&(n="matrix(1,0,0,1,"+r.match(/(?:\-|\b)[\d\-\.e]+\b/gi).join(",")+")",i=0))),i)return qt;for(r=(n||"").match(y)||[],bt=r.length;--bt>-1;)s=Number(r[bt]),r[bt]=(a=s-(s|=0))?(a*h+(a<0?-.5:.5)|0)/h+s:s;return e&&r.length>6?[r[0],r[1],r[4],r[5],r[12],r[13]]:r},Xt=H.getTransform=function(t,i,n,r){if(t._gsTransform&&n&&!r)return t._gsTransform;var s,a,l,h,u,c,f=n?t._gsTransform||new Mt:new Mt,p=f.scaleX<0,d=2e-5,_=1e5,m=Dt?parseFloat(J(t,Rt,i,!1,"0 0 0").split(" ")[2])||f.zOrigin||0:0,g=parseFloat(o.defaultTransformPerspective)||0;if(f.svg=!(!t.getBBox||!zt(t)),f.svg&&(Lt(t,J(t,Rt,i,!1,"50% 50%")+"",f,t.getAttribute("data-svg-origin")),Ct=o.useSVGTransformAttr||Nt),s=Bt(t),s!==qt){if(16===s.length){var v,y,T,w,b,x=s[0],P=s[1],S=s[2],C=s[3],k=s[4],O=s[5],A=s[6],R=s[7],D=s[8],M=s[9],j=s[10],E=s[12],F=s[13],N=s[14],L=s[11],z=Math.atan2(A,j);f.zOrigin&&(N=-f.zOrigin,E=D*N-s[12],F=M*N-s[13],N=j*N+f.zOrigin-s[14]),f.rotationX=z*I,z&&(w=Math.cos(-z),b=Math.sin(-z),v=k*w+D*b,y=O*w+M*b,T=A*w+j*b,D=k*-b+D*w,M=O*-b+M*w,j=A*-b+j*w,L=R*-b+L*w,k=v,O=y,A=T),z=Math.atan2(-S,j),f.rotationY=z*I,z&&(w=Math.cos(-z),b=Math.sin(-z),v=x*w-D*b,y=P*w-M*b,T=S*w-j*b,M=P*b+M*w,j=S*b+j*w,L=C*b+L*w,x=v,P=y,S=T),z=Math.atan2(P,x),f.rotation=z*I,z&&(w=Math.cos(-z),b=Math.sin(-z),x=x*w+k*b,y=P*w+O*b,O=P*-b+O*w,A=S*-b+A*w,P=y),f.rotationX&&Math.abs(f.rotationX)+Math.abs(f.rotation)>359.9&&(f.rotationX=f.rotation=0,f.rotationY=180-f.rotationY),f.scaleX=(Math.sqrt(x*x+P*P)*_+.5|0)/_,f.scaleY=(Math.sqrt(O*O+M*M)*_+.5|0)/_,f.scaleZ=(Math.sqrt(A*A+j*j)*_+.5|0)/_,f.rotationX||f.rotationY?f.skewX=0:(f.skewX=k||O?Math.atan2(k,O)*I+f.rotation:f.skewX||0,Math.abs(f.skewX)>90&&Math.abs(f.skewX)<270&&(p?(f.scaleX*=-1,f.skewX+=f.rotation<=0?180:-180,f.rotation+=f.rotation<=0?180:-180):(f.scaleY*=-1,f.skewX+=f.skewX<=0?180:-180))),f.perspective=L?1/(L<0?-L:L):0,f.x=E,f.y=F,f.z=N,f.svg&&(f.x-=f.xOrigin-(f.xOrigin*x-f.yOrigin*k),f.y-=f.yOrigin-(f.yOrigin*P-f.xOrigin*O))}else if(!Dt||r||!s.length||f.x!==s[4]||f.y!==s[5]||!f.rotationX&&!f.rotationY){var q=s.length>=6,B=q?s[0]:1,X=s[1]||0,Y=s[2]||0,H=q?s[3]:1;f.x=s[4]||0,f.y=s[5]||0,l=Math.sqrt(B*B+X*X),h=Math.sqrt(H*H+Y*Y),u=B||X?Math.atan2(X,B)*I:f.rotation||0,c=Y||H?Math.atan2(Y,H)*I+u:f.skewX||0,Math.abs(c)>90&&Math.abs(c)<270&&(p?(l*=-1,c+=u<=0?180:-180,u+=u<=0?180:-180):(h*=-1,c+=c<=0?180:-180)),f.scaleX=l,f.scaleY=h,f.rotation=u,f.skewX=c,Dt&&(f.rotationX=f.rotationY=f.z=0,f.perspective=g,f.scaleZ=1),f.svg&&(f.x-=f.xOrigin-(f.xOrigin*B+f.yOrigin*Y),f.y-=f.yOrigin-(f.xOrigin*X+f.yOrigin*H))}f.zOrigin=m;for(a in f)f[a]<d&&f[a]>-d&&(f[a]=0)}return n&&(t._gsTransform=f,f.svg&&(Ct&&t.style[Ot]?e.delayedCall(.001,function(){Ut(t.style,Ot)}):!Ct&&t.getAttribute("transform")&&e.delayedCall(.001,function(){t.removeAttribute("transform")}))),f},Yt=function(t){var e,i,n=this.data,r=-n.rotation*L,s=r+n.skewX*L,a=1e5,o=(Math.cos(r)*n.scaleX*a|0)/a,l=(Math.sin(r)*n.scaleX*a|0)/a,h=(Math.sin(s)*-n.scaleY*a|0)/a,u=(Math.cos(s)*n.scaleY*a|0)/a,c=this.t.style,f=this.t.currentStyle;if(f){i=l,l=-h,h=-i,e=f.filter,c.filter="";var p,d,_=this.t.offsetWidth,g=this.t.offsetHeight,v="absolute"!==f.position,y="progid:DXImageTransform.Microsoft.Matrix(M11="+o+", M12="+l+", M21="+h+", M22="+u,T=n.x+_*n.xPercent/100,w=n.y+g*n.yPercent/100;if(null!=n.ox&&(p=(n.oxp?_*n.ox*.01:n.ox)-_/2,d=(n.oyp?g*n.oy*.01:n.oy)-g/2,T+=p-(p*o+d*l),w+=d-(p*h+d*u)),v?(p=_/2,d=g/2,y+=", Dx="+(p-(p*o+d*l)+T)+", Dy="+(d-(p*h+d*u)+w)+")"):y+=", sizingMethod='auto expand')",e.indexOf("DXImageTransform.Microsoft.Matrix(")!==-1?c.filter=e.replace(E,y):c.filter=y+" "+e,0!==t&&1!==t||1===o&&0===l&&0===h&&1===u&&(v&&y.indexOf("Dx=0, Dy=0")===-1||P.test(e)&&100!==parseFloat(RegExp.$1)||e.indexOf(e.indexOf("Alpha"))===-1&&c.removeAttribute("filter")),!v){var b,S,C,k=m<8?1:-1;for(p=n.ieOffsetX||0,d=n.ieOffsetY||0,n.ieOffsetX=Math.round((_-((o<0?-o:o)*_+(l<0?-l:l)*g))/2+T),n.ieOffsetY=Math.round((g-((u<0?-u:u)*g+(h<0?-h:h)*_))/2+w),bt=0;bt<4;bt++)S=st[bt],b=f[S],i=b.indexOf("px")!==-1?parseFloat(b):tt(this.t,S,parseFloat(b),b.replace(x,""))||0,C=i!==n[S]?bt<2?-n.ieOffsetX:-n.ieOffsetY:bt<2?p-n.ieOffsetX:d-n.ieOffsetY,c[S]=(n[S]=Math.round(i-C*(0===bt||2===bt?1:k)))+"px"}}},Ht=H.set3DTransformRatio=H.setTransformRatio=function(t){var e,i,n,r,s,a,o,l,h,u,c,f,p,_,m,g,v,y,T,w,b,x,P,S=this.data,C=this.t.style,k=S.rotation,O=S.rotationX,A=S.rotationY,R=S.scaleX,D=S.scaleY,M=S.scaleZ,j=S.x,E=S.y,F=S.z,N=S.svg,I=S.perspective,z=S.force3D;if(((1===t||0===t)&&"auto"===z&&(this.tween._totalTime===this.tween._totalDuration||!this.tween._totalTime)||!z)&&!F&&!I&&!A&&!O&&1===M||Ct&&N||!Dt)return void(k||S.skewX||N?(k*=L,x=S.skewX*L,P=1e5,e=Math.cos(k)*R,r=Math.sin(k)*R,i=Math.sin(k-x)*-D,s=Math.cos(k-x)*D,x&&"simple"===S.skewType&&(v=Math.tan(x-S.skewY*L),v=Math.sqrt(1+v*v),i*=v,s*=v,S.skewY&&(v=Math.tan(S.skewY*L),v=Math.sqrt(1+v*v),e*=v,r*=v)),N&&(j+=S.xOrigin-(S.xOrigin*e+S.yOrigin*i)+S.xOffset,E+=S.yOrigin-(S.xOrigin*r+S.yOrigin*s)+S.yOffset,Ct&&(S.xPercent||S.yPercent)&&(_=this.t.getBBox(),j+=.01*S.xPercent*_.width,E+=.01*S.yPercent*_.height),_=1e-6,j<_&&j>-_&&(j=0),E<_&&E>-_&&(E=0)),T=(e*P|0)/P+","+(r*P|0)/P+","+(i*P|0)/P+","+(s*P|0)/P+","+j+","+E+")",N&&Ct?this.t.setAttribute("transform","matrix("+T):C[Ot]=(S.xPercent||S.yPercent?"translate("+S.xPercent+"%,"+S.yPercent+"%) matrix(":"matrix(")+T):C[Ot]=(S.xPercent||S.yPercent?"translate("+S.xPercent+"%,"+S.yPercent+"%) matrix(":"matrix(")+R+",0,0,"+D+","+j+","+E+")");if(d&&(_=1e-4,R<_&&R>-_&&(R=M=2e-5),D<_&&D>-_&&(D=M=2e-5),!I||S.z||S.rotationX||S.rotationY||(I=0)),k||S.skewX)k*=L,m=e=Math.cos(k),g=r=Math.sin(k),S.skewX&&(k-=S.skewX*L,m=Math.cos(k),g=Math.sin(k),"simple"===S.skewType&&(v=Math.tan((S.skewX-S.skewY)*L),v=Math.sqrt(1+v*v),m*=v,g*=v,S.skewY&&(v=Math.tan(S.skewY*L),v=Math.sqrt(1+v*v),e*=v,r*=v))),i=-g,s=m;else{if(!(A||O||1!==M||I||N))return void(C[Ot]=(S.xPercent||S.yPercent?"translate("+S.xPercent+"%,"+S.yPercent+"%) translate3d(":"translate3d(")+j+"px,"+E+"px,"+F+"px)"+(1!==R||1!==D?" scale("+R+","+D+")":""));e=s=1,i=r=0}h=1,n=a=o=l=u=c=0,f=I?-1/I:0,p=S.zOrigin,_=1e-6,w=",",b="0",k=A*L,k&&(m=Math.cos(k),g=Math.sin(k),o=-g,u=f*-g,n=e*g,a=r*g,h=m,f*=m,e*=m,r*=m),k=O*L,k&&(m=Math.cos(k),g=Math.sin(k),v=i*m+n*g,y=s*m+a*g,l=h*g,c=f*g,n=i*-g+n*m,a=s*-g+a*m,h*=m,f*=m,i=v,s=y),1!==M&&(n*=M,a*=M,h*=M,f*=M),1!==D&&(i*=D,s*=D,l*=D,c*=D),1!==R&&(e*=R,r*=R,o*=R,u*=R),(p||N)&&(p&&(j+=n*-p,E+=a*-p,F+=h*-p+p),N&&(j+=S.xOrigin-(S.xOrigin*e+S.yOrigin*i)+S.xOffset,E+=S.yOrigin-(S.xOrigin*r+S.yOrigin*s)+S.yOffset),j<_&&j>-_&&(j=b),E<_&&E>-_&&(E=b),F<_&&F>-_&&(F=0)),T=S.xPercent||S.yPercent?"translate("+S.xPercent+"%,"+S.yPercent+"%) matrix3d(":"matrix3d(",T+=(e<_&&e>-_?b:e)+w+(r<_&&r>-_?b:r)+w+(o<_&&o>-_?b:o),T+=w+(u<_&&u>-_?b:u)+w+(i<_&&i>-_?b:i)+w+(s<_&&s>-_?b:s),O||A||1!==M?(T+=w+(l<_&&l>-_?b:l)+w+(c<_&&c>-_?b:c)+w+(n<_&&n>-_?b:n),T+=w+(a<_&&a>-_?b:a)+w+(h<_&&h>-_?b:h)+w+(f<_&&f>-_?b:f)+w):T+=",0,0,0,0,1,0,",T+=j+w+E+w+F+w+(I?1+-F/I:1)+")",C[Ot]=T};u=Mt.prototype,u.x=u.y=u.z=u.skewX=u.skewY=u.rotation=u.rotationX=u.rotationY=u.zOrigin=u.xPercent=u.yPercent=u.xOffset=u.yOffset=0,u.scaleX=u.scaleY=u.scaleZ=1,Pt("transform,scale,scaleX,scaleY,scaleZ,x,y,z,rotation,rotationX,rotationY,rotationZ,skewX,skewY,shortRotation,shortRotationX,shortRotationY,shortRotationZ,transformOrigin,svgOrigin,transformPerspective,directionalRotation,parseTransform,force3D,skewType,xPercent,yPercent,smoothOrigin",{parser:function(t,e,i,n,r,a,l){if(n._lastParsedTransform===l)return r;n._lastParsedTransform=l;var h;"function"==typeof l[i]&&(h=l[i],l[i]=e);var u,c,f,p,d,_,m,y,T,w=t._gsTransform,b=t.style,x=1e-6,P=kt.length,S=l,C={},k="transformOrigin",O=Xt(t,s,!0,S.parseTransform),A=S.transform&&("function"==typeof S.transform?S.transform(v,g):S.transform);if(n._transform=O,A&&"string"==typeof A&&Ot)c=X.style,c[Ot]=A,c.display="block",c.position="absolute",q.body.appendChild(X),u=Xt(X,null,!1),O.svg&&(_=O.xOrigin,m=O.yOrigin,u.x-=O.xOffset,u.y-=O.yOffset,(S.transformOrigin||S.svgOrigin)&&(A={},Lt(t,ot(S.transformOrigin),A,S.svgOrigin,S.smoothOrigin,!0),_=A.xOrigin,m=A.yOrigin,u.x-=A.xOffset-O.xOffset,u.y-=A.yOffset-O.yOffset),(_||m)&&(y=Bt(X,!0),u.x-=_-(_*y[0]+m*y[2]),u.y-=m-(_*y[1]+m*y[3]))),q.body.removeChild(X),u.perspective||(u.perspective=O.perspective),null!=S.xPercent&&(u.xPercent=ht(S.xPercent,O.xPercent)),null!=S.yPercent&&(u.yPercent=ht(S.yPercent,O.yPercent));else if("object"==typeof S){if(u={scaleX:ht(null!=S.scaleX?S.scaleX:S.scale,O.scaleX),scaleY:ht(null!=S.scaleY?S.scaleY:S.scale,O.scaleY),scaleZ:ht(S.scaleZ,O.scaleZ),x:ht(S.x,O.x),y:ht(S.y,O.y),z:ht(S.z,O.z),xPercent:ht(S.xPercent,O.xPercent),yPercent:ht(S.yPercent,O.yPercent),perspective:ht(S.transformPerspective,O.perspective)},d=S.directionalRotation,null!=d)if("object"==typeof d)for(c in d)S[c]=d[c];else S.rotation=d;"string"==typeof S.x&&S.x.indexOf("%")!==-1&&(u.x=0,u.xPercent=ht(S.x,O.xPercent)),"string"==typeof S.y&&S.y.indexOf("%")!==-1&&(u.y=0,u.yPercent=ht(S.y,O.yPercent)),u.rotation=ut("rotation"in S?S.rotation:"shortRotation"in S?S.shortRotation+"_short":"rotationZ"in S?S.rotationZ:O.rotation-O.skewY,O.rotation-O.skewY,"rotation",C),Dt&&(u.rotationX=ut("rotationX"in S?S.rotationX:"shortRotationX"in S?S.shortRotationX+"_short":O.rotationX||0,O.rotationX,"rotationX",C),u.rotationY=ut("rotationY"in S?S.rotationY:"shortRotationY"in S?S.shortRotationY+"_short":O.rotationY||0,O.rotationY,"rotationY",C)),u.skewX=ut(S.skewX,O.skewX-O.skewY),(u.skewY=ut(S.skewY,O.skewY))&&(u.skewX+=u.skewY,
u.rotation+=u.skewY)}for(Dt&&null!=S.force3D&&(O.force3D=S.force3D,p=!0),O.skewType=S.skewType||O.skewType||o.defaultSkewType,f=O.force3D||O.z||O.rotationX||O.rotationY||u.z||u.rotationX||u.rotationY||u.perspective,f||null==S.scale||(u.scaleZ=1);--P>-1;)T=kt[P],A=u[T]-O[T],(A>x||A<-x||null!=S[T]||null!=z[T])&&(p=!0,r=new yt(O,T,O[T],A,r),T in C&&(r.e=C[T]),r.xs0=0,r.plugin=a,n._overwriteProps.push(r.n));return A=S.transformOrigin,O.svg&&(A||S.svgOrigin)&&(_=O.xOffset,m=O.yOffset,Lt(t,ot(A),u,S.svgOrigin,S.smoothOrigin),r=Tt(O,"xOrigin",(w?O:u).xOrigin,u.xOrigin,r,k),r=Tt(O,"yOrigin",(w?O:u).yOrigin,u.yOrigin,r,k),_===O.xOffset&&m===O.yOffset||(r=Tt(O,"xOffset",w?_:O.xOffset,O.xOffset,r,k),r=Tt(O,"yOffset",w?m:O.yOffset,O.yOffset,r,k)),A=Ct?null:"0px 0px"),(A||Dt&&f&&O.zOrigin)&&(Ot?(p=!0,T=Rt,A=(A||J(t,T,s,!1,"50% 50%"))+"",r=new yt(b,T,0,0,r,(-1),k),r.b=b[T],r.plugin=a,Dt?(c=O.zOrigin,A=A.split(" "),O.zOrigin=(A.length>2&&(0===c||"0px"!==A[2])?parseFloat(A[2]):c)||0,r.xs0=r.e=A[0]+" "+(A[1]||"50%")+" 0px",r=new yt(O,"zOrigin",0,0,r,(-1),r.n),r.b=c,r.xs0=r.e=O.zOrigin):r.xs0=r.e=A):ot(A+"",O)),p&&(n._transformType=O.svg&&Ct||!f&&3!==this._transformType?2:3),h&&(l[i]=h),r},prefix:!0}),Pt("boxShadow",{defaultValue:"0px 0px 0px 0px #999",prefix:!0,color:!0,multi:!0,keyword:"inset"}),Pt("borderRadius",{defaultValue:"0px",parser:function(t,e,i,n,a,o){e=this.format(e);var l,h,u,c,f,p,d,_,m,g,v,y,T,w,b,x,P=["borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius"],S=t.style;for(m=parseFloat(t.offsetWidth),g=parseFloat(t.offsetHeight),l=e.split(" "),h=0;h<P.length;h++)this.p.indexOf("border")&&(P[h]=Z(P[h])),f=c=J(t,P[h],s,!1,"0px"),f.indexOf(" ")!==-1&&(c=f.split(" "),f=c[0],c=c[1]),p=u=l[h],d=parseFloat(f),y=f.substr((d+"").length),T="="===p.charAt(1),T?(_=parseInt(p.charAt(0)+"1",10),p=p.substr(2),_*=parseFloat(p),v=p.substr((_+"").length-(_<0?1:0))||""):(_=parseFloat(p),v=p.substr((_+"").length)),""===v&&(v=r[i]||y),v!==y&&(w=tt(t,"borderLeft",d,y),b=tt(t,"borderTop",d,y),"%"===v?(f=w/m*100+"%",c=b/g*100+"%"):"em"===v?(x=tt(t,"borderLeft",1,"em"),f=w/x+"em",c=b/x+"em"):(f=w+"px",c=b+"px"),T&&(p=parseFloat(f)+_+v,u=parseFloat(c)+_+v)),a=wt(S,P[h],f+" "+c,p+" "+u,!1,"0px",a);return a},prefix:!0,formatter:mt("0px 0px 0px 0px",!1,!0)}),Pt("borderBottomLeftRadius,borderBottomRightRadius,borderTopLeftRadius,borderTopRightRadius",{defaultValue:"0px",parser:function(t,e,i,n,r,a){return wt(t.style,i,this.format(J(t,i,s,!1,"0px 0px")),this.format(e),!1,"0px",r)},prefix:!0,formatter:mt("0px 0px",!1,!0)}),Pt("backgroundPosition",{defaultValue:"0 0",parser:function(t,e,i,n,r,a){var o,l,h,u,c,f,p="background-position",d=s||K(t,null),_=this.format((d?m?d.getPropertyValue(p+"-x")+" "+d.getPropertyValue(p+"-y"):d.getPropertyValue(p):t.currentStyle.backgroundPositionX+" "+t.currentStyle.backgroundPositionY)||"0 0"),g=this.format(e);if(_.indexOf("%")!==-1!=(g.indexOf("%")!==-1)&&g.split(",").length<2&&(f=J(t,"backgroundImage").replace(R,""),f&&"none"!==f)){for(o=_.split(" "),l=g.split(" "),Y.setAttribute("src",f),h=2;--h>-1;)_=o[h],u=_.indexOf("%")!==-1,u!==(l[h].indexOf("%")!==-1)&&(c=0===h?t.offsetWidth-Y.width:t.offsetHeight-Y.height,o[h]=u?parseFloat(_)/100*c+"px":parseFloat(_)/c*100+"%");_=o.join(" ")}return this.parseComplex(t.style,_,g,r,a)},formatter:ot}),Pt("backgroundSize",{defaultValue:"0 0",formatter:function(t){return t+="",ot(t.indexOf(" ")===-1?t+" "+t:t)}}),Pt("perspective",{defaultValue:"0px",prefix:!0}),Pt("perspectiveOrigin",{defaultValue:"50% 50%",prefix:!0}),Pt("transformStyle",{prefix:!0}),Pt("backfaceVisibility",{prefix:!0}),Pt("userSelect",{prefix:!0}),Pt("margin",{parser:gt("marginTop,marginRight,marginBottom,marginLeft")}),Pt("padding",{parser:gt("paddingTop,paddingRight,paddingBottom,paddingLeft")}),Pt("clip",{defaultValue:"rect(0px,0px,0px,0px)",parser:function(t,e,i,n,r,a){var o,l,h;return m<9?(l=t.currentStyle,h=m<8?" ":",",o="rect("+l.clipTop+h+l.clipRight+h+l.clipBottom+h+l.clipLeft+")",e=this.format(e).split(",").join(h)):(o=this.format(J(t,this.p,s,!1,this.dflt)),e=this.format(e)),this.parseComplex(t.style,o,e,r,a)}}),Pt("textShadow",{defaultValue:"0px 0px 0px #999",color:!0,multi:!0}),Pt("autoRound,strictUnits",{parser:function(t,e,i,n,r){return r}}),Pt("border",{defaultValue:"0px solid #000",parser:function(t,e,i,n,r,a){var o=J(t,"borderTopWidth",s,!1,"0px"),l=this.format(e).split(" "),h=l[0].replace(x,"");return"px"!==h&&(o=parseFloat(o)/tt(t,"borderTopWidth",1,h)+h),this.parseComplex(t.style,this.format(o+" "+J(t,"borderTopStyle",s,!1,"solid")+" "+J(t,"borderTopColor",s,!1,"#000")),l.join(" "),r,a)},color:!0,formatter:function(t){var e=t.split(" ");return e[0]+" "+(e[1]||"solid")+" "+(t.match(_t)||["#000"])[0]}}),Pt("borderWidth",{parser:gt("borderTopWidth,borderRightWidth,borderBottomWidth,borderLeftWidth")}),Pt("float,cssFloat,styleFloat",{parser:function(t,e,i,n,r,s){var a=t.style,o="cssFloat"in a?"cssFloat":"styleFloat";return new yt(a,o,0,0,r,(-1),i,(!1),0,a[o],e)}});var Wt=function(t){var e,i=this.t,n=i.filter||J(this.data,"filter")||"",r=this.s+this.c*t|0;100===r&&(n.indexOf("atrix(")===-1&&n.indexOf("radient(")===-1&&n.indexOf("oader(")===-1?(i.removeAttribute("filter"),e=!J(this.data,"filter")):(i.filter=n.replace(C,""),e=!0)),e||(this.xn1&&(i.filter=n=n||"alpha(opacity="+r+")"),n.indexOf("pacity")===-1?0===r&&this.xn1||(i.filter=n+" alpha(opacity="+r+")"):i.filter=n.replace(P,"opacity="+r))};Pt("opacity,alpha,autoAlpha",{defaultValue:"1",parser:function(t,e,i,n,r,a){var o=parseFloat(J(t,"opacity",s,!1,"1")),l=t.style,h="autoAlpha"===i;return"string"==typeof e&&"="===e.charAt(1)&&(e=("-"===e.charAt(0)?-1:1)*parseFloat(e.substr(2))+o),h&&1===o&&"hidden"===J(t,"visibility",s)&&0!==e&&(o=0),U?r=new yt(l,"opacity",o,e-o,r):(r=new yt(l,"opacity",100*o,100*(e-o),r),r.xn1=h?1:0,l.zoom=1,r.type=2,r.b="alpha(opacity="+r.s+")",r.e="alpha(opacity="+(r.s+r.c)+")",r.data=t,r.plugin=a,r.setRatio=Wt),h&&(r=new yt(l,"visibility",0,0,r,(-1),null,(!1),0,0!==o?"inherit":"hidden",0===e?"hidden":"inherit"),r.xs0="inherit",n._overwriteProps.push(r.n),n._overwriteProps.push(i)),r}});var Ut=function(t,e){e&&(t.removeProperty?("ms"!==e.substr(0,2)&&"webkit"!==e.substr(0,6)||(e="-"+e),t.removeProperty(e.replace(O,"-$1").toLowerCase())):t.removeAttribute(e))},Vt=function(t){if(this.t._gsClassPT=this,1===t||0===t){this.t.setAttribute("class",0===t?this.b:this.e);for(var e=this.data,i=this.t.style;e;)e.v?i[e.p]=e.v:Ut(i,e.p),e=e._next;1===t&&this.t._gsClassPT===this&&(this.t._gsClassPT=null)}else this.t.getAttribute("class")!==this.e&&this.t.setAttribute("class",this.e)};Pt("className",{parser:function(t,e,i,r,a,o,l){var h,u,c,f,p,d=t.getAttribute("class")||"",_=t.style.cssText;if(a=r._classNamePT=new yt(t,i,0,0,a,2),a.setRatio=Vt,a.pr=-11,n=!0,a.b=d,u=it(t,s),c=t._gsClassPT){for(f={},p=c.data;p;)f[p.p]=1,p=p._next;c.setRatio(1)}return t._gsClassPT=a,a.e="="!==e.charAt(1)?e:d.replace(new RegExp("(?:\\s|^)"+e.substr(2)+"(?![\\w-])"),"")+("+"===e.charAt(0)?" "+e.substr(2):""),t.setAttribute("class",a.e),h=nt(t,u,it(t),l,f),t.setAttribute("class",d),a.data=h.firstMPT,t.style.cssText=_,a=a.xfirst=r.parse(t,h.difs,a,o)}});var $t=function(t){if((1===t||0===t)&&this.data._totalTime===this.data._totalDuration&&"isFromStart"!==this.data.data){var e,i,n,r,s,a=this.t.style,o=h.transform.parse;if("all"===this.e)a.cssText="",r=!0;else for(e=this.e.split(" ").join("").split(","),n=e.length;--n>-1;)i=e[n],h[i]&&(h[i].parse===o?r=!0:i="transformOrigin"===i?Rt:h[i].p),Ut(a,i);r&&(Ut(a,Ot),s=this.t._gsTransform,s&&(s.svg&&(this.t.removeAttribute("data-svg-origin"),this.t.removeAttribute("transform")),delete this.t._gsTransform))}};for(Pt("clearProps",{parser:function(t,e,i,r,s){return s=new yt(t,i,0,0,s,2),s.setRatio=$t,s.e=e,s.pr=-10,s.data=r._tween,n=!0,s}}),u="bezier,throwProps,physicsProps,physics2D".split(","),bt=u.length;bt--;)St(u[bt]);u=o.prototype,u._firstPT=u._lastParsedTransform=u._transform=null,u._onInitTween=function(t,e,i,l){if(!t.nodeType)return!1;this._target=g=t,this._tween=i,this._vars=e,v=l,c=e.autoRound,n=!1,r=e.suffixMap||o.suffixMap,s=K(t,""),a=this._overwriteProps;var u,d,m,y,T,w,b,x,P,C=t.style;if(f&&""===C.zIndex&&(u=J(t,"zIndex",s),"auto"!==u&&""!==u||this._addLazySet(C,"zIndex",0)),"string"==typeof e&&(y=C.cssText,u=it(t,s),C.cssText=y+";"+e,u=nt(t,u,it(t)).difs,!U&&S.test(e)&&(u.opacity=parseFloat(RegExp.$1)),e=u,C.cssText=y),e.className?this._firstPT=d=h.className.parse(t,e.className,"className",this,null,null,e):this._firstPT=d=this.parse(t,e,null),this._transformType){for(P=3===this._transformType,Ot?p&&(f=!0,""===C.zIndex&&(b=J(t,"zIndex",s),"auto"!==b&&""!==b||this._addLazySet(C,"zIndex",0)),_&&this._addLazySet(C,"WebkitBackfaceVisibility",this._vars.WebkitBackfaceVisibility||(P?"visible":"hidden"))):C.zoom=1,m=d;m&&m._next;)m=m._next;x=new yt(t,"transform",0,0,null,2),this._linkCSSP(x,null,m),x.setRatio=Ot?Ht:Yt,x.data=this._transform||Xt(t,s,!0),x.tween=i,x.pr=-1,a.pop()}if(n){for(;d;){for(w=d._next,m=y;m&&m.pr>d.pr;)m=m._next;(d._prev=m?m._prev:T)?d._prev._next=d:y=d,(d._next=m)?m._prev=d:T=d,d=w}this._firstPT=y}return!0},u.parse=function(t,e,i,n){var a,o,l,u,f,p,d,_,m,y,T=t.style;for(a in e)p=e[a],"function"==typeof p&&(p=p(v,g)),o=h[a],o?i=o.parse(t,p,a,this,i,n,e):(f=J(t,a,s)+"",m="string"==typeof p,"color"===a||"fill"===a||"stroke"===a||a.indexOf("Color")!==-1||m&&k.test(p)?(m||(p=pt(p),p=(p.length>3?"rgba(":"rgb(")+p.join(",")+")"),i=wt(T,a,f,p,!0,"transparent",i,0,n)):m&&N.test(p)?i=wt(T,a,f,p,!0,null,i,0,n):(l=parseFloat(f),d=l||0===l?f.substr((l+"").length):"",""!==f&&"auto"!==f||("width"===a||"height"===a?(l=at(t,a,s),d="px"):"left"===a||"top"===a?(l=et(t,a,s),d="px"):(l="opacity"!==a?0:1,d="")),y=m&&"="===p.charAt(1),y?(u=parseInt(p.charAt(0)+"1",10),p=p.substr(2),u*=parseFloat(p),_=p.replace(x,"")):(u=parseFloat(p),_=m?p.replace(x,""):""),""===_&&(_=a in r?r[a]:d),p=u||0===u?(y?u+l:u)+_:e[a],d!==_&&""!==_&&(u||0===u)&&l&&(l=tt(t,a,l,d),"%"===_?(l/=tt(t,a,100,"%")/100,e.strictUnits!==!0&&(f=l+"%")):"em"===_||"rem"===_||"vw"===_||"vh"===_?l/=tt(t,a,1,_):"px"!==_&&(u=tt(t,a,u,_),_="px"),y&&(u||0===u)&&(p=u+l+_)),y&&(u+=l),!l&&0!==l||!u&&0!==u?void 0!==T[a]&&(p||p+""!="NaN"&&null!=p)?(i=new yt(T,a,u||l||0,0,i,(-1),a,(!1),0,f,p),i.xs0="none"!==p||"display"!==a&&a.indexOf("Style")===-1?p:f):$("invalid "+a+" tween value: "+e[a]):(i=new yt(T,a,l,u-l,i,0,a,c!==!1&&("px"===_||"zIndex"===a),0,f,p),i.xs0=_))),n&&i&&!i.plugin&&(i.plugin=n);return i},u.setRatio=function(t){var e,i,n,r=this._firstPT,s=1e-6;if(1!==t||this._tween._time!==this._tween._duration&&0!==this._tween._time)if(t||this._tween._time!==this._tween._duration&&0!==this._tween._time||this._tween._rawPrevTime===-1e-6)for(;r;){if(e=r.c*t+r.s,r.r?e=Math.round(e):e<s&&e>-s&&(e=0),r.type)if(1===r.type)if(n=r.l,2===n)r.t[r.p]=r.xs0+e+r.xs1+r.xn1+r.xs2;else if(3===n)r.t[r.p]=r.xs0+e+r.xs1+r.xn1+r.xs2+r.xn2+r.xs3;else if(4===n)r.t[r.p]=r.xs0+e+r.xs1+r.xn1+r.xs2+r.xn2+r.xs3+r.xn3+r.xs4;else if(5===n)r.t[r.p]=r.xs0+e+r.xs1+r.xn1+r.xs2+r.xn2+r.xs3+r.xn3+r.xs4+r.xn4+r.xs5;else{for(i=r.xs0+e+r.xs1,n=1;n<r.l;n++)i+=r["xn"+n]+r["xs"+(n+1)];r.t[r.p]=i}else r.type===-1?r.t[r.p]=r.xs0:r.setRatio&&r.setRatio(t);else r.t[r.p]=e+r.xs0;r=r._next}else for(;r;)2!==r.type?r.t[r.p]=r.b:r.setRatio(t),r=r._next;else for(;r;){if(2!==r.type)if(r.r&&r.type!==-1)if(e=Math.round(r.s+r.c),r.type){if(1===r.type){for(n=r.l,i=r.xs0+e+r.xs1,n=1;n<r.l;n++)i+=r["xn"+n]+r["xs"+(n+1)];r.t[r.p]=i}}else r.t[r.p]=e+r.xs0;else r.t[r.p]=r.e;else r.setRatio(t);r=r._next}},u._enableTransforms=function(t){this._transform=this._transform||Xt(this._target,s,!0),this._transformType=this._transform.svg&&Ct||!t&&3!==this._transformType?2:3};var Gt=function(t){this.t[this.p]=this.e,this.data._linkCSSP(this,this._next,null,!0)};u._addLazySet=function(t,e,i){var n=this._firstPT=new yt(t,e,0,0,this._firstPT,2);n.e=i,n.setRatio=Gt,n.data=this},u._linkCSSP=function(t,e,i,n){return t&&(e&&(e._prev=t),t._next&&(t._next._prev=t._prev),t._prev?t._prev._next=t._next:this._firstPT===t&&(this._firstPT=t._next,n=!0),i?i._next=t:n||null!==this._firstPT||(this._firstPT=t),t._next=e,t._prev=i),t},u._mod=function(t){for(var e=this._firstPT;e;)"function"==typeof t[e.p]&&t[e.p]===Math.round&&(e.r=1),e=e._next},u._kill=function(e){var i,n,r,s=e;if(e.autoAlpha||e.alpha){s={};for(n in e)s[n]=e[n];s.opacity=1,s.autoAlpha&&(s.visibility=1)}for(e.className&&(i=this._classNamePT)&&(r=i.xfirst,r&&r._prev?this._linkCSSP(r._prev,i._next,r._prev._prev):r===this._firstPT&&(this._firstPT=i._next),i._next&&this._linkCSSP(i._next,i._next._next,r._prev),this._classNamePT=null),i=this._firstPT;i;)i.plugin&&i.plugin!==n&&i.plugin._kill&&(i.plugin._kill(e),n=i.plugin),i=i._next;return t.prototype._kill.call(this,s)};var Qt=function(t,e,i){var n,r,s,a;if(t.slice)for(r=t.length;--r>-1;)Qt(t[r],e,i);else for(n=t.childNodes,r=n.length;--r>-1;)s=n[r],a=s.type,s.style&&(e.push(it(s)),i&&i.push(s)),1!==a&&9!==a&&11!==a||!s.childNodes.length||Qt(s,e,i)};return o.cascadeTo=function(t,i,n){var r,s,a,o,l=e.to(t,i,n),h=[l],u=[],c=[],f=[],p=e._internals.reservedProps;for(t=l._targets||l.target,Qt(t,u,f),l.render(i,!0,!0),Qt(t,c),l.render(0,!0,!0),l._enabled(!0),r=f.length;--r>-1;)if(s=nt(f[r],u[r],c[r]),s.firstMPT){s=s.difs;for(a in n)p[a]&&(s[a]=n[a]);o={};for(a in s)o[a]=u[r][a];h.push(e.fromTo(f[r],i,o,s))}return h},t.activate([o]),o},!0),function(){var t=i._gsDefine.plugin({propName:"roundProps",version:"1.6.0",priority:-1,API:2,init:function(t,e,i){return this._tween=i,!0}}),e=function(t){for(;t;)t.f||t.blob||(t.m=Math.round),t=t._next},n=t.prototype;n._onInitAllProps=function(){for(var t,i,n,r=this._tween,s=r.vars.roundProps.join?r.vars.roundProps:r.vars.roundProps.split(","),a=s.length,o={},l=r._propLookup.roundProps;--a>-1;)o[s[a]]=Math.round;for(a=s.length;--a>-1;)for(t=s[a],i=r._firstPT;i;)n=i._next,i.pg?i.t._mod(o):i.n===t&&(2===i.f&&i.t?e(i.t._firstPT):(this._add(i.t,t,i.s,i.c),n&&(n._prev=i._prev),i._prev?i._prev._next=n:r._firstPT===i&&(r._firstPT=n),i._next=i._prev=null,r._propLookup[t]=l)),i=n;return!1},n._add=function(t,e,i,n){this._addTween(t,e,i,i+n,e,Math.round),this._overwriteProps.push(e)}}(),function(){i._gsDefine.plugin({propName:"attr",API:2,version:"0.6.0",init:function(t,e,i,n){var r,s;if("function"!=typeof t.setAttribute)return!1;for(r in e)s=e[r],"function"==typeof s&&(s=s(n,t)),this._addTween(t,"setAttribute",t.getAttribute(r)+"",s+"",r,!1,r),this._overwriteProps.push(r);return!0}})}(),i._gsDefine.plugin({propName:"directionalRotation",version:"0.3.0",API:2,init:function(t,e,i,n){"object"!=typeof e&&(e={rotation:e}),this.finals={};var r,s,a,o,l,h,u=e.useRadians===!0?2*Math.PI:360,c=1e-6;for(r in e)"useRadians"!==r&&(o=e[r],"function"==typeof o&&(o=o(n,t)),h=(o+"").split("_"),s=h[0],a=parseFloat("function"!=typeof t[r]?t[r]:t[r.indexOf("set")||"function"!=typeof t["get"+r.substr(3)]?r:"get"+r.substr(3)]()),o=this.finals[r]="string"==typeof s&&"="===s.charAt(1)?a+parseInt(s.charAt(0)+"1",10)*Number(s.substr(2)):Number(s)||0,l=o-a,h.length&&(s=h.join("_"),s.indexOf("short")!==-1&&(l%=u,l!==l%(u/2)&&(l=l<0?l+u:l-u)),s.indexOf("_cw")!==-1&&l<0?l=(l+9999999999*u)%u-(l/u|0)*u:s.indexOf("ccw")!==-1&&l>0&&(l=(l-9999999999*u)%u-(l/u|0)*u)),(l>c||l<-c)&&(this._addTween(t,r,a,a+l,r),this._overwriteProps.push(r)));return!0},set:function(t){var e;if(1!==t)this._super.setRatio.call(this,t);else for(e=this._firstPT;e;)e.f?e.t[e.p](this.finals[e.p]):e.t[e.p]=this.finals[e.p],e=e._next}})._autoCSS=!0,i._gsDefine("easing.Back",["easing.Ease"],function(t){var e,n,r,s=i.GreenSockGlobals||i,a=s.com.greensock,o=2*Math.PI,l=Math.PI/2,h=a._class,u=function(e,i){var n=h("easing."+e,function(){},!0),r=n.prototype=new t;return r.constructor=n,r.getRatio=i,n},c=t.register||function(){},f=function(t,e,i,n,r){var s=h("easing."+t,{easeOut:new e,easeIn:new i,easeInOut:new n},!0);return c(s,t),s},p=function(t,e,i){this.t=t,this.v=e,i&&(this.next=i,i.prev=this,this.c=i.v-e,this.gap=i.t-t)},d=function(e,i){var n=h("easing."+e,function(t){this._p1=t||0===t?t:1.70158,this._p2=1.525*this._p1},!0),r=n.prototype=new t;return r.constructor=n,r.getRatio=i,r.config=function(t){return new n(t)},n},_=f("Back",d("BackOut",function(t){return(t-=1)*t*((this._p1+1)*t+this._p1)+1}),d("BackIn",function(t){return t*t*((this._p1+1)*t-this._p1)}),d("BackInOut",function(t){return(t*=2)<1?.5*t*t*((this._p2+1)*t-this._p2):.5*((t-=2)*t*((this._p2+1)*t+this._p2)+2)})),m=h("easing.SlowMo",function(t,e,i){e=e||0===e?e:.7,null==t?t=.7:t>1&&(t=1),this._p=1!==t?e:0,this._p1=(1-t)/2,this._p2=t,this._p3=this._p1+this._p2,this._calcEnd=i===!0},!0),g=m.prototype=new t;return g.constructor=m,g.getRatio=function(t){var e=t+(.5-t)*this._p;return t<this._p1?this._calcEnd?1-(t=1-t/this._p1)*t:e-(t=1-t/this._p1)*t*t*t*e:t>this._p3?this._calcEnd?1-(t=(t-this._p3)/this._p1)*t:e+(t-e)*(t=(t-this._p3)/this._p1)*t*t*t:this._calcEnd?1:e},m.ease=new m(.7,.7),g.config=m.config=function(t,e,i){return new m(t,e,i)},e=h("easing.SteppedEase",function(t){t=t||1,this._p1=1/t,this._p2=t+1},!0),g=e.prototype=new t,g.constructor=e,g.getRatio=function(t){return t<0?t=0:t>=1&&(t=.999999999),(this._p2*t>>0)*this._p1},g.config=e.config=function(t){return new e(t)},n=h("easing.RoughEase",function(e){e=e||{};for(var i,n,r,s,a,o,l=e.taper||"none",h=[],u=0,c=0|(e.points||20),f=c,d=e.randomize!==!1,_=e.clamp===!0,m=e.template instanceof t?e.template:null,g="number"==typeof e.strength?.4*e.strength:.4;--f>-1;)i=d?Math.random():1/c*f,n=m?m.getRatio(i):i,"none"===l?r=g:"out"===l?(s=1-i,r=s*s*g):"in"===l?r=i*i*g:i<.5?(s=2*i,r=s*s*.5*g):(s=2*(1-i),r=s*s*.5*g),d?n+=Math.random()*r-.5*r:f%2?n+=.5*r:n-=.5*r,_&&(n>1?n=1:n<0&&(n=0)),h[u++]={x:i,y:n};for(h.sort(function(t,e){return t.x-e.x}),o=new p(1,1,null),f=c;--f>-1;)a=h[f],o=new p(a.x,a.y,o);this._prev=new p(0,0,0!==o.t?o:o.next)},!0),g=n.prototype=new t,g.constructor=n,g.getRatio=function(t){var e=this._prev;if(t>e.t){for(;e.next&&t>=e.t;)e=e.next;e=e.prev}else for(;e.prev&&t<=e.t;)e=e.prev;return this._prev=e,e.v+(t-e.t)/e.gap*e.c},g.config=function(t){return new n(t)},n.ease=new n,f("Bounce",u("BounceOut",function(t){return t<1/2.75?7.5625*t*t:t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375}),u("BounceIn",function(t){return(t=1-t)<1/2.75?1-7.5625*t*t:t<2/2.75?1-(7.5625*(t-=1.5/2.75)*t+.75):t<2.5/2.75?1-(7.5625*(t-=2.25/2.75)*t+.9375):1-(7.5625*(t-=2.625/2.75)*t+.984375)}),u("BounceInOut",function(t){var e=t<.5;return t=e?1-2*t:2*t-1,t=t<1/2.75?7.5625*t*t:t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375,e?.5*(1-t):.5*t+.5})),f("Circ",u("CircOut",function(t){return Math.sqrt(1-(t-=1)*t)}),u("CircIn",function(t){return-(Math.sqrt(1-t*t)-1)}),u("CircInOut",function(t){return(t*=2)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1)})),r=function(e,i,n){var r=h("easing."+e,function(t,e){this._p1=t>=1?t:1,this._p2=(e||n)/(t<1?t:1),this._p3=this._p2/o*(Math.asin(1/this._p1)||0),this._p2=o/this._p2},!0),s=r.prototype=new t;return s.constructor=r,s.getRatio=i,s.config=function(t,e){return new r(t,e)},r},f("Elastic",r("ElasticOut",function(t){return this._p1*Math.pow(2,-10*t)*Math.sin((t-this._p3)*this._p2)+1},.3),r("ElasticIn",function(t){return-(this._p1*Math.pow(2,10*(t-=1))*Math.sin((t-this._p3)*this._p2))},.3),r("ElasticInOut",function(t){return(t*=2)<1?-.5*(this._p1*Math.pow(2,10*(t-=1))*Math.sin((t-this._p3)*this._p2)):this._p1*Math.pow(2,-10*(t-=1))*Math.sin((t-this._p3)*this._p2)*.5+1},.45)),f("Expo",u("ExpoOut",function(t){return 1-Math.pow(2,-10*t)}),u("ExpoIn",function(t){return Math.pow(2,10*(t-1))-.001}),u("ExpoInOut",function(t){return(t*=2)<1?.5*Math.pow(2,10*(t-1)):.5*(2-Math.pow(2,-10*(t-1)))})),f("Sine",u("SineOut",function(t){return Math.sin(t*l)}),u("SineIn",function(t){return-Math.cos(t*l)+1}),u("SineInOut",function(t){return-.5*(Math.cos(Math.PI*t)-1)})),h("easing.EaseLookup",{find:function(e){return t.map[e]}},!0),c(s.SlowMo,"SlowMo","ease,"),c(n,"RoughEase","ease,"),c(e,"SteppedEase","ease,"),_},!0)}),i._gsDefine&&i._gsQueue.pop()(),function(t,i){"use strict";var n={},r=t.GreenSockGlobals=t.GreenSockGlobals||t;if(!r.TweenLite){var s,a,o,l,h,u=function(t){var e,i=t.split("."),n=r;for(e=0;e<i.length;e++)n[i[e]]=n=n[i[e]]||{};return n},c=u("com.greensock"),f=1e-10,p=function(t){var e,i=[],n=t.length;for(e=0;e!==n;i.push(t[e++]));return i},d=function(){},_=function(){var t=Object.prototype.toString,e=t.call([]);return function(i){return null!=i&&(i instanceof Array||"object"==typeof i&&!!i.push&&t.call(i)===e)}}(),m={},g=function(s,a,o,l){this.sc=m[s]?m[s].sc:[],m[s]=this,this.gsClass=null,this.func=o;var h=[];this.check=function(c){for(var f,p,d,_,v,y=a.length,T=y;--y>-1;)(f=m[a[y]]||new g(a[y],[])).gsClass?(h[y]=f.gsClass,T--):c&&f.sc.push(this);if(0===T&&o){if(p=("com.greensock."+s).split("."),d=p.pop(),_=u(p.join("."))[d]=this.gsClass=o.apply(o,h),l)if(r[d]=n[d]=_,v="undefined"!=typeof e&&e.exports,!v&&"function"==typeof define&&define.amd)define((t.GreenSockAMDPath?t.GreenSockAMDPath+"/":"")+s.split(".").pop(),[],function(){return _});else if(v)if(s===i){e.exports=n[i]=_;for(y in n)_[y]=n[y]}else n[i]&&(n[i][d]=_);for(y=0;y<this.sc.length;y++)this.sc[y].check()}},this.check(!0)},v=t._gsDefine=function(t,e,i,n){return new g(t,e,i,n)},y=c._class=function(t,e,i){return e=e||function(){},v(t,[],function(){return e},i),e};v.globals=r;var T=[0,0,1,1],w=y("easing.Ease",function(t,e,i,n){this._func=t,this._type=i||0,this._power=n||0,this._params=e?T.concat(e):T},!0),b=w.map={},x=w.register=function(t,e,i,n){for(var r,s,a,o,l=e.split(","),h=l.length,u=(i||"easeIn,easeOut,easeInOut").split(",");--h>-1;)for(s=l[h],r=n?y("easing."+s,null,!0):c.easing[s]||{},a=u.length;--a>-1;)o=u[a],b[s+"."+o]=b[o+s]=r[o]=t.getRatio?t:t[o]||new t};for(o=w.prototype,o._calcEnd=!1,o.getRatio=function(t){if(this._func)return this._params[0]=t,this._func.apply(null,this._params);var e=this._type,i=this._power,n=1===e?1-t:2===e?t:t<.5?2*t:2*(1-t);return 1===i?n*=n:2===i?n*=n*n:3===i?n*=n*n*n:4===i&&(n*=n*n*n*n),1===e?1-n:2===e?n:t<.5?n/2:1-n/2},s=["Linear","Quad","Cubic","Quart","Quint,Strong"],a=s.length;--a>-1;)o=s[a]+",Power"+a,x(new w(null,null,1,a),o,"easeOut",!0),x(new w(null,null,2,a),o,"easeIn"+(0===a?",easeNone":"")),x(new w(null,null,3,a),o,"easeInOut");b.linear=c.easing.Linear.easeIn,b.swing=c.easing.Quad.easeInOut;var P=y("events.EventDispatcher",function(t){this._listeners={},this._eventTarget=t||this});o=P.prototype,o.addEventListener=function(t,e,i,n,r){r=r||0;var s,a,o=this._listeners[t],u=0;for(this!==l||h||l.wake(),null==o&&(this._listeners[t]=o=[]),a=o.length;--a>-1;)s=o[a],s.c===e&&s.s===i?o.splice(a,1):0===u&&s.pr<r&&(u=a+1);o.splice(u,0,{c:e,s:i,up:n,pr:r})},o.removeEventListener=function(t,e){var i,n=this._listeners[t];if(n)for(i=n.length;--i>-1;)if(n[i].c===e)return void n.splice(i,1)},o.dispatchEvent=function(t){var e,i,n,r=this._listeners[t];if(r)for(e=r.length,e>1&&(r=r.slice(0)),i=this._eventTarget;--e>-1;)n=r[e],n&&(n.up?n.c.call(n.s||i,{type:t,target:i}):n.c.call(n.s||i))};var S=t.requestAnimationFrame,C=t.cancelAnimationFrame,k=Date.now||function(){return(new Date).getTime()},O=k();for(s=["ms","moz","webkit","o"],a=s.length;--a>-1&&!S;)S=t[s[a]+"RequestAnimationFrame"],C=t[s[a]+"CancelAnimationFrame"]||t[s[a]+"CancelRequestAnimationFrame"];y("Ticker",function(t,e){var i,n,r,s,a,o=this,u=k(),c=!(e===!1||!S)&&"auto",p=500,_=33,m="tick",g=function(t){var e,l,h=k()-O;h>p&&(u+=h-_),O+=h,o.time=(O-u)/1e3,e=o.time-a,(!i||e>0||t===!0)&&(o.frame++,a+=e+(e>=s?.004:s-e),l=!0),t!==!0&&(r=n(g)),l&&o.dispatchEvent(m)};P.call(o),o.time=o.frame=0,o.tick=function(){g(!0)},o.lagSmoothing=function(t,e){p=t||1/f,_=Math.min(e,p,0)},o.sleep=function(){null!=r&&(c&&C?C(r):clearTimeout(r),n=d,r=null,o===l&&(h=!1))},o.wake=function(t){null!==r?o.sleep():t?u+=-O+(O=k()):o.frame>10&&(O=k()-p+5),n=0===i?d:c&&S?S:function(t){return setTimeout(t,1e3*(a-o.time)+1|0)},o===l&&(h=!0),g(2)},o.fps=function(t){return arguments.length?(i=t,s=1/(i||60),a=this.time+s,void o.wake()):i},o.useRAF=function(t){return arguments.length?(o.sleep(),c=t,void o.fps(i)):c},o.fps(t),setTimeout(function(){"auto"===c&&o.frame<5&&"hidden"!==document.visibilityState&&o.useRAF(!1)},1500)}),o=c.Ticker.prototype=new c.events.EventDispatcher,o.constructor=c.Ticker;var A=y("core.Animation",function(t,e){if(this.vars=e=e||{},this._duration=this._totalDuration=t||0,this._delay=Number(e.delay)||0,this._timeScale=1,this._active=e.immediateRender===!0,this.data=e.data,this._reversed=e.reversed===!0,$){h||l.wake();var i=this.vars.useFrames?V:$;i.add(this,i._time),this.vars.paused&&this.paused(!0)}});l=A.ticker=new c.Ticker,o=A.prototype,o._dirty=o._gc=o._initted=o._paused=!1,o._totalTime=o._time=0,o._rawPrevTime=-1,o._next=o._last=o._onUpdate=o._timeline=o.timeline=null,o._paused=!1;var R=function(){h&&k()-O>2e3&&l.wake(),setTimeout(R,2e3)};R(),o.play=function(t,e){return null!=t&&this.seek(t,e),this.reversed(!1).paused(!1)},o.pause=function(t,e){return null!=t&&this.seek(t,e),this.paused(!0)},o.resume=function(t,e){return null!=t&&this.seek(t,e),this.paused(!1)},o.seek=function(t,e){return this.totalTime(Number(t),e!==!1)},o.restart=function(t,e){return this.reversed(!1).paused(!1).totalTime(t?-this._delay:0,e!==!1,!0)},o.reverse=function(t,e){return null!=t&&this.seek(t||this.totalDuration(),e),this.reversed(!0).paused(!1)},o.render=function(t,e,i){},o.invalidate=function(){return this._time=this._totalTime=0,this._initted=this._gc=!1,this._rawPrevTime=-1,!this._gc&&this.timeline||this._enabled(!0),this},o.isActive=function(){var t,e=this._timeline,i=this._startTime;return!e||!this._gc&&!this._paused&&e.isActive()&&(t=e.rawTime())>=i&&t<i+this.totalDuration()/this._timeScale},o._enabled=function(t,e){return h||l.wake(),this._gc=!t,this._active=this.isActive(),e!==!0&&(t&&!this.timeline?this._timeline.add(this,this._startTime-this._delay):!t&&this.timeline&&this._timeline._remove(this,!0)),!1},o._kill=function(t,e){return this._enabled(!1,!1)},o.kill=function(t,e){return this._kill(t,e),this},o._uncache=function(t){for(var e=t?this:this.timeline;e;)e._dirty=!0,e=e.timeline;return this},o._swapSelfInParams=function(t){for(var e=t.length,i=t.concat();--e>-1;)"{self}"===t[e]&&(i[e]=this);return i},o._callback=function(t){var e=this.vars,i=e[t],n=e[t+"Params"],r=e[t+"Scope"]||e.callbackScope||this,s=n?n.length:0;switch(s){case 0:i.call(r);break;case 1:i.call(r,n[0]);break;case 2:i.call(r,n[0],n[1]);break;default:i.apply(r,n)}},o.eventCallback=function(t,e,i,n){if("on"===(t||"").substr(0,2)){var r=this.vars;if(1===arguments.length)return r[t];null==e?delete r[t]:(r[t]=e,r[t+"Params"]=_(i)&&i.join("").indexOf("{self}")!==-1?this._swapSelfInParams(i):i,r[t+"Scope"]=n),"onUpdate"===t&&(this._onUpdate=e)}return this},o.delay=function(t){return arguments.length?(this._timeline.smoothChildTiming&&this.startTime(this._startTime+t-this._delay),this._delay=t,this):this._delay},o.duration=function(t){return arguments.length?(this._duration=this._totalDuration=t,this._uncache(!0),this._timeline.smoothChildTiming&&this._time>0&&this._time<this._duration&&0!==t&&this.totalTime(this._totalTime*(t/this._duration),!0),this):(this._dirty=!1,this._duration)},o.totalDuration=function(t){return this._dirty=!1,arguments.length?this.duration(t):this._totalDuration},o.time=function(t,e){return arguments.length?(this._dirty&&this.totalDuration(),this.totalTime(t>this._duration?this._duration:t,e)):this._time},o.totalTime=function(t,e,i){if(h||l.wake(),!arguments.length)return this._totalTime;if(this._timeline){if(t<0&&!i&&(t+=this.totalDuration()),this._timeline.smoothChildTiming){this._dirty&&this.totalDuration();var n=this._totalDuration,r=this._timeline;if(t>n&&!i&&(t=n),this._startTime=(this._paused?this._pauseTime:r._time)-(this._reversed?n-t:t)/this._timeScale,r._dirty||this._uncache(!1),r._timeline)for(;r._timeline;)r._timeline._time!==(r._startTime+r._totalTime)/r._timeScale&&r.totalTime(r._totalTime,!0),r=r._timeline}this._gc&&this._enabled(!0,!1),this._totalTime===t&&0!==this._duration||(F.length&&Q(),this.render(t,e,!1),F.length&&Q())}return this},o.progress=o.totalProgress=function(t,e){var i=this.duration();return arguments.length?this.totalTime(i*t,e):i?this._time/i:this.ratio},o.startTime=function(t){return arguments.length?(t!==this._startTime&&(this._startTime=t,this.timeline&&this.timeline._sortChildren&&this.timeline.add(this,t-this._delay)),this):this._startTime},o.endTime=function(t){return this._startTime+(0!=t?this.totalDuration():this.duration())/this._timeScale},o.timeScale=function(t){if(!arguments.length)return this._timeScale;if(t=t||f,this._timeline&&this._timeline.smoothChildTiming){var e=this._pauseTime,i=e||0===e?e:this._timeline.totalTime();this._startTime=i-(i-this._startTime)*this._timeScale/t}return this._timeScale=t,this._uncache(!1)},o.reversed=function(t){return arguments.length?(t!=this._reversed&&(this._reversed=t,this.totalTime(this._timeline&&!this._timeline.smoothChildTiming?this.totalDuration()-this._totalTime:this._totalTime,!0)),this):this._reversed},o.paused=function(t){if(!arguments.length)return this._paused;var e,i,n=this._timeline;return t!=this._paused&&n&&(h||t||l.wake(),e=n.rawTime(),i=e-this._pauseTime,!t&&n.smoothChildTiming&&(this._startTime+=i,this._uncache(!1)),this._pauseTime=t?e:null,this._paused=t,this._active=this.isActive(),!t&&0!==i&&this._initted&&this.duration()&&(e=n.smoothChildTiming?this._totalTime:(e-this._startTime)/this._timeScale,this.render(e,e===this._totalTime,!0))),this._gc&&!t&&this._enabled(!0,!1),this};var D=y("core.SimpleTimeline",function(t){A.call(this,0,t),this.autoRemoveChildren=this.smoothChildTiming=!0});o=D.prototype=new A,o.constructor=D,o.kill()._gc=!1,o._first=o._last=o._recent=null,o._sortChildren=!1,o.add=o.insert=function(t,e,i,n){var r,s;if(t._startTime=Number(e||0)+t._delay,t._paused&&this!==t._timeline&&(t._pauseTime=t._startTime+(this.rawTime()-t._startTime)/t._timeScale),t.timeline&&t.timeline._remove(t,!0),t.timeline=t._timeline=this,t._gc&&t._enabled(!0,!0),r=this._last,this._sortChildren)for(s=t._startTime;r&&r._startTime>s;)r=r._prev;return r?(t._next=r._next,r._next=t):(t._next=this._first,this._first=t),t._next?t._next._prev=t:this._last=t,t._prev=r,this._recent=t,this._timeline&&this._uncache(!0),this},o._remove=function(t,e){return t.timeline===this&&(e||t._enabled(!1,!0),t._prev?t._prev._next=t._next:this._first===t&&(this._first=t._next),t._next?t._next._prev=t._prev:this._last===t&&(this._last=t._prev),t._next=t._prev=t.timeline=null,t===this._recent&&(this._recent=this._last),this._timeline&&this._uncache(!0)),this},o.render=function(t,e,i){var n,r=this._first;for(this._totalTime=this._time=this._rawPrevTime=t;r;)n=r._next,(r._active||t>=r._startTime&&!r._paused)&&(r._reversed?r.render((r._dirty?r.totalDuration():r._totalDuration)-(t-r._startTime)*r._timeScale,e,i):r.render((t-r._startTime)*r._timeScale,e,i)),r=n},o.rawTime=function(){return h||l.wake(),this._totalTime};var M=y("TweenLite",function(e,i,n){if(A.call(this,i,n),this.render=M.prototype.render,null==e)throw"Cannot tween a null target.";this.target=e="string"!=typeof e?e:M.selector(e)||e;var r,s,a,o=e.jquery||e.length&&e!==t&&e[0]&&(e[0]===t||e[0].nodeType&&e[0].style&&!e.nodeType),l=this.vars.overwrite;if(this._overwrite=l=null==l?U[M.defaultOverwrite]:"number"==typeof l?l>>0:U[l],(o||e instanceof Array||e.push&&_(e))&&"number"!=typeof e[0])for(this._targets=a=p(e),this._propLookup=[],this._siblings=[],r=0;r<a.length;r++)s=a[r],s?"string"!=typeof s?s.length&&s!==t&&s[0]&&(s[0]===t||s[0].nodeType&&s[0].style&&!s.nodeType)?(a.splice(r--,1),this._targets=a=a.concat(p(s))):(this._siblings[r]=Z(s,this,!1),1===l&&this._siblings[r].length>1&&J(s,this,null,1,this._siblings[r])):(s=a[r--]=M.selector(s),"string"==typeof s&&a.splice(r+1,1)):a.splice(r--,1);else this._propLookup={},this._siblings=Z(e,this,!1),
1===l&&this._siblings.length>1&&J(e,this,null,1,this._siblings);(this.vars.immediateRender||0===i&&0===this._delay&&this.vars.immediateRender!==!1)&&(this._time=-f,this.render(Math.min(0,-this._delay)))},!0),j=function(e){return e&&e.length&&e!==t&&e[0]&&(e[0]===t||e[0].nodeType&&e[0].style&&!e.nodeType)},E=function(t,e){var i,n={};for(i in t)W[i]||i in e&&"transform"!==i&&"x"!==i&&"y"!==i&&"width"!==i&&"height"!==i&&"className"!==i&&"border"!==i||!(!X[i]||X[i]&&X[i]._autoCSS)||(n[i]=t[i],delete t[i]);t.css=n};o=M.prototype=new A,o.constructor=M,o.kill()._gc=!1,o.ratio=0,o._firstPT=o._targets=o._overwrittenProps=o._startAt=null,o._notifyPluginsOfEnabled=o._lazy=!1,M.version="1.19.0",M.defaultEase=o._ease=new w(null,null,1,1),M.defaultOverwrite="auto",M.ticker=l,M.autoSleep=120,M.lagSmoothing=function(t,e){l.lagSmoothing(t,e)},M.selector=t.$||t.jQuery||function(e){var i=t.$||t.jQuery;return i?(M.selector=i,i(e)):"undefined"==typeof document?e:document.querySelectorAll?document.querySelectorAll(e):document.getElementById("#"===e.charAt(0)?e.substr(1):e)};var F=[],N={},L=/(?:(-|-=|\+=)?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/gi,I=function(t){for(var e,i=this._firstPT,n=1e-6;i;)e=i.blob?t?this.join(""):this.start:i.c*t+i.s,i.m?e=i.m(e,this._target||i.t):e<n&&e>-n&&(e=0),i.f?i.fp?i.t[i.p](i.fp,e):i.t[i.p](e):i.t[i.p]=e,i=i._next},z=function(t,e,i,n){var r,s,a,o,l,h,u,c=[t,e],f=0,p="",d=0;for(c.start=t,i&&(i(c),t=c[0],e=c[1]),c.length=0,r=t.match(L)||[],s=e.match(L)||[],n&&(n._next=null,n.blob=1,c._firstPT=c._applyPT=n),l=s.length,o=0;o<l;o++)u=s[o],h=e.substr(f,e.indexOf(u,f)-f),p+=h||!o?h:",",f+=h.length,d?d=(d+1)%5:"rgba("===h.substr(-5)&&(d=1),u===r[o]||r.length<=o?p+=u:(p&&(c.push(p),p=""),a=parseFloat(r[o]),c.push(a),c._firstPT={_next:c._firstPT,t:c,p:c.length-1,s:a,c:("="===u.charAt(1)?parseInt(u.charAt(0)+"1",10)*parseFloat(u.substr(2)):parseFloat(u)-a)||0,f:0,m:d&&d<4?Math.round:0}),f+=u.length;return p+=e.substr(f),p&&c.push(p),c.setRatio=I,c},q=function(t,e,i,n,r,s,a,o,l){"function"==typeof n&&(n=n(l||0,t));var h,u,c="get"===i?t[e]:i,f=typeof t[e],p="string"==typeof n&&"="===n.charAt(1),d={t:t,p:e,s:c,f:"function"===f,pg:0,n:r||e,m:s?"function"==typeof s?s:Math.round:0,pr:0,c:p?parseInt(n.charAt(0)+"1",10)*parseFloat(n.substr(2)):parseFloat(n)-c||0};if("number"!==f&&("function"===f&&"get"===i&&(u=e.indexOf("set")||"function"!=typeof t["get"+e.substr(3)]?e:"get"+e.substr(3),d.s=c=a?t[u](a):t[u]()),"string"==typeof c&&(a||isNaN(c))?(d.fp=a,h=z(c,n,o||M.defaultStringFilter,d),d={t:h,p:"setRatio",s:0,c:1,f:2,pg:0,n:r||e,pr:0,m:0}):p||(d.s=parseFloat(c),d.c=parseFloat(n)-d.s||0)),d.c)return(d._next=this._firstPT)&&(d._next._prev=d),this._firstPT=d,d},B=M._internals={isArray:_,isSelector:j,lazyTweens:F,blobDif:z},X=M._plugins={},Y=B.tweenLookup={},H=0,W=B.reservedProps={ease:1,delay:1,overwrite:1,onComplete:1,onCompleteParams:1,onCompleteScope:1,useFrames:1,runBackwards:1,startAt:1,onUpdate:1,onUpdateParams:1,onUpdateScope:1,onStart:1,onStartParams:1,onStartScope:1,onReverseComplete:1,onReverseCompleteParams:1,onReverseCompleteScope:1,onRepeat:1,onRepeatParams:1,onRepeatScope:1,easeParams:1,yoyo:1,immediateRender:1,repeat:1,repeatDelay:1,data:1,paused:1,reversed:1,autoCSS:1,lazy:1,onOverwrite:1,callbackScope:1,stringFilter:1,id:1},U={none:0,all:1,auto:2,concurrent:3,allOnStart:4,preexisting:5,true:1,false:0},V=A._rootFramesTimeline=new D,$=A._rootTimeline=new D,G=30,Q=B.lazyRender=function(){var t,e=F.length;for(N={};--e>-1;)t=F[e],t&&t._lazy!==!1&&(t.render(t._lazy[0],t._lazy[1],!0),t._lazy=!1);F.length=0};$._startTime=l.time,V._startTime=l.frame,$._active=V._active=!0,setTimeout(Q,1),A._updateRoot=M.render=function(){var t,e,i;if(F.length&&Q(),$.render((l.time-$._startTime)*$._timeScale,!1,!1),V.render((l.frame-V._startTime)*V._timeScale,!1,!1),F.length&&Q(),l.frame>=G){G=l.frame+(parseInt(M.autoSleep,10)||120);for(i in Y){for(e=Y[i].tweens,t=e.length;--t>-1;)e[t]._gc&&e.splice(t,1);0===e.length&&delete Y[i]}if(i=$._first,(!i||i._paused)&&M.autoSleep&&!V._first&&1===l._listeners.tick.length){for(;i&&i._paused;)i=i._next;i||l.sleep()}}},l.addEventListener("tick",A._updateRoot);var Z=function(t,e,i){var n,r,s=t._gsTweenID;if(Y[s||(t._gsTweenID=s="t"+H++)]||(Y[s]={target:t,tweens:[]}),e&&(n=Y[s].tweens,n[r=n.length]=e,i))for(;--r>-1;)n[r]===e&&n.splice(r,1);return Y[s].tweens},K=function(t,e,i,n){var r,s,a=t.vars.onOverwrite;return a&&(r=a(t,e,i,n)),a=M.onOverwrite,a&&(s=a(t,e,i,n)),r!==!1&&s!==!1},J=function(t,e,i,n,r){var s,a,o,l;if(1===n||n>=4){for(l=r.length,s=0;s<l;s++)if((o=r[s])!==e)o._gc||o._kill(null,t,e)&&(a=!0);else if(5===n)break;return a}var h,u=e._startTime+f,c=[],p=0,d=0===e._duration;for(s=r.length;--s>-1;)(o=r[s])===e||o._gc||o._paused||(o._timeline!==e._timeline?(h=h||tt(e,0,d),0===tt(o,h,d)&&(c[p++]=o)):o._startTime<=u&&o._startTime+o.totalDuration()/o._timeScale>u&&((d||!o._initted)&&u-o._startTime<=2e-10||(c[p++]=o)));for(s=p;--s>-1;)if(o=c[s],2===n&&o._kill(i,t,e)&&(a=!0),2!==n||!o._firstPT&&o._initted){if(2!==n&&!K(o,e))continue;o._enabled(!1,!1)&&(a=!0)}return a},tt=function(t,e,i){for(var n=t._timeline,r=n._timeScale,s=t._startTime;n._timeline;){if(s+=n._startTime,r*=n._timeScale,n._paused)return-100;n=n._timeline}return s/=r,s>e?s-e:i&&s===e||!t._initted&&s-e<2*f?f:(s+=t.totalDuration()/t._timeScale/r)>e+f?0:s-e-f};o._init=function(){var t,e,i,n,r,s,a=this.vars,o=this._overwrittenProps,l=this._duration,h=!!a.immediateRender,u=a.ease;if(a.startAt){this._startAt&&(this._startAt.render(-1,!0),this._startAt.kill()),r={};for(n in a.startAt)r[n]=a.startAt[n];if(r.overwrite=!1,r.immediateRender=!0,r.lazy=h&&a.lazy!==!1,r.startAt=r.delay=null,this._startAt=M.to(this.target,0,r),h)if(this._time>0)this._startAt=null;else if(0!==l)return}else if(a.runBackwards&&0!==l)if(this._startAt)this._startAt.render(-1,!0),this._startAt.kill(),this._startAt=null;else{0!==this._time&&(h=!1),i={};for(n in a)W[n]&&"autoCSS"!==n||(i[n]=a[n]);if(i.overwrite=0,i.data="isFromStart",i.lazy=h&&a.lazy!==!1,i.immediateRender=h,this._startAt=M.to(this.target,0,i),h){if(0===this._time)return}else this._startAt._init(),this._startAt._enabled(!1),this.vars.immediateRender&&(this._startAt=null)}if(this._ease=u=u?u instanceof w?u:"function"==typeof u?new w(u,a.easeParams):b[u]||M.defaultEase:M.defaultEase,a.easeParams instanceof Array&&u.config&&(this._ease=u.config.apply(u,a.easeParams)),this._easeType=this._ease._type,this._easePower=this._ease._power,this._firstPT=null,this._targets)for(s=this._targets.length,t=0;t<s;t++)this._initProps(this._targets[t],this._propLookup[t]={},this._siblings[t],o?o[t]:null,t)&&(e=!0);else e=this._initProps(this.target,this._propLookup,this._siblings,o,0);if(e&&M._onPluginEvent("_onInitAllProps",this),o&&(this._firstPT||"function"!=typeof this.target&&this._enabled(!1,!1)),a.runBackwards)for(i=this._firstPT;i;)i.s+=i.c,i.c=-i.c,i=i._next;this._onUpdate=a.onUpdate,this._initted=!0},o._initProps=function(e,i,n,r,s){var a,o,l,h,u,c;if(null==e)return!1;N[e._gsTweenID]&&Q(),this.vars.css||e.style&&e!==t&&e.nodeType&&X.css&&this.vars.autoCSS!==!1&&E(this.vars,e);for(a in this.vars)if(c=this.vars[a],W[a])c&&(c instanceof Array||c.push&&_(c))&&c.join("").indexOf("{self}")!==-1&&(this.vars[a]=c=this._swapSelfInParams(c,this));else if(X[a]&&(h=new X[a])._onInitTween(e,this.vars[a],this,s)){for(this._firstPT=u={_next:this._firstPT,t:h,p:"setRatio",s:0,c:1,f:1,n:a,pg:1,pr:h._priority,m:0},o=h._overwriteProps.length;--o>-1;)i[h._overwriteProps[o]]=this._firstPT;(h._priority||h._onInitAllProps)&&(l=!0),(h._onDisable||h._onEnable)&&(this._notifyPluginsOfEnabled=!0),u._next&&(u._next._prev=u)}else i[a]=q.call(this,e,a,"get",c,a,0,null,this.vars.stringFilter,s);return r&&this._kill(r,e)?this._initProps(e,i,n,r,s):this._overwrite>1&&this._firstPT&&n.length>1&&J(e,this,i,this._overwrite,n)?(this._kill(i,e),this._initProps(e,i,n,r,s)):(this._firstPT&&(this.vars.lazy!==!1&&this._duration||this.vars.lazy&&!this._duration)&&(N[e._gsTweenID]=!0),l)},o.render=function(t,e,i){var n,r,s,a,o=this._time,l=this._duration,h=this._rawPrevTime;if(t>=l-1e-7)this._totalTime=this._time=l,this.ratio=this._ease._calcEnd?this._ease.getRatio(1):1,this._reversed||(n=!0,r="onComplete",i=i||this._timeline.autoRemoveChildren),0===l&&(this._initted||!this.vars.lazy||i)&&(this._startTime===this._timeline._duration&&(t=0),(h<0||t<=0&&t>=-1e-7||h===f&&"isPause"!==this.data)&&h!==t&&(i=!0,h>f&&(r="onReverseComplete")),this._rawPrevTime=a=!e||t||h===t?t:f);else if(t<1e-7)this._totalTime=this._time=0,this.ratio=this._ease._calcEnd?this._ease.getRatio(0):0,(0!==o||0===l&&h>0)&&(r="onReverseComplete",n=this._reversed),t<0&&(this._active=!1,0===l&&(this._initted||!this.vars.lazy||i)&&(h>=0&&(h!==f||"isPause"!==this.data)&&(i=!0),this._rawPrevTime=a=!e||t||h===t?t:f)),this._initted||(i=!0);else if(this._totalTime=this._time=t,this._easeType){var u=t/l,c=this._easeType,p=this._easePower;(1===c||3===c&&u>=.5)&&(u=1-u),3===c&&(u*=2),1===p?u*=u:2===p?u*=u*u:3===p?u*=u*u*u:4===p&&(u*=u*u*u*u),1===c?this.ratio=1-u:2===c?this.ratio=u:t/l<.5?this.ratio=u/2:this.ratio=1-u/2}else this.ratio=this._ease.getRatio(t/l);if(this._time!==o||i){if(!this._initted){if(this._init(),!this._initted||this._gc)return;if(!i&&this._firstPT&&(this.vars.lazy!==!1&&this._duration||this.vars.lazy&&!this._duration))return this._time=this._totalTime=o,this._rawPrevTime=h,F.push(this),void(this._lazy=[t,e]);this._time&&!n?this.ratio=this._ease.getRatio(this._time/l):n&&this._ease._calcEnd&&(this.ratio=this._ease.getRatio(0===this._time?0:1))}for(this._lazy!==!1&&(this._lazy=!1),this._active||!this._paused&&this._time!==o&&t>=0&&(this._active=!0),0===o&&(this._startAt&&(t>=0?this._startAt.render(t,e,i):r||(r="_dummyGS")),this.vars.onStart&&(0===this._time&&0!==l||e||this._callback("onStart"))),s=this._firstPT;s;)s.f?s.t[s.p](s.c*this.ratio+s.s):s.t[s.p]=s.c*this.ratio+s.s,s=s._next;this._onUpdate&&(t<0&&this._startAt&&t!==-1e-4&&this._startAt.render(t,e,i),e||(this._time!==o||n||i)&&this._callback("onUpdate")),r&&(this._gc&&!i||(t<0&&this._startAt&&!this._onUpdate&&t!==-1e-4&&this._startAt.render(t,e,i),n&&(this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[r]&&this._callback(r),0===l&&this._rawPrevTime===f&&a!==f&&(this._rawPrevTime=0)))}},o._kill=function(t,e,i){if("all"===t&&(t=null),null==t&&(null==e||e===this.target))return this._lazy=!1,this._enabled(!1,!1);e="string"!=typeof e?e||this._targets||this.target:M.selector(e)||e;var n,r,s,a,o,l,h,u,c,f=i&&this._time&&i._startTime===this._startTime&&this._timeline===i._timeline;if((_(e)||j(e))&&"number"!=typeof e[0])for(n=e.length;--n>-1;)this._kill(t,e[n],i)&&(l=!0);else{if(this._targets){for(n=this._targets.length;--n>-1;)if(e===this._targets[n]){o=this._propLookup[n]||{},this._overwrittenProps=this._overwrittenProps||[],r=this._overwrittenProps[n]=t?this._overwrittenProps[n]||{}:"all";break}}else{if(e!==this.target)return!1;o=this._propLookup,r=this._overwrittenProps=t?this._overwrittenProps||{}:"all"}if(o){if(h=t||o,u=t!==r&&"all"!==r&&t!==o&&("object"!=typeof t||!t._tempKill),i&&(M.onOverwrite||this.vars.onOverwrite)){for(s in h)o[s]&&(c||(c=[]),c.push(s));if((c||!t)&&!K(this,i,e,c))return!1}for(s in h)(a=o[s])&&(f&&(a.f?a.t[a.p](a.s):a.t[a.p]=a.s,l=!0),a.pg&&a.t._kill(h)&&(l=!0),a.pg&&0!==a.t._overwriteProps.length||(a._prev?a._prev._next=a._next:a===this._firstPT&&(this._firstPT=a._next),a._next&&(a._next._prev=a._prev),a._next=a._prev=null),delete o[s]),u&&(r[s]=1);!this._firstPT&&this._initted&&this._enabled(!1,!1)}}return l},o.invalidate=function(){return this._notifyPluginsOfEnabled&&M._onPluginEvent("_onDisable",this),this._firstPT=this._overwrittenProps=this._startAt=this._onUpdate=null,this._notifyPluginsOfEnabled=this._active=this._lazy=!1,this._propLookup=this._targets?{}:[],A.prototype.invalidate.call(this),this.vars.immediateRender&&(this._time=-f,this.render(Math.min(0,-this._delay))),this},o._enabled=function(t,e){if(h||l.wake(),t&&this._gc){var i,n=this._targets;if(n)for(i=n.length;--i>-1;)this._siblings[i]=Z(n[i],this,!0);else this._siblings=Z(this.target,this,!0)}return A.prototype._enabled.call(this,t,e),!(!this._notifyPluginsOfEnabled||!this._firstPT)&&M._onPluginEvent(t?"_onEnable":"_onDisable",this)},M.to=function(t,e,i){return new M(t,e,i)},M.from=function(t,e,i){return i.runBackwards=!0,i.immediateRender=0!=i.immediateRender,new M(t,e,i)},M.fromTo=function(t,e,i,n){return n.startAt=i,n.immediateRender=0!=n.immediateRender&&0!=i.immediateRender,new M(t,e,n)},M.delayedCall=function(t,e,i,n,r){return new M(e,0,{delay:t,onComplete:e,onCompleteParams:i,callbackScope:n,onReverseComplete:e,onReverseCompleteParams:i,immediateRender:!1,lazy:!1,useFrames:r,overwrite:0})},M.set=function(t,e){return new M(t,0,e)},M.getTweensOf=function(t,e){if(null==t)return[];t="string"!=typeof t?t:M.selector(t)||t;var i,n,r,s;if((_(t)||j(t))&&"number"!=typeof t[0]){for(i=t.length,n=[];--i>-1;)n=n.concat(M.getTweensOf(t[i],e));for(i=n.length;--i>-1;)for(s=n[i],r=i;--r>-1;)s===n[r]&&n.splice(i,1)}else for(n=Z(t).concat(),i=n.length;--i>-1;)(n[i]._gc||e&&!n[i].isActive())&&n.splice(i,1);return n},M.killTweensOf=M.killDelayedCallsTo=function(t,e,i){"object"==typeof e&&(i=e,e=!1);for(var n=M.getTweensOf(t,e),r=n.length;--r>-1;)n[r]._kill(i,t)};var et=y("plugins.TweenPlugin",function(t,e){this._overwriteProps=(t||"").split(","),this._propName=this._overwriteProps[0],this._priority=e||0,this._super=et.prototype},!0);if(o=et.prototype,et.version="1.19.0",et.API=2,o._firstPT=null,o._addTween=q,o.setRatio=I,o._kill=function(t){var e,i=this._overwriteProps,n=this._firstPT;if(null!=t[this._propName])this._overwriteProps=[];else for(e=i.length;--e>-1;)null!=t[i[e]]&&i.splice(e,1);for(;n;)null!=t[n.n]&&(n._next&&(n._next._prev=n._prev),n._prev?(n._prev._next=n._next,n._prev=null):this._firstPT===n&&(this._firstPT=n._next)),n=n._next;return!1},o._mod=o._roundProps=function(t){for(var e,i=this._firstPT;i;)e=t[this._propName]||null!=i.n&&t[i.n.split(this._propName+"_").join("")],e&&"function"==typeof e&&(2===i.f?i.t._applyPT.m=e:i.m=e),i=i._next},M._onPluginEvent=function(t,e){var i,n,r,s,a,o=e._firstPT;if("_onInitAllProps"===t){for(;o;){for(a=o._next,n=r;n&&n.pr>o.pr;)n=n._next;(o._prev=n?n._prev:s)?o._prev._next=o:r=o,(o._next=n)?n._prev=o:s=o,o=a}o=e._firstPT=r}for(;o;)o.pg&&"function"==typeof o.t[t]&&o.t[t]()&&(i=!0),o=o._next;return i},et.activate=function(t){for(var e=t.length;--e>-1;)t[e].API===et.API&&(X[(new t[e])._propName]=t[e]);return!0},v.plugin=function(t){if(!(t&&t.propName&&t.init&&t.API))throw"illegal plugin definition.";var e,i=t.propName,n=t.priority||0,r=t.overwriteProps,s={init:"_onInitTween",set:"setRatio",kill:"_kill",round:"_mod",mod:"_mod",initAll:"_onInitAllProps"},a=y("plugins."+i.charAt(0).toUpperCase()+i.substr(1)+"Plugin",function(){et.call(this,i,n),this._overwriteProps=r||[]},t.global===!0),o=a.prototype=new et(i);o.constructor=a,a.API=t.API;for(e in s)"function"==typeof t[e]&&(o[s[e]]=t[e]);return a.version=t.version,et.activate([a]),a},s=t._gsQueue){for(a=0;a<s.length;a++)s[a]();for(o in m)m[o].func||t.console.log("GSAP encountered missing dependency: "+o)}h=!1}}("undefined"!=typeof e&&e.exports&&"undefined"!=typeof t?t:this||window,"TweenMax")}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],2:[function(t,e,i){!function(t,n){"function"==typeof define&&define.amd?define(n):"object"==typeof i?e.exports=n():t.ScrollMagic=n()}(this,function(){"use strict";var t=function(){r.log(2,"(COMPATIBILITY NOTICE) -> As of ScrollMagic 2.0.0 you need to use 'new ScrollMagic.Controller()' to create a new controller instance. Use 'new ScrollMagic.Scene()' to instance a scene.")};t.version="2.0.5",window.addEventListener("mousewheel",function(){});var e="data-scrollmagic-pin-spacer";t.Controller=function(n){var s,a,o="ScrollMagic.Controller",l="FORWARD",h="REVERSE",u="PAUSED",c=i.defaults,f=this,p=r.extend({},c,n),d=[],_=!1,m=0,g=u,v=!0,y=0,T=!0,w=function(){for(var e in p)c.hasOwnProperty(e)||(R(2,'WARNING: Unknown option "'+e+'"'),delete p[e]);if(p.container=r.get.elements(p.container)[0],!p.container)throw R(1,"ERROR creating object "+o+": No valid scroll container supplied"),o+" init failed.";v=p.container===window||p.container===document.body||!document.body.contains(p.container),v&&(p.container=window),y=P(),p.container.addEventListener("resize",O),p.container.addEventListener("scroll",O),p.refreshInterval=parseInt(p.refreshInterval)||c.refreshInterval,b(),R(3,"added new "+o+" controller (v"+t.version+")")},b=function(){p.refreshInterval>0&&(a=window.setTimeout(A,p.refreshInterval))},x=function(){return p.vertical?r.get.scrollTop(p.container):r.get.scrollLeft(p.container)},P=function(){return p.vertical?r.get.height(p.container):r.get.width(p.container)},S=this._setScrollPos=function(t){p.vertical?v?window.scrollTo(r.get.scrollLeft(),t):p.container.scrollTop=t:v?window.scrollTo(t,r.get.scrollTop()):p.container.scrollLeft=t},C=function(){if(T&&_){var t=r.type.Array(_)?_:d.slice(0);_=!1;var e=m;m=f.scrollPos();var i=m-e;0!==i&&(g=i>0?l:h),g===h&&t.reverse(),t.forEach(function(e,i){R(3,"updating Scene "+(i+1)+"/"+t.length+" ("+d.length+" total)"),e.update(!0)}),0===t.length&&p.loglevel>=3&&R(3,"updating 0 Scenes (nothing added to controller)")}},k=function(){s=r.rAF(C)},O=function(t){R(3,"event fired causing an update:",t.type),"resize"==t.type&&(y=P(),g=u),_!==!0&&(_=!0,k())},A=function(){if(!v&&y!=P()){var t;try{t=new Event("resize",{bubbles:!1,cancelable:!1})}catch(e){t=document.createEvent("Event"),t.initEvent("resize",!1,!1)}p.container.dispatchEvent(t)}d.forEach(function(t,e){t.refresh()}),b()},R=this._log=function(t,e){p.loglevel>=t&&(Array.prototype.splice.call(arguments,1,0,"("+o+") ->"),r.log.apply(window,arguments))};this._options=p;var D=function(t){if(t.length<=1)return t;var e=t.slice(0);return e.sort(function(t,e){return t.scrollOffset()>e.scrollOffset()?1:-1}),e};return this.addScene=function(e){if(r.type.Array(e))e.forEach(function(t,e){f.addScene(t)});else if(e instanceof t.Scene){if(e.controller()!==f)e.addTo(f);else if(d.indexOf(e)<0){d.push(e),d=D(d),e.on("shift.controller_sort",function(){d=D(d)});for(var i in p.globalSceneOptions)e[i]&&e[i].call(e,p.globalSceneOptions[i]);R(3,"adding Scene (now "+d.length+" total)")}}else R(1,"ERROR: invalid argument supplied for '.addScene()'");return f},this.removeScene=function(t){if(r.type.Array(t))t.forEach(function(t,e){f.removeScene(t)});else{var e=d.indexOf(t);e>-1&&(t.off("shift.controller_sort"),d.splice(e,1),R(3,"removing Scene (now "+d.length+" left)"),t.remove())}return f},this.updateScene=function(e,i){return r.type.Array(e)?e.forEach(function(t,e){f.updateScene(t,i)}):i?e.update(!0):_!==!0&&e instanceof t.Scene&&(_=_||[],_.indexOf(e)==-1&&_.push(e),_=D(_),k()),f},this.update=function(t){return O({type:"resize"}),t&&C(),f},this.scrollTo=function(i,n){if(r.type.Number(i))S.call(p.container,i,n);else if(i instanceof t.Scene)i.controller()===f?f.scrollTo(i.scrollOffset(),n):R(2,"scrollTo(): The supplied scene does not belong to this controller. Scroll cancelled.",i);else if(r.type.Function(i))S=i;else{var s=r.get.elements(i)[0];if(s){for(;s.parentNode.hasAttribute(e);)s=s.parentNode;var a=p.vertical?"top":"left",o=r.get.offset(p.container),l=r.get.offset(s);v||(o[a]-=f.scrollPos()),f.scrollTo(l[a]-o[a],n)}else R(2,"scrollTo(): The supplied argument is invalid. Scroll cancelled.",i)}return f},this.scrollPos=function(t){return arguments.length?(r.type.Function(t)?x=t:R(2,"Provided value for method 'scrollPos' is not a function. To change the current scroll position use 'scrollTo()'."),f):x.call(f)},this.info=function(t){var e={size:y,vertical:p.vertical,scrollPos:m,scrollDirection:g,container:p.container,isDocument:v};return arguments.length?void 0!==e[t]?e[t]:void R(1,'ERROR: option "'+t+'" is not available'):e},this.loglevel=function(t){return arguments.length?(p.loglevel!=t&&(p.loglevel=t),f):p.loglevel},this.enabled=function(t){return arguments.length?(T!=t&&(T=!!t,f.updateScene(d,!0)),f):T},this.destroy=function(t){window.clearTimeout(a);for(var e=d.length;e--;)d[e].destroy(t);return p.container.removeEventListener("resize",O),p.container.removeEventListener("scroll",O),r.cAF(s),R(3,"destroyed "+o+" (reset: "+(t?"true":"false")+")"),null},w(),f};var i={defaults:{container:window,vertical:!0,globalSceneOptions:{},loglevel:2,refreshInterval:100}};t.Controller.addOption=function(t,e){i.defaults[t]=e},t.Controller.extend=function(e){var i=this;t.Controller=function(){return i.apply(this,arguments),this.$super=r.extend({},this),e.apply(this,arguments)||this},r.extend(t.Controller,i),t.Controller.prototype=i.prototype,t.Controller.prototype.constructor=t.Controller},t.Scene=function(i){var s,a,o="ScrollMagic.Scene",l="BEFORE",h="DURING",u="AFTER",c=n.defaults,f=this,p=r.extend({},c,i),d=l,_=0,m={start:0,end:0},g=0,v=!0,y=function(){for(var t in p)c.hasOwnProperty(t)||(w(2,'WARNING: Unknown option "'+t+'"'),delete p[t]);for(var e in c)A(e);k()},T={};this.on=function(t,e){return r.type.Function(e)?(t=t.trim().split(" "),t.forEach(function(t){var i=t.split("."),n=i[0],r=i[1];"*"!=n&&(T[n]||(T[n]=[]),T[n].push({namespace:r||"",callback:e}))})):w(1,"ERROR when calling '.on()': Supplied callback for '"+t+"' is not a valid function!"),f},this.off=function(t,e){return t?(t=t.trim().split(" "),t.forEach(function(t,i){var n=t.split("."),r=n[0],s=n[1]||"",a="*"===r?Object.keys(T):[r];a.forEach(function(t){for(var i=T[t]||[],n=i.length;n--;){var r=i[n];!r||s!==r.namespace&&"*"!==s||e&&e!=r.callback||i.splice(n,1)}i.length||delete T[t]})}),f):(w(1,"ERROR: Invalid event name supplied."),f)},this.trigger=function(e,i){if(e){var n=e.trim().split("."),r=n[0],s=n[1],a=T[r];w(3,"event fired:",r,i?"->":"",i||""),a&&a.forEach(function(e,n){s&&s!==e.namespace||e.callback.call(f,new t.Event(r,e.namespace,f,i))})}else w(1,"ERROR: Invalid event name supplied.");return f},f.on("change.internal",function(t){"loglevel"!==t.what&&"tweenChanges"!==t.what&&("triggerElement"===t.what?P():"reverse"===t.what&&f.update())}).on("shift.internal",function(t){b(),f.update()});var w=this._log=function(t,e){p.loglevel>=t&&(Array.prototype.splice.call(arguments,1,0,"("+o+") ->"),r.log.apply(window,arguments))};this.addTo=function(e){return e instanceof t.Controller?a!=e&&(a&&a.removeScene(f),a=e,k(),x(!0),P(!0),b(),a.info("container").addEventListener("resize",S),e.addScene(f),f.trigger("add",{controller:a}),w(3,"added "+o+" to controller"),f.update()):w(1,"ERROR: supplied argument of 'addTo()' is not a valid ScrollMagic Controller"),f},this.enabled=function(t){return arguments.length?(v!=t&&(v=!!t,f.update(!0)),f):v},this.remove=function(){if(a){a.info("container").removeEventListener("resize",S);var t=a;a=void 0,t.removeScene(f),f.trigger("remove"),w(3,"removed "+o+" from controller")}return f},this.destroy=function(t){return f.trigger("destroy",{reset:t}),f.remove(),f.off("*.*"),w(3,"destroyed "+o+" (reset: "+(t?"true":"false")+")"),null},this.update=function(t){if(a)if(t)if(a.enabled()&&v){var e,i=a.info("scrollPos");e=p.duration>0?(i-m.start)/(m.end-m.start):i>=m.start?1:0,f.trigger("update",{startPos:m.start,endPos:m.end,scrollPos:i}),f.progress(e)}else R&&d===h&&M(!0);else a.updateScene(f,!1);return f},this.refresh=function(){return x(),P(),f},this.progress=function(t){if(arguments.length){var e=!1,i=d,n=a?a.info("scrollDirection"):"PAUSED",r=p.reverse||t>=_;if(0===p.duration?(e=_!=t,_=t<1&&r?0:1,d=0===_?l:h):t<0&&d!==l&&r?(_=0,d=l,e=!0):t>=0&&t<1&&r?(_=t,d=h,e=!0):t>=1&&d!==u?(_=1,d=u,e=!0):d!==h||r||M(),e){var s={progress:_,state:d,scrollDirection:n},o=d!=i,c=function(t){f.trigger(t,s)};o&&i!==h&&(c("enter"),c(i===l?"start":"end")),c("progress"),o&&d!==h&&(c(d===l?"start":"end"),c("leave"))}return f}return _};var b=function(){m={start:g+p.offset},a&&p.triggerElement&&(m.start-=a.info("size")*p.triggerHook),m.end=m.start+p.duration},x=function(t){if(s){var e="duration";O(e,s.call(f))&&!t&&(f.trigger("change",{what:e,newval:p[e]}),f.trigger("shift",{reason:e}))}},P=function(t){var i=0,n=p.triggerElement;if(a&&n){for(var s=a.info(),o=r.get.offset(s.container),l=s.vertical?"top":"left";n.parentNode.hasAttribute(e);)n=n.parentNode;var h=r.get.offset(n);s.isDocument||(o[l]-=a.scrollPos()),i=h[l]-o[l]}var u=i!=g;g=i,u&&!t&&f.trigger("shift",{reason:"triggerElementPosition"})},S=function(t){p.triggerHook>0&&f.trigger("shift",{reason:"containerResize"})},C=r.extend(n.validate,{duration:function(t){if(r.type.String(t)&&t.match(/^(\.|\d)*\d+%$/)){var e=parseFloat(t)/100;t=function(){return a?a.info("size")*e:0}}if(r.type.Function(t)){s=t;try{t=parseFloat(s())}catch(e){t=-1}}if(t=parseFloat(t),!r.type.Number(t)||t<0)throw s?(s=void 0,['Invalid return value of supplied function for option "duration":',t]):['Invalid value for option "duration":',t];return t}}),k=function(t){t=arguments.length?[t]:Object.keys(C),t.forEach(function(t,e){var i;if(C[t])try{i=C[t](p[t])}catch(e){i=c[t];var n=r.type.String(e)?[e]:e;r.type.Array(n)?(n[0]="ERROR: "+n[0],n.unshift(1),w.apply(this,n)):w(1,"ERROR: Problem executing validation callback for option '"+t+"':",e.message)}finally{p[t]=i}})},O=function(t,e){var i=!1,n=p[t];return p[t]!=e&&(p[t]=e,k(t),i=n!=p[t]),i},A=function(t){f[t]||(f[t]=function(e){return arguments.length?("duration"===t&&(s=void 0),O(t,e)&&(f.trigger("change",{what:t,newval:p[t]}),n.shifts.indexOf(t)>-1&&f.trigger("shift",{reason:t})),f):p[t]})};this.controller=function(){return a},this.state=function(){return d},this.scrollOffset=function(){return m.start},this.triggerPosition=function(){var t=p.offset;return a&&(t+=p.triggerElement?g:a.info("size")*f.triggerHook()),t};var R,D;f.on("shift.internal",function(t){var e="duration"===t.reason;(d===u&&e||d===h&&0===p.duration)&&M(),e&&j()}).on("progress.internal",function(t){M()}).on("add.internal",function(t){j()}).on("destroy.internal",function(t){f.removePin(t.reset)});var M=function(t){if(R&&a){var e=a.info(),i=D.spacer.firstChild;if(t||d!==h){var n={position:D.inFlow?"relative":"absolute",top:0,left:0},s=r.css(i,"position")!=n.position;D.pushFollowers?p.duration>0&&(d===u&&0===parseFloat(r.css(D.spacer,"padding-top"))?s=!0:d===l&&0===parseFloat(r.css(D.spacer,"padding-bottom"))&&(s=!0)):n[e.vertical?"top":"left"]=p.duration*_,r.css(i,n),s&&j()}else{"fixed"!=r.css(i,"position")&&(r.css(i,{position:"fixed"}),j());var o=r.get.offset(D.spacer,!0),c=p.reverse||0===p.duration?e.scrollPos-m.start:Math.round(_*p.duration*10)/10;o[e.vertical?"top":"left"]+=c,r.css(D.spacer.firstChild,{top:o.top,left:o.left})}}},j=function(){if(R&&a&&D.inFlow){var t=d===h,e=a.info("vertical"),i=D.spacer.firstChild,n=r.isMarginCollapseType(r.css(D.spacer,"display")),s={};D.relSize.width||D.relSize.autoFullWidth?t?r.css(R,{width:r.get.width(D.spacer)}):r.css(R,{width:"100%"}):(s["min-width"]=r.get.width(e?R:i,!0,!0),s.width=t?s["min-width"]:"auto"),D.relSize.height?t?r.css(R,{height:r.get.height(D.spacer)-(D.pushFollowers?p.duration:0)}):r.css(R,{height:"100%"}):(s["min-height"]=r.get.height(e?i:R,!0,!n),s.height=t?s["min-height"]:"auto"),D.pushFollowers&&(s["padding"+(e?"Top":"Left")]=p.duration*_,s["padding"+(e?"Bottom":"Right")]=p.duration*(1-_)),r.css(D.spacer,s)}},E=function(){a&&R&&d===h&&!a.info("isDocument")&&M()},F=function(){a&&R&&d===h&&((D.relSize.width||D.relSize.autoFullWidth)&&r.get.width(window)!=r.get.width(D.spacer.parentNode)||D.relSize.height&&r.get.height(window)!=r.get.height(D.spacer.parentNode))&&j()},N=function(t){a&&R&&d===h&&!a.info("isDocument")&&(t.preventDefault(),a._setScrollPos(a.info("scrollPos")-((t.wheelDelta||t[a.info("vertical")?"wheelDeltaY":"wheelDeltaX"])/3||30*-t.detail)))};this.setPin=function(t,i){var n={pushFollowers:!0,spacerClass:"scrollmagic-pin-spacer"};if(i=r.extend({},n,i),t=r.get.elements(t)[0],!t)return w(1,"ERROR calling method 'setPin()': Invalid pin element supplied."),f;if("fixed"===r.css(t,"position"))return w(1,"ERROR calling method 'setPin()': Pin does not work with elements that are positioned 'fixed'."),f;if(R){if(R===t)return f;f.removePin()}R=t;var s=R.parentNode.style.display,a=["top","left","bottom","right","margin","marginLeft","marginRight","marginTop","marginBottom"];R.parentNode.style.display="none";var o="absolute"!=r.css(R,"position"),l=r.css(R,a.concat(["display"])),h=r.css(R,["width","height"]);R.parentNode.style.display=s,!o&&i.pushFollowers&&(w(2,"WARNING: If the pinned element is positioned absolutely pushFollowers will be disabled."),i.pushFollowers=!1),window.setTimeout(function(){R&&0===p.duration&&i.pushFollowers&&w(2,"WARNING: pushFollowers =",!0,"has no effect, when scene duration is 0.")},0);var u=R.parentNode.insertBefore(document.createElement("div"),R),c=r.extend(l,{position:o?"relative":"absolute",boxSizing:"content-box",mozBoxSizing:"content-box",webkitBoxSizing:"content-box"});if(o||r.extend(c,r.css(R,["width","height"])),r.css(u,c),u.setAttribute(e,""),r.addClass(u,i.spacerClass),D={spacer:u,relSize:{width:"%"===h.width.slice(-1),height:"%"===h.height.slice(-1),autoFullWidth:"auto"===h.width&&o&&r.isMarginCollapseType(l.display)},pushFollowers:i.pushFollowers,inFlow:o},!R.___origStyle){R.___origStyle={};var d=R.style,_=a.concat(["width","height","position","boxSizing","mozBoxSizing","webkitBoxSizing"]);_.forEach(function(t){R.___origStyle[t]=d[t]||""})}return D.relSize.width&&r.css(u,{width:h.width}),D.relSize.height&&r.css(u,{height:h.height}),u.appendChild(R),r.css(R,{position:o?"relative":"absolute",margin:"auto",top:"auto",left:"auto",bottom:"auto",right:"auto"}),(D.relSize.width||D.relSize.autoFullWidth)&&r.css(R,{boxSizing:"border-box",mozBoxSizing:"border-box",webkitBoxSizing:"border-box"}),window.addEventListener("scroll",E),window.addEventListener("resize",E),window.addEventListener("resize",F),R.addEventListener("mousewheel",N),R.addEventListener("DOMMouseScroll",N),w(3,"added pin"),M(),f},this.removePin=function(t){if(R){if(d===h&&M(!0),t||!a){var i=D.spacer.firstChild;if(i.hasAttribute(e)){var n=D.spacer.style,s=["margin","marginLeft","marginRight","marginTop","marginBottom"];margins={},s.forEach(function(t){margins[t]=n[t]||""}),r.css(i,margins)}D.spacer.parentNode.insertBefore(i,D.spacer),D.spacer.parentNode.removeChild(D.spacer),R.parentNode.hasAttribute(e)||(r.css(R,R.___origStyle),delete R.___origStyle)}window.removeEventListener("scroll",E),window.removeEventListener("resize",E),window.removeEventListener("resize",F),R.removeEventListener("mousewheel",N),R.removeEventListener("DOMMouseScroll",N),R=void 0,w(3,"removed pin (reset: "+(t?"true":"false")+")")}return f};var L,I=[];return f.on("destroy.internal",function(t){f.removeClassToggle(t.reset)}),this.setClassToggle=function(t,e){var i=r.get.elements(t);return 0!==i.length&&r.type.String(e)?(I.length>0&&f.removeClassToggle(),L=e,I=i,f.on("enter.internal_class leave.internal_class",function(t){var e="enter"===t.type?r.addClass:r.removeClass;I.forEach(function(t,i){e(t,L)})}),f):(w(1,"ERROR calling method 'setClassToggle()': Invalid "+(0===i.length?"element":"classes")+" supplied."),f)},this.removeClassToggle=function(t){return t&&I.forEach(function(t,e){r.removeClass(t,L)}),f.off("start.internal_class end.internal_class"),L=void 0,I=[],f},y(),f};var n={defaults:{duration:0,offset:0,triggerElement:void 0,triggerHook:.5,reverse:!0,loglevel:2},validate:{offset:function(t){if(t=parseFloat(t),!r.type.Number(t))throw['Invalid value for option "offset":',t];return t},triggerElement:function(t){if(t=t||void 0){var e=r.get.elements(t)[0];if(!e)throw['Element defined in option "triggerElement" was not found:',t];t=e}return t},triggerHook:function(t){var e={onCenter:.5,onEnter:1,onLeave:0};if(r.type.Number(t))t=Math.max(0,Math.min(parseFloat(t),1));else{if(!(t in e))throw['Invalid value for option "triggerHook": ',t];t=e[t]}return t},reverse:function(t){return!!t},loglevel:function(t){if(t=parseInt(t),!r.type.Number(t)||t<0||t>3)throw['Invalid value for option "loglevel":',t];
return t}},shifts:["duration","offset","triggerHook"]};t.Scene.addOption=function(e,i,r,s){e in n.defaults?t._util.log(1,"[static] ScrollMagic.Scene -> Cannot add Scene option '"+e+"', because it already exists."):(n.defaults[e]=i,n.validate[e]=r,s&&n.shifts.push(e))},t.Scene.extend=function(e){var i=this;t.Scene=function(){return i.apply(this,arguments),this.$super=r.extend({},this),e.apply(this,arguments)||this},r.extend(t.Scene,i),t.Scene.prototype=i.prototype,t.Scene.prototype.constructor=t.Scene},t.Event=function(t,e,i,n){n=n||{};for(var r in n)this[r]=n[r];return this.type=t,this.target=this.currentTarget=i,this.namespace=e||"",this.timeStamp=this.timestamp=Date.now(),this};var r=t._util=function(t){var e,i={},n=function(t){return parseFloat(t)||0},r=function(e){return e.currentStyle?e.currentStyle:t.getComputedStyle(e)},s=function(e,i,s,a){if(i=i===document?t:i,i===t)a=!1;else if(!d.DomElement(i))return 0;e=e.charAt(0).toUpperCase()+e.substr(1).toLowerCase();var o=(s?i["offset"+e]||i["outer"+e]:i["client"+e]||i["inner"+e])||0;if(s&&a){var l=r(i);o+="Height"===e?n(l.marginTop)+n(l.marginBottom):n(l.marginLeft)+n(l.marginRight)}return o},a=function(t){return t.replace(/^[^a-z]+([a-z])/g,"$1").replace(/-([a-z])/g,function(t){return t[1].toUpperCase()})};i.extend=function(t){for(t=t||{},e=1;e<arguments.length;e++)if(arguments[e])for(var i in arguments[e])arguments[e].hasOwnProperty(i)&&(t[i]=arguments[e][i]);return t},i.isMarginCollapseType=function(t){return["block","flex","list-item","table","-webkit-box"].indexOf(t)>-1};var o=0,l=["ms","moz","webkit","o"],h=t.requestAnimationFrame,u=t.cancelAnimationFrame;for(e=0;!h&&e<l.length;++e)h=t[l[e]+"RequestAnimationFrame"],u=t[l[e]+"CancelAnimationFrame"]||t[l[e]+"CancelRequestAnimationFrame"];h||(h=function(e){var i=(new Date).getTime(),n=Math.max(0,16-(i-o)),r=t.setTimeout(function(){e(i+n)},n);return o=i+n,r}),u||(u=function(e){t.clearTimeout(e)}),i.rAF=h.bind(t),i.cAF=u.bind(t);var c=["error","warn","log"],f=t.console||{};for(f.log=f.log||function(){},e=0;e<c.length;e++){var p=c[e];f[p]||(f[p]=f.log)}i.log=function(t){(t>c.length||t<=0)&&(t=c.length);var e=new Date,i=("0"+e.getHours()).slice(-2)+":"+("0"+e.getMinutes()).slice(-2)+":"+("0"+e.getSeconds()).slice(-2)+":"+("00"+e.getMilliseconds()).slice(-3),n=c[t-1],r=Array.prototype.splice.call(arguments,1),s=Function.prototype.bind.call(f[n],f);r.unshift(i),s.apply(f,r)};var d=i.type=function(t){return Object.prototype.toString.call(t).replace(/^\[object (.+)\]$/,"$1").toLowerCase()};d.String=function(t){return"string"===d(t)},d.Function=function(t){return"function"===d(t)},d.Array=function(t){return Array.isArray(t)},d.Number=function(t){return!d.Array(t)&&t-parseFloat(t)+1>=0},d.DomElement=function(t){return"object"==typeof HTMLElement?t instanceof HTMLElement:t&&"object"==typeof t&&null!==t&&1===t.nodeType&&"string"==typeof t.nodeName};var _=i.get={};return _.elements=function(e){var i=[];if(d.String(e))try{e=document.querySelectorAll(e)}catch(t){return i}if("nodelist"===d(e)||d.Array(e))for(var n=0,r=i.length=e.length;n<r;n++){var s=e[n];i[n]=d.DomElement(s)?s:_.elements(s)}else(d.DomElement(e)||e===document||e===t)&&(i=[e]);return i},_.scrollTop=function(e){return e&&"number"==typeof e.scrollTop?e.scrollTop:t.pageYOffset||0},_.scrollLeft=function(e){return e&&"number"==typeof e.scrollLeft?e.scrollLeft:t.pageXOffset||0},_.width=function(t,e,i){return s("width",t,e,i)},_.height=function(t,e,i){return s("height",t,e,i)},_.offset=function(t,e){var i={top:0,left:0};if(t&&t.getBoundingClientRect){var n=t.getBoundingClientRect();i.top=n.top,i.left=n.left,e||(i.top+=_.scrollTop(),i.left+=_.scrollLeft())}return i},i.addClass=function(t,e){e&&(t.classList?t.classList.add(e):t.className+=" "+e)},i.removeClass=function(t,e){e&&(t.classList?t.classList.remove(e):t.className=t.className.replace(new RegExp("(^|\\b)"+e.split(" ").join("|")+"(\\b|$)","gi")," "))},i.css=function(t,e){if(d.String(e))return r(t)[a(e)];if(d.Array(e)){var i={},n=r(t);return e.forEach(function(t,e){i[t]=n[a(t)]}),i}for(var s in e){var o=e[s];o==parseFloat(o)&&(o+="px"),t.style[a(s)]=o}},i}(window||{});return t.Scene.prototype.addIndicators=function(){return t._util.log(1,"(ScrollMagic.Scene) -> ERROR calling addIndicators() due to missing Plugin 'debug.addIndicators'. Please make sure to include plugins/debug.addIndicators.js"),this},t.Scene.prototype.removeIndicators=function(){return t._util.log(1,"(ScrollMagic.Scene) -> ERROR calling removeIndicators() due to missing Plugin 'debug.addIndicators'. Please make sure to include plugins/debug.addIndicators.js"),this},t.Scene.prototype.setTween=function(){return t._util.log(1,"(ScrollMagic.Scene) -> ERROR calling setTween() due to missing Plugin 'animation.gsap'. Please make sure to include plugins/animation.gsap.js"),this},t.Scene.prototype.removeTween=function(){return t._util.log(1,"(ScrollMagic.Scene) -> ERROR calling removeTween() due to missing Plugin 'animation.gsap'. Please make sure to include plugins/animation.gsap.js"),this},t.Scene.prototype.setVelocity=function(){return t._util.log(1,"(ScrollMagic.Scene) -> ERROR calling setVelocity() due to missing Plugin 'animation.velocity'. Please make sure to include plugins/animation.velocity.js"),this},t.Scene.prototype.removeVelocity=function(){return t._util.log(1,"(ScrollMagic.Scene) -> ERROR calling removeVelocity() due to missing Plugin 'animation.velocity'. Please make sure to include plugins/animation.velocity.js"),this},t})},{}],3:[function(t,e,i){var n=t("./libs/jquery/dist/jquery.slim.min.js"),r=t("./isMobile.min.js");window.requestAnimFrame=t("./requestAnimFrame.js");var s=t("./detectScrollDir.js");e.exports=function(t,e,i,a){function o(){t=n(document).scrollTop(),t!==l&&(h=s(t,l),a=n("#skillsHome"),i.hasClass("scrolled")&&t>a.data("top")+200&&a.is(":visible")||!e.hasClass("home")?h>0?i.removeClass("off"):h<0&&(t<20?i.removeClass("off"):i.addClass("off")):i.removeClass("off")),l=t,requestAnimFrame(o)}var l=t,h=0;r.any||o()}},{"./detectScrollDir.js":11,"./isMobile.min.js":12,"./libs/jquery/dist/jquery.slim.min.js":18,"./requestAnimFrame.js":25}],4:[function(t,e,i){var n=t("./libs/jquery/dist/jquery.slim.min.js"),r=t("./libs/gsap/src/uncompressed/TweenMax.js"),s=t("./libs/scrollmagic/scrollmagic/uncompressed/ScrollMagic.js"),a=t("./libs/scrollmagic/scrollmagic/uncompressed/plugins/animation.gsap.js");e.exports=function(){a();var t=new s.Controller,e=r.to(n("#test"),.3,{scale:.7});new s.Scene({triggerElement:"#test",duration:300}).setTween(e).addTo(t)}},{"./libs/gsap/src/uncompressed/TweenMax.js":16,"./libs/jquery/dist/jquery.slim.min.js":18,"./libs/scrollmagic/scrollmagic/uncompressed/ScrollMagic.js":19,"./libs/scrollmagic/scrollmagic/uncompressed/plugins/animation.gsap.js":20}],5:[function(t,e,i){var n=t("./libs/jquery/dist/jquery.slim.min.js"),r=t("./stringToArray.js"),s=t("./tlSkillsHover.js");e.exports=function(t,e){function i(t){switch(t){case"strategy":l.progress(0).tweenTo(l.duration());break;case"identity":h.progress(0).tweenTo(h.duration());break;case"design":u.progress(0).tweenTo(u.duration());break;case"animation":c.progress(0).tweenTo(c.duration());break;case"dev":f.progress(0).tweenTo(f.duration())}}var a,o,l,h,u,c,f,p,d=n(".skill"),_=n(".dashes >span"),m=n(".wrapper-waves"),g=(n(".waves"),n(".wrapper-zigzags")),v=(n(".zigzags"),n(".slashes >span")),y=n(".dots >span");_.length&&(l=s(_.closest(".symbol").find(".hoverAnimation"),-36)),m.length&&(h=s(m.closest(".symbol").find(".hoverAnimation"),-34)),g.length&&(u=s(g.closest(".symbol").find(".hoverAnimation"),-38)),v.length&&(c=s(v.closest(".symbol").find(".hoverAnimation"),-33)),y.length&&(f=s(y.closest(".symbol").find(".hoverAnimation"),-35)),t.on("mouseenter",".skill",function(){a=n(this).data("skill"),i(a),e.each(function(){o=r(n(this).data("skill")),o.indexOf(a)<0&&(n(this).addClass("off"),TweenMax.to([n(this).find(".wrapper-bg-img"),n(this).find(".bg")],.2,{opacity:0}))})}).on("mouseleave",".skill",function(){e.removeClass("off"),p=n(this).find(".hoverAnimation"),TweenMax.to(p,.3,{scaleX:1,x:0}),TweenMax.to([n(".portfolio-item .wrapper-bg-img"),n(".portfolio-item .bg")],.2,{opacity:1})}),t.on("mouseenter",".portfolio-item",function(){o=r(n(this).data("skill")),d.each(function(){a=n(this).data("skill"),o.indexOf(a)<0?n(this).addClass("off"):i(a)})}).on("mouseleave",".portfolio-item",function(){d.removeClass("off"),p=n(".skill").find(".hoverAnimation"),TweenMax.set(p,{scaleX:1,x:0})})}},{"./libs/jquery/dist/jquery.slim.min.js":18,"./stringToArray.js":27,"./tlSkillsHover.js":28}],6:[function(t,e,i){var n=t("./libs/jquery/dist/jquery.slim.min.js"),r=t("./tlSkillsIn.js");e.exports=function(){var t=n(".dashes").find("> span"),e=n(".wrapper-waves"),i=n(".waves"),s=n(".wrapper-zigzags"),a=n(".zigzags"),o=n(".slashes").find(">span"),l=n(".dots").find(">span"),h=[];return t.length&&h.push(r(!0,t,!0).play()),e.length&&h.push(r(!1,i,e).play()),s.length&&h.push(r(!1,a,s).play()),o.length&&h.push(r(!0,o,!1).play()),l.length&&h.push(r(!0,l,!0).play()),h}},{"./libs/jquery/dist/jquery.slim.min.js":18,"./tlSkillsIn.js":29}],7:[function(t,e,i){var n=t("./libs/jquery/dist/jquery.slim.min.js"),r=t("./isMobile.min.js");window.requestAnimFrame=t("./requestAnimFrame.js");var s=t("./detectScrollDir.js");e.exports=function(t,e,i,a){function o(){t=n(document).scrollTop(),t!==l&&(h=s(t,l),a=n("#skillsHome"),i.hasClass("scrolled")&&t>a.data("top")&&a.is(":visible")?(a.addClass("fixed").removeClass("top"),h<0&&i.hasClass("off")&&a.addClass("top").addClass("down")):a.removeClass("fixed").removeClass("top").removeClass("down")),l=t,requestAnimFrame(o)}var l=t,h=0,u=!!e.hasClass("home");return u&&!r.any&&o(),u}},{"./detectScrollDir.js":11,"./isMobile.min.js":12,"./libs/jquery/dist/jquery.slim.min.js":18,"./requestAnimFrame.js":25}],8:[function(t,e,i){var n=t("./libs/jquery/dist/jquery.slim.min.js"),r=t("./stringToArray.js");e.exports=function(){var t,e=n("#writting"),i=r(e.data("text")),s=0,a=0;!function n(){t=i[a].slice(0,s++),e.html(t),t===i[a]?(a===i.length-1?a=0:a++,s=0,setTimeout(n,2e3)):setTimeout(n,70)}()}},{"./libs/jquery/dist/jquery.slim.min.js":18,"./stringToArray.js":27}],9:[function(t,e,i){var n=t("./libs/jquery/dist/jquery.slim.min.js");window.requestAnimFrame=t("./requestAnimFrame.js"),e.exports=function(t,e,i,r){function s(){a=n("#video"),t=n(document).scrollTop(),e.hasClass("home")&&(t>50?(a.addClass("off"),i.addClass("scrolled"),l.pause()):(a.removeClass("off"),l.play(),i.removeClass("scrolled"))),requestAnimFrame(s)}var a,o,l,h=!!e.hasClass("home");return h&&(o=document.getElementById("videoIframe"),l=new Vimeo.Player(o)),h&&s(),h}},{"./libs/jquery/dist/jquery.slim.min.js":18,"./requestAnimFrame.js":25}],10:[function(t,e,i){var n=t("./libs/jquery/dist/jquery.slim.min.js"),r=t("./libs/gsap/src/uncompressed/TweenMax.js");t("./libs/gsap/src/uncompressed/plugins/DrawSvgPlugin.js");e.exports=function(t,e){function i(){var t=n(".container-title");j.offset().top>t.offset().top+t.outerHeight()?M.addClass("big-z-index"):M.removeClass("big-z-index")}function s(t,e,i){w=T+1-y,b=w-(T+1-e),x=100*b/w,i?r.to(t.find("path"),1,{drawSVG:x+"%"}):r.set(t.find("path"),{drawSVG:x+"%"})}function a(){t=n(this).scrollTop(),S=j.offset().top,l.each(function(){c=n(this),f=c.data("top"),S>f?(c.hasClass("fixed")||r.fromTo(F,.5,{scale:.8},{scale:1,ease:Elastic.easeOut.config({strength:5})}),c.addClass("fixed"),v=c.data("year")):(c.hasClass("fixed")&&r.fromTo(F,.5,{scale:.8},{scale:1,ease:Elastic.easeOut.config({strength:5})}),c.removeClass("fixed"))}),v!=g&&(g=v,"now"===g?(E.html(g),s(D,T+1,!0)):(d=isNaN(parseInt(E.html()))?E.html():parseInt(E.html()),_=g-d,m=1,E.html(g),s(D,g,!0))),C=l.first().data("top"),k=l.last().data("top"),t+C<k?r.set(j,{position:"fixed",top:C+"px"}):r.set(j,{position:"absolute",top:k+1+"px"})}function o(){var t="";A.each(function(i){0===i&&(u=n(this).offset().top-50|0),p=n(this).data("year"),P=e>767?n(this).offset().top-50|0:n(this).offset().top-3|0,R="top:"+P+"px;",t+='<div class="year" data-top="'+P+'" style="'+R+'" data-year="'+n(this).data("year")+'"><span class="">'+p+"</span></div>"}),O.html(t),l=O.find(".year"),h=l.length,y=parseInt(l.eq(0).data("year")),T=parseInt(l.eq(-2).data("year")),j.css("top",u+"px"),r.set(D.find("path"),{drawSVG:"0%"})}var l,h,u,c,f,p,d,_,m,g,v,y,T,w,b,x,P,S,C,k,O=n("#year"),A=n("[data-year]"),R="",D=n("#yearSvg"),M=n(".container-year-landmark"),j=n(".year-landmark"),E=j.find("span"),F=j.find(".border-svg");o(),a(),i(),n(document).on("scroll",function(){a(),i()}),n(window).on("resize",function(){e=n(window).outerWidth(),o(),a(),i()})}},{"./libs/gsap/src/uncompressed/TweenMax.js":16,"./libs/gsap/src/uncompressed/plugins/DrawSvgPlugin.js":17,"./libs/jquery/dist/jquery.slim.min.js":18}],11:[function(t,e,i){e.exports=function(t,e,i){return i=t>e?-1:t<e?1:0}},{}],12:[function(t,e,i){!function(t){var i=/iPhone/i,n=/iPod/i,r=/iPad/i,s=/(?=.*\bAndroid\b)(?=.*\bMobile\b)/i,a=/Android/i,o=/(?=.*\bAndroid\b)(?=.*\bSD4930UR\b)/i,l=/(?=.*\bAndroid\b)(?=.*\b(?:KFOT|KFTT|KFJWI|KFJWA|KFSOWI|KFTHWI|KFTHWA|KFAPWI|KFAPWA|KFARWI|KFASWI|KFSAWI|KFSAWA)\b)/i,h=/IEMobile/i,u=/(?=.*\bWindows\b)(?=.*\bARM\b)/i,c=/BlackBerry/i,f=/BB10/i,p=/Opera Mini/i,d=/(CriOS|Chrome)(?=.*\bMobile\b)/i,_=/(?=.*\bFirefox\b)(?=.*\bMobile\b)/i,m=new RegExp("(?:Nexus 7|BNTV250|Kindle Fire|Silk|GT-P1000)","i"),g=function(t,e){return t.test(e)},v=function(t){var e=t||navigator.userAgent,v=e.split("[FBAN");return"undefined"!=typeof v[1]&&(e=v[0]),v=e.split("Twitter"),"undefined"!=typeof v[1]&&(e=v[0]),this.apple={phone:g(i,e),ipod:g(n,e),tablet:!g(i,e)&&g(r,e),device:g(i,e)||g(n,e)||g(r,e)},this.amazon={phone:g(o,e),tablet:!g(o,e)&&g(l,e),device:g(o,e)||g(l,e)},this.android={phone:g(o,e)||g(s,e),tablet:!g(o,e)&&!g(s,e)&&(g(l,e)||g(a,e)),device:g(o,e)||g(l,e)||g(s,e)||g(a,e)},this.windows={phone:g(h,e),tablet:g(u,e),device:g(h,e)||g(u,e)},this.other={blackberry:g(c,e),blackberry10:g(f,e),opera:g(p,e),firefox:g(_,e),chrome:g(d,e),device:g(c,e)||g(f,e)||g(p,e)||g(_,e)||g(d,e)},this.seven_inch=g(m,e),this.any=this.apple.device||this.android.device||this.windows.device||this.other.device||this.seven_inch,this.phone=this.apple.phone||this.android.phone||this.windows.phone,this.tablet=this.apple.tablet||this.android.tablet||this.windows.tablet,"undefined"==typeof window?this:void 0},y=function(){var t=new v;return t.Class=v,t};"undefined"!=typeof e&&e.exports&&"undefined"==typeof window?e.exports=v:"undefined"!=typeof e&&e.exports&&"undefined"!=typeof window?e.exports=y():"function"==typeof define&&define.amd?define("isMobile",[],t.isMobile=y()):t.isMobile=y()}(this)},{}],13:[function(t,e,i){!function(t,n){"object"==typeof i&&"object"==typeof e?e.exports=n():"function"==typeof define&&define.amd?define("Barba",[],n):"object"==typeof i?i.Barba=n():t.Barba=n()}(this,function(){return function(t){function e(n){if(i[n])return i[n].exports;var r=i[n]={exports:{},id:n,loaded:!1};return t[n].call(r.exports,r,r.exports,e),r.loaded=!0,r.exports}var i={};return e.m=t,e.c=i,e.p="http://localhost:8080/dist",e(0)}([function(t,e,i){"function"!=typeof Promise&&(window.Promise=i(1));var n={version:"0.0.10",BaseTransition:i(4),BaseView:i(6),BaseCache:i(8),Dispatcher:i(7),HistoryManager:i(9),Pjax:i(10),Prefetch:i(13),Utils:i(5)};t.exports=n},function(t,e,i){(function(e){!function(i){function n(){}function r(t,e){return function(){t.apply(e,arguments)}}function s(t){if("object"!=typeof this)throw new TypeError("Promises must be constructed via new");if("function"!=typeof t)throw new TypeError("not a function");this._state=0,this._handled=!1,this._value=void 0,this._deferreds=[],c(t,this)}function a(t,e){for(;3===t._state;)t=t._value;return 0===t._state?void t._deferreds.push(e):(t._handled=!0,void p(function(){var i=1===t._state?e.onFulfilled:e.onRejected;if(null===i)return void(1===t._state?o:l)(e.promise,t._value);var n;try{n=i(t._value)}catch(t){return void l(e.promise,t)}o(e.promise,n)}))}function o(t,e){try{if(e===t)throw new TypeError("A promise cannot be resolved with itself.");if(e&&("object"==typeof e||"function"==typeof e)){var i=e.then;if(e instanceof s)return t._state=3,t._value=e,void h(t);if("function"==typeof i)return void c(r(i,e),t)}t._state=1,t._value=e,h(t)}catch(e){l(t,e)}}function l(t,e){t._state=2,t._value=e,h(t)}function h(t){2===t._state&&0===t._deferreds.length&&p(function(){t._handled||d(t._value)});for(var e=0,i=t._deferreds.length;i>e;e++)a(t,t._deferreds[e]);t._deferreds=null}function u(t,e,i){this.onFulfilled="function"==typeof t?t:null,this.onRejected="function"==typeof e?e:null,this.promise=i}function c(t,e){var i=!1;try{t(function(t){i||(i=!0,o(e,t))},function(t){i||(i=!0,l(e,t))})}catch(t){if(i)return;i=!0,l(e,t)}}var f=setTimeout,p="function"==typeof e&&e||function(t){f(t,0)},d=function(t){"undefined"!=typeof console&&console&&console.warn("Possible Unhandled Promise Rejection:",t)};s.prototype.catch=function(t){return this.then(null,t)},s.prototype.then=function(t,e){var i=new this.constructor(n);return a(this,new u(t,e,i)),i},s.all=function(t){var e=Array.prototype.slice.call(t);return new s(function(t,i){function n(s,a){try{if(a&&("object"==typeof a||"function"==typeof a)){var o=a.then;if("function"==typeof o)return void o.call(a,function(t){n(s,t)},i)}e[s]=a,0===--r&&t(e)}catch(t){i(t)}}if(0===e.length)return t([]);for(var r=e.length,s=0;s<e.length;s++)n(s,e[s])})},s.resolve=function(t){return t&&"object"==typeof t&&t.constructor===s?t:new s(function(e){e(t)})},s.reject=function(t){return new s(function(e,i){i(t)})},s.race=function(t){return new s(function(e,i){for(var n=0,r=t.length;r>n;n++)t[n].then(e,i)})},s._setImmediateFn=function(t){p=t},s._setUnhandledRejectionFn=function(t){d=t},"undefined"!=typeof t&&t.exports?t.exports=s:i.Promise||(i.Promise=s)}(this)}).call(e,i(2).setImmediate)},function(t,e,i){(function(t,n){function r(t,e){this._id=t,this._clearFn=e}var s=i(3).nextTick,a=Function.prototype.apply,o=Array.prototype.slice,l={},h=0;e.setTimeout=function(){return new r(a.call(setTimeout,window,arguments),clearTimeout)},e.setInterval=function(){return new r(a.call(setInterval,window,arguments),clearInterval)},e.clearTimeout=e.clearInterval=function(t){t.close()},r.prototype.unref=r.prototype.ref=function(){},r.prototype.close=function(){this._clearFn.call(window,this._id)},e.enroll=function(t,e){clearTimeout(t._idleTimeoutId),t._idleTimeout=e},e.unenroll=function(t){clearTimeout(t._idleTimeoutId),t._idleTimeout=-1},e._unrefActive=e.active=function(t){clearTimeout(t._idleTimeoutId);var e=t._idleTimeout;e>=0&&(t._idleTimeoutId=setTimeout(function(){t._onTimeout&&t._onTimeout()},e))},e.setImmediate="function"==typeof t?t:function(t){var i=h++,n=!(arguments.length<2)&&o.call(arguments,1);return l[i]=!0,s(function(){l[i]&&(n?t.apply(null,n):t.call(null),e.clearImmediate(i))}),i},e.clearImmediate="function"==typeof n?n:function(t){delete l[t]}}).call(e,i(2).setImmediate,i(2).clearImmediate)},function(t,e){function i(){h&&a&&(h=!1,a.length?l=a.concat(l):u=-1,l.length&&n())}function n(){if(!h){var t=setTimeout(i);h=!0;for(var e=l.length;e;){for(a=l,l=[];++u<e;)a&&a[u].run();u=-1,e=l.length}a=null,h=!1,clearTimeout(t)}}function r(t,e){this.fun=t,this.array=e}function s(){}var a,o=t.exports={},l=[],h=!1,u=-1;o.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var i=1;i<arguments.length;i++)e[i-1]=arguments[i];l.push(new r(t,e)),1!==l.length||h||setTimeout(n,0)},r.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=s,o.addListener=s,o.once=s,o.off=s,o.removeListener=s,o.removeAllListeners=s,o.emit=s,o.binding=function(t){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(t){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(t,e,i){var n=i(5),r={oldContainer:void 0,newContainer:void 0,newContainerLoading:void 0,extend:function(t){return n.extend(this,t)},init:function(t,e){var i=this;return this.oldContainer=t,this._newContainerPromise=e,this.deferred=n.deferred(),this.newContainerReady=n.deferred(),this.newContainerLoading=this.newContainerReady.promise,this.start(),this._newContainerPromise.then(function(t){i.newContainer=t,i.newContainerReady.resolve()}),this.deferred.promise},done:function(){this.oldContainer.parentNode.removeChild(this.oldContainer),this.newContainer.style.visibility="visible",this.deferred.resolve()},start:function(){}};t.exports=r},function(t,e){var i={getCurrentUrl:function(){return window.location.protocol+"//"+window.location.host+window.location.pathname+window.location.search},cleanLink:function(t){return t.replace(/#.*/,"")},xhrTimeout:5e3,xhr:function(t){var e=this.deferred(),i=new XMLHttpRequest;return i.onreadystatechange=function(){return 4===i.readyState?200===i.status?e.resolve(i.responseText):e.reject(new Error("xhr: HTTP code is not 200")):void 0},i.ontimeout=function(){return e.reject(new Error("xhr: Timeout exceeded"))},i.open("GET",t),i.timeout=this.xhrTimeout,i.setRequestHeader("x-barba","yes"),i.send(),e.promise},extend:function(t,e){var i=Object.create(t);for(var n in e)e.hasOwnProperty(n)&&(i[n]=e[n]);return i},deferred:function(){return new function(){this.resolve=null,this.reject=null,this.promise=new Promise(function(t,e){this.resolve=t,this.reject=e}.bind(this))}},getPort:function(t){var e="undefined"!=typeof t?t:window.location.port,i=window.location.protocol;return""!=e?parseInt(e):"http:"===i?80:"https:"===i?443:void 0}};t.exports=i},function(t,e,i){var n=i(7),r=i(5),s={namespace:null,extend:function(t){return r.extend(this,t)},init:function(){var t=this;n.on("initStateChange",function(e,i){i&&i.namespace===t.namespace&&t.onLeave()}),n.on("newPageReady",function(e,i,n){t.container=n,e.namespace===t.namespace&&t.onEnter()}),n.on("transitionCompleted",function(e,i){e.namespace===t.namespace&&t.onEnterCompleted(),i&&i.namespace===t.namespace&&t.onLeaveCompleted()})},onEnter:function(){},onEnterCompleted:function(){},onLeave:function(){},onLeaveCompleted:function(){}};t.exports=s},function(t,e){var i={events:{},on:function(t,e){this.events[t]=this.events[t]||[],this.events[t].push(e)},off:function(t,e){t in this.events!=0&&this.events[t].splice(this.events[t].indexOf(e),1)},trigger:function(t){if(t in this.events!=0)for(var e=0;e<this.events[t].length;e++)this.events[t][e].apply(this,Array.prototype.slice.call(arguments,1))}};t.exports=i},function(t,e,i){var n=i(5),r={data:{},extend:function(t){return n.extend(this,t)},set:function(t,e){this.data[t]=e},get:function(t){return this.data[t]},reset:function(){this.data={}}};t.exports=r},function(t,e){var i={history:[],add:function(t,e){e||(e=void 0),this.history.push({url:t,namespace:e})},currentStatus:function(){return this.history[this.history.length-1]},prevStatus:function(){var t=this.history;return t.length<2?null:t[t.length-2]}};t.exports=i},function(t,e,i){var n=i(5),r=i(7),s=i(11),a=i(8),o=i(9),l=i(12),h={Dom:l,History:o,Cache:a,cacheEnabled:!0,transitionProgress:!1,ignoreClassLink:"no-barba",start:function(){this.init()},init:function(){var t=this.Dom.getContainer(),e=this.Dom.getWrapper();e.setAttribute("aria-live","polite"),this.History.add(this.getCurrentUrl(),this.Dom.getNamespace(t)),r.trigger("initStateChange",this.History.currentStatus()),r.trigger("newPageReady",this.History.currentStatus(),{},t),r.trigger("transitionCompleted",this.History.currentStatus()),this.bindEvents()},bindEvents:function(){document.addEventListener("click",this.onLinkClick.bind(this)),window.addEventListener("popstate",this.onStateChange.bind(this))},getCurrentUrl:function(){return n.cleanLink(n.getCurrentUrl())},goTo:function(t){window.history.pushState(null,null,t),this.onStateChange()},forceGoTo:function(t){window.location=t},load:function(t){var e,i=n.deferred(),r=this;return e=this.Cache.get(t),e||(e=n.xhr(t),this.Cache.set(t,e)),e.then(function(t){var e=r.Dom.parseResponse(t);r.Dom.putContainer(e),r.cacheEnabled||r.Cache.reset(),i.resolve(e)},function(){r.forceGoTo(t),i.reject()}),i.promise},onLinkClick:function(t){for(var e=t.target;e&&!e.href;)e=e.parentNode;this.preventCheck(t,e)&&(t.stopPropagation(),t.preventDefault(),r.trigger("linkClicked",e),this.goTo(e.href))},preventCheck:function(t,e){return!!(window.history.pushState&&e&&e.href)&&(!(t.which>1||t.metaKey||t.ctrlKey||t.shiftKey||t.altKey)&&((!e.target||"_blank"!==e.target)&&(window.location.protocol===e.protocol&&window.location.hostname===e.hostname&&(n.getPort()===n.getPort(e.port)&&(!(e.href.indexOf("#")>-1)&&(n.cleanLink(e.href)!=n.cleanLink(location.href)&&!e.classList.contains(this.ignoreClassLink)))))))},getTransition:function(){return s},onStateChange:function(){var t=this.getCurrentUrl();if(this.transitionProgress&&this.forceGoTo(t),this.History.currentStatus().url===t)return!1;this.History.add(t);var e=this.load(t),i=Object.create(this.getTransition());this.transitionProgress=!0,r.trigger("initStateChange",this.History.currentStatus(),this.History.prevStatus());var n=i.init(this.Dom.getContainer(),e);e.then(this.onNewContainerLoaded.bind(this)),n.then(this.onTransitionEnd.bind(this))},onNewContainerLoaded:function(t){var e=this.History.currentStatus();e.namespace=this.Dom.getNamespace(t),r.trigger("newPageReady",this.History.currentStatus(),this.History.prevStatus(),t)},onTransitionEnd:function(){this.transitionProgress=!1,r.trigger("transitionCompleted",this.History.currentStatus(),this.History.prevStatus())}};t.exports=h},function(t,e,i){var n=i(4),r=n.extend({start:function(){this.newContainerLoading.then(this.finish.bind(this))},finish:function(){document.body.scrollTop=0,this.done()}});t.exports=r},function(t,e){var i={dataNamespace:"namespace",wrapperId:"barba-wrapper",containerClass:"barba-container",parseResponse:function(t){var e=document.createElement("div");e.innerHTML=t;var i=e.querySelector("title");return i&&(document.title=i.textContent),this.getContainer(e)},getWrapper:function(){var t=document.getElementById(this.wrapperId);if(!t)throw new Error("Barba.js: wrapper not found!");return t},getContainer:function(t){if(t||(t=document.body),!t)throw new Error("Barba.js: DOM not ready!");var e=this.parseContainer(t);if(e&&e.jquery&&(e=e[0]),!e)throw new Error("Barba.js: no container found");return e},getNamespace:function(t){return t&&t.dataset?t.dataset[this.dataNamespace]:t?t.getAttribute("data-"+this.dataNamespace):null},putContainer:function(t){t.style.visibility="hidden";var e=this.getWrapper();e.appendChild(t)},parseContainer:function(t){return t.querySelector("."+this.containerClass)}};t.exports=i},function(t,e,i){var n=i(5),r=i(10),s={ignoreClassLink:"no-barba-prefetch",init:function(){return!!window.history.pushState&&(document.body.addEventListener("mouseover",this.onLinkEnter.bind(this)),void document.body.addEventListener("touchstart",this.onLinkEnter.bind(this)))},onLinkEnter:function(t){for(var e=t.target;e&&!e.href;)e=e.parentNode;if(e&&!e.classList.contains(this.ignoreClassLink)){var i=e.href;if(r.preventCheck(t,e)&&!r.Cache.get(i)){var s=n.xhr(i);r.Cache.set(i,s)}}}};t.exports=s}])})},{}],14:[function(t,e,i){(function(i){var n="undefined"!=typeof e&&e.exports&&"undefined"!=typeof i?i:this||window;(n._gsQueue||(n._gsQueue=[])).push(function(){"use strict";n._gsDefine("TimelineMax",["TimelineLite","TweenLite","easing.Ease"],function(t,e,i){var r=function(e){t.call(this,e),this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._cycle=0,this._yoyo=this.vars.yoyo===!0,this._dirty=!0},s=1e-10,a=e._internals,o=a.lazyTweens,l=a.lazyRender,h=n._gsDefine.globals,u=new i(null,null,1,0),c=r.prototype=new t;return c.constructor=r,c.kill()._gc=!1,r.version="1.19.0",c.invalidate=function(){return this._yoyo=this.vars.yoyo===!0,this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._uncache(!0),t.prototype.invalidate.call(this)},c.addCallback=function(t,i,n,r){return this.add(e.delayedCall(0,t,n,r),i)},c.removeCallback=function(t,e){if(t)if(null==e)this._kill(null,t);else for(var i=this.getTweensOf(t,!1),n=i.length,r=this._parseTimeOrLabel(e);--n>-1;)i[n]._startTime===r&&i[n]._enabled(!1,!1);return this},c.removePause=function(e){return this.removeCallback(t._internals.pauseCallback,e)},c.tweenTo=function(t,i){i=i||{};var n,r,s,a={ease:u,useFrames:this.usesFrames(),immediateRender:!1},o=i.repeat&&h.TweenMax||e;for(r in i)a[r]=i[r];return a.time=this._parseTimeOrLabel(t),n=Math.abs(Number(a.time)-this._time)/this._timeScale||.001,s=new o(this,n,a),a.onStart=function(){s.target.paused(!0),s.vars.time!==s.target.time()&&n===s.duration()&&s.duration(Math.abs(s.vars.time-s.target.time())/s.target._timeScale),i.onStart&&s._callback("onStart")},s},c.tweenFromTo=function(t,e,i){i=i||{},t=this._parseTimeOrLabel(t),i.startAt={onComplete:this.seek,onCompleteParams:[t],callbackScope:this},i.immediateRender=i.immediateRender!==!1;var n=this.tweenTo(e,i);return n.duration(Math.abs(n.vars.time-t)/this._timeScale||.001)},c.render=function(t,e,i){this._gc&&this._enabled(!0,!1);var n,r,a,h,u,c,f,p,d=this._dirty?this.totalDuration():this._totalDuration,_=this._duration,m=this._time,g=this._totalTime,v=this._startTime,y=this._timeScale,T=this._rawPrevTime,w=this._paused,b=this._cycle;if(t>=d-1e-7)this._locked||(this._totalTime=d,this._cycle=this._repeat),this._reversed||this._hasPausedChild()||(r=!0,h="onComplete",u=!!this._timeline.autoRemoveChildren,0===this._duration&&(t<=0&&t>=-1e-7||T<0||T===s)&&T!==t&&this._first&&(u=!0,T>s&&(h="onReverseComplete"))),this._rawPrevTime=this._duration||!e||t||this._rawPrevTime===t?t:s,this._yoyo&&0!==(1&this._cycle)?this._time=t=0:(this._time=_,t=_+1e-4);else if(t<1e-7)if(this._locked||(this._totalTime=this._cycle=0),this._time=0,(0!==m||0===_&&T!==s&&(T>0||t<0&&T>=0)&&!this._locked)&&(h="onReverseComplete",r=this._reversed),t<0)this._active=!1,this._timeline.autoRemoveChildren&&this._reversed?(u=r=!0,h="onReverseComplete"):T>=0&&this._first&&(u=!0),this._rawPrevTime=t;else{if(this._rawPrevTime=_||!e||t||this._rawPrevTime===t?t:s,0===t&&r)for(n=this._first;n&&0===n._startTime;)n._duration||(r=!1),n=n._next;t=0,this._initted||(u=!0)}else if(0===_&&T<0&&(u=!0),this._time=this._rawPrevTime=t,this._locked||(this._totalTime=t,0!==this._repeat&&(c=_+this._repeatDelay,this._cycle=this._totalTime/c>>0,0!==this._cycle&&this._cycle===this._totalTime/c&&g<=t&&this._cycle--,this._time=this._totalTime-this._cycle*c,this._yoyo&&0!==(1&this._cycle)&&(this._time=_-this._time),this._time>_?(this._time=_,t=_+1e-4):this._time<0?this._time=t=0:t=this._time)),this._hasPause&&!this._forcingPlayhead&&!e){if(t=this._time,t>=m)for(n=this._first;n&&n._startTime<=t&&!f;)n._duration||"isPause"!==n.data||n.ratio||0===n._startTime&&0===this._rawPrevTime||(f=n),n=n._next;else for(n=this._last;n&&n._startTime>=t&&!f;)n._duration||"isPause"===n.data&&n._rawPrevTime>0&&(f=n),n=n._prev;f&&(this._time=t=f._startTime,this._totalTime=t+this._cycle*(this._totalDuration+this._repeatDelay))}if(this._cycle!==b&&!this._locked){var x=this._yoyo&&0!==(1&b),P=x===(this._yoyo&&0!==(1&this._cycle)),S=this._totalTime,C=this._cycle,k=this._rawPrevTime,O=this._time;if(this._totalTime=b*_,this._cycle<b?x=!x:this._totalTime+=_,this._time=m,this._rawPrevTime=0===_?T-1e-4:T,this._cycle=b,this._locked=!0,m=x?0:_,this.render(m,e,0===_),e||this._gc||this.vars.onRepeat&&this._callback("onRepeat"),m!==this._time)return;if(P&&(m=x?_+1e-4:-1e-4,this.render(m,!0,!1)),this._locked=!1,this._paused&&!w)return;this._time=O,this._totalTime=S,this._cycle=C,this._rawPrevTime=k}if(!(this._time!==m&&this._first||i||u||f))return void(g!==this._totalTime&&this._onUpdate&&(e||this._callback("onUpdate")));if(this._initted||(this._initted=!0),this._active||!this._paused&&this._totalTime!==g&&t>0&&(this._active=!0),0===g&&this.vars.onStart&&(0===this._totalTime&&this._totalDuration||e||this._callback("onStart")),
p=this._time,p>=m)for(n=this._first;n&&(a=n._next,p===this._time&&(!this._paused||w));)(n._active||n._startTime<=this._time&&!n._paused&&!n._gc)&&(f===n&&this.pause(),n._reversed?n.render((n._dirty?n.totalDuration():n._totalDuration)-(t-n._startTime)*n._timeScale,e,i):n.render((t-n._startTime)*n._timeScale,e,i)),n=a;else for(n=this._last;n&&(a=n._prev,p===this._time&&(!this._paused||w));){if(n._active||n._startTime<=m&&!n._paused&&!n._gc){if(f===n){for(f=n._prev;f&&f.endTime()>this._time;)f.render(f._reversed?f.totalDuration()-(t-f._startTime)*f._timeScale:(t-f._startTime)*f._timeScale,e,i),f=f._prev;f=null,this.pause()}n._reversed?n.render((n._dirty?n.totalDuration():n._totalDuration)-(t-n._startTime)*n._timeScale,e,i):n.render((t-n._startTime)*n._timeScale,e,i)}n=a}this._onUpdate&&(e||(o.length&&l(),this._callback("onUpdate"))),h&&(this._locked||this._gc||v!==this._startTime&&y===this._timeScale||(0===this._time||d>=this.totalDuration())&&(r&&(o.length&&l(),this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[h]&&this._callback(h)))},c.getActive=function(t,e,i){null==t&&(t=!0),null==e&&(e=!0),null==i&&(i=!1);var n,r,s=[],a=this.getChildren(t,e,i),o=0,l=a.length;for(n=0;n<l;n++)r=a[n],r.isActive()&&(s[o++]=r);return s},c.getLabelAfter=function(t){t||0!==t&&(t=this._time);var e,i=this.getLabelsArray(),n=i.length;for(e=0;e<n;e++)if(i[e].time>t)return i[e].name;return null},c.getLabelBefore=function(t){null==t&&(t=this._time);for(var e=this.getLabelsArray(),i=e.length;--i>-1;)if(e[i].time<t)return e[i].name;return null},c.getLabelsArray=function(){var t,e=[],i=0;for(t in this._labels)e[i++]={time:this._labels[t],name:t};return e.sort(function(t,e){return t.time-e.time}),e},c.progress=function(t,e){return arguments.length?this.totalTime(this.duration()*(this._yoyo&&0!==(1&this._cycle)?1-t:t)+this._cycle*(this._duration+this._repeatDelay),e):this._time/this.duration()},c.totalProgress=function(t,e){return arguments.length?this.totalTime(this.totalDuration()*t,e):this._totalTime/this.totalDuration()},c.totalDuration=function(e){return arguments.length?this._repeat!==-1&&e?this.timeScale(this.totalDuration()/e):this:(this._dirty&&(t.prototype.totalDuration.call(this),this._totalDuration=this._repeat===-1?999999999999:this._duration*(this._repeat+1)+this._repeatDelay*this._repeat),this._totalDuration)},c.time=function(t,e){return arguments.length?(this._dirty&&this.totalDuration(),t>this._duration&&(t=this._duration),this._yoyo&&0!==(1&this._cycle)?t=this._duration-t+this._cycle*(this._duration+this._repeatDelay):0!==this._repeat&&(t+=this._cycle*(this._duration+this._repeatDelay)),this.totalTime(t,e)):this._time},c.repeat=function(t){return arguments.length?(this._repeat=t,this._uncache(!0)):this._repeat},c.repeatDelay=function(t){return arguments.length?(this._repeatDelay=t,this._uncache(!0)):this._repeatDelay},c.yoyo=function(t){return arguments.length?(this._yoyo=t,this):this._yoyo},c.currentLabel=function(t){return arguments.length?this.seek(t,!0):this.getLabelBefore(this._time+1e-8)},r},!0),n._gsDefine("TimelineLite",["core.Animation","core.SimpleTimeline","TweenLite"],function(t,e,i){var r=function(t){e.call(this,t),this._labels={},this.autoRemoveChildren=this.vars.autoRemoveChildren===!0,this.smoothChildTiming=this.vars.smoothChildTiming===!0,this._sortChildren=!0,this._onUpdate=this.vars.onUpdate;var i,n,r=this.vars;for(n in r)i=r[n],h(i)&&i.join("").indexOf("{self}")!==-1&&(r[n]=this._swapSelfInParams(i));h(r.tweens)&&this.add(r.tweens,0,r.align,r.stagger)},s=1e-10,a=i._internals,o=r._internals={},l=a.isSelector,h=a.isArray,u=a.lazyTweens,c=a.lazyRender,f=n._gsDefine.globals,p=function(t){var e,i={};for(e in t)i[e]=t[e];return i},d=function(t,e,i){var n,r,s=t.cycle;for(n in s)r=s[n],t[n]="function"==typeof r?r.call(e[i],i):r[i%r.length];delete t.cycle},_=o.pauseCallback=function(){},m=function(t){var e,i=[],n=t.length;for(e=0;e!==n;i.push(t[e++]));return i},g=r.prototype=new e;return r.version="1.19.0",g.constructor=r,g.kill()._gc=g._forcingPlayhead=g._hasPause=!1,g.to=function(t,e,n,r){var s=n.repeat&&f.TweenMax||i;return e?this.add(new s(t,e,n),r):this.set(t,n,r)},g.from=function(t,e,n,r){return this.add((n.repeat&&f.TweenMax||i).from(t,e,n),r)},g.fromTo=function(t,e,n,r,s){var a=r.repeat&&f.TweenMax||i;return e?this.add(a.fromTo(t,e,n,r),s):this.set(t,r,s)},g.staggerTo=function(t,e,n,s,a,o,h,u){var c,f,_=new r({onComplete:o,onCompleteParams:h,callbackScope:u,smoothChildTiming:this.smoothChildTiming}),g=n.cycle;for("string"==typeof t&&(t=i.selector(t)||t),t=t||[],l(t)&&(t=m(t)),s=s||0,s<0&&(t=m(t),t.reverse(),s*=-1),f=0;f<t.length;f++)c=p(n),c.startAt&&(c.startAt=p(c.startAt),c.startAt.cycle&&d(c.startAt,t,f)),g&&(d(c,t,f),null!=c.duration&&(e=c.duration,delete c.duration)),_.to(t[f],e,c,f*s);return this.add(_,a)},g.staggerFrom=function(t,e,i,n,r,s,a,o){return i.immediateRender=0!=i.immediateRender,i.runBackwards=!0,this.staggerTo(t,e,i,n,r,s,a,o)},g.staggerFromTo=function(t,e,i,n,r,s,a,o,l){return n.startAt=i,n.immediateRender=0!=n.immediateRender&&0!=i.immediateRender,this.staggerTo(t,e,n,r,s,a,o,l)},g.call=function(t,e,n,r){return this.add(i.delayedCall(0,t,e,n),r)},g.set=function(t,e,n){return n=this._parseTimeOrLabel(n,0,!0),null==e.immediateRender&&(e.immediateRender=n===this._time&&!this._paused),this.add(new i(t,0,e),n)},r.exportRoot=function(t,e){t=t||{},null==t.smoothChildTiming&&(t.smoothChildTiming=!0);var n,s,a=new r(t),o=a._timeline;for(null==e&&(e=!0),o._remove(a,!0),a._startTime=0,a._rawPrevTime=a._time=a._totalTime=o._time,n=o._first;n;)s=n._next,e&&n instanceof i&&n.target===n.vars.onComplete||a.add(n,n._startTime-n._delay),n=s;return o.add(a,0),a},g.add=function(n,s,a,o){var l,u,c,f,p,d;if("number"!=typeof s&&(s=this._parseTimeOrLabel(s,0,!0,n)),!(n instanceof t)){if(n instanceof Array||n&&n.push&&h(n)){for(a=a||"normal",o=o||0,l=s,u=n.length,c=0;c<u;c++)h(f=n[c])&&(f=new r({tweens:f})),this.add(f,l),"string"!=typeof f&&"function"!=typeof f&&("sequence"===a?l=f._startTime+f.totalDuration()/f._timeScale:"start"===a&&(f._startTime-=f.delay())),l+=o;return this._uncache(!0)}if("string"==typeof n)return this.addLabel(n,s);if("function"!=typeof n)throw"Cannot add "+n+" into the timeline; it is not a tween, timeline, function, or string.";n=i.delayedCall(0,n)}if(e.prototype.add.call(this,n,s),(this._gc||this._time===this._duration)&&!this._paused&&this._duration<this.duration())for(p=this,d=p.rawTime()>n._startTime;p._timeline;)d&&p._timeline.smoothChildTiming?p.totalTime(p._totalTime,!0):p._gc&&p._enabled(!0,!1),p=p._timeline;return this},g.remove=function(e){if(e instanceof t){this._remove(e,!1);var i=e._timeline=e.vars.useFrames?t._rootFramesTimeline:t._rootTimeline;return e._startTime=(e._paused?e._pauseTime:i._time)-(e._reversed?e.totalDuration()-e._totalTime:e._totalTime)/e._timeScale,this}if(e instanceof Array||e&&e.push&&h(e)){for(var n=e.length;--n>-1;)this.remove(e[n]);return this}return"string"==typeof e?this.removeLabel(e):this.kill(null,e)},g._remove=function(t,i){e.prototype._remove.call(this,t,i);var n=this._last;return n?this._time>n._startTime+n._totalDuration/n._timeScale&&(this._time=this.duration(),this._totalTime=this._totalDuration):this._time=this._totalTime=this._duration=this._totalDuration=0,this},g.append=function(t,e){return this.add(t,this._parseTimeOrLabel(null,e,!0,t))},g.insert=g.insertMultiple=function(t,e,i,n){return this.add(t,e||0,i,n)},g.appendMultiple=function(t,e,i,n){return this.add(t,this._parseTimeOrLabel(null,e,!0,t),i,n)},g.addLabel=function(t,e){return this._labels[t]=this._parseTimeOrLabel(e),this},g.addPause=function(t,e,n,r){var s=i.delayedCall(0,_,n,r||this);return s.vars.onComplete=s.vars.onReverseComplete=e,s.data="isPause",this._hasPause=!0,this.add(s,t)},g.removeLabel=function(t){return delete this._labels[t],this},g.getLabelTime=function(t){return null!=this._labels[t]?this._labels[t]:-1},g._parseTimeOrLabel=function(e,i,n,r){var s;if(r instanceof t&&r.timeline===this)this.remove(r);else if(r&&(r instanceof Array||r.push&&h(r)))for(s=r.length;--s>-1;)r[s]instanceof t&&r[s].timeline===this&&this.remove(r[s]);if("string"==typeof i)return this._parseTimeOrLabel(i,n&&"number"==typeof e&&null==this._labels[i]?e-this.duration():0,n);if(i=i||0,"string"!=typeof e||!isNaN(e)&&null==this._labels[e])null==e&&(e=this.duration());else{if(s=e.indexOf("="),s===-1)return null==this._labels[e]?n?this._labels[e]=this.duration()+i:i:this._labels[e]+i;i=parseInt(e.charAt(s-1)+"1",10)*Number(e.substr(s+1)),e=s>1?this._parseTimeOrLabel(e.substr(0,s-1),0,n):this.duration()}return Number(e)+i},g.seek=function(t,e){return this.totalTime("number"==typeof t?t:this._parseTimeOrLabel(t),e!==!1)},g.stop=function(){return this.paused(!0)},g.gotoAndPlay=function(t,e){return this.play(t,e)},g.gotoAndStop=function(t,e){return this.pause(t,e)},g.render=function(t,e,i){this._gc&&this._enabled(!0,!1);var n,r,a,o,l,h,f,p=this._dirty?this.totalDuration():this._totalDuration,d=this._time,_=this._startTime,m=this._timeScale,g=this._paused;if(t>=p-1e-7)this._totalTime=this._time=p,this._reversed||this._hasPausedChild()||(r=!0,o="onComplete",l=!!this._timeline.autoRemoveChildren,0===this._duration&&(t<=0&&t>=-1e-7||this._rawPrevTime<0||this._rawPrevTime===s)&&this._rawPrevTime!==t&&this._first&&(l=!0,this._rawPrevTime>s&&(o="onReverseComplete"))),this._rawPrevTime=this._duration||!e||t||this._rawPrevTime===t?t:s,t=p+1e-4;else if(t<1e-7)if(this._totalTime=this._time=0,(0!==d||0===this._duration&&this._rawPrevTime!==s&&(this._rawPrevTime>0||t<0&&this._rawPrevTime>=0))&&(o="onReverseComplete",r=this._reversed),t<0)this._active=!1,this._timeline.autoRemoveChildren&&this._reversed?(l=r=!0,o="onReverseComplete"):this._rawPrevTime>=0&&this._first&&(l=!0),this._rawPrevTime=t;else{if(this._rawPrevTime=this._duration||!e||t||this._rawPrevTime===t?t:s,0===t&&r)for(n=this._first;n&&0===n._startTime;)n._duration||(r=!1),n=n._next;t=0,this._initted||(l=!0)}else{if(this._hasPause&&!this._forcingPlayhead&&!e){if(t>=d)for(n=this._first;n&&n._startTime<=t&&!h;)n._duration||"isPause"!==n.data||n.ratio||0===n._startTime&&0===this._rawPrevTime||(h=n),n=n._next;else for(n=this._last;n&&n._startTime>=t&&!h;)n._duration||"isPause"===n.data&&n._rawPrevTime>0&&(h=n),n=n._prev;h&&(this._time=t=h._startTime,this._totalTime=t+this._cycle*(this._totalDuration+this._repeatDelay))}this._totalTime=this._time=this._rawPrevTime=t}if(this._time!==d&&this._first||i||l||h){if(this._initted||(this._initted=!0),this._active||!this._paused&&this._time!==d&&t>0&&(this._active=!0),0===d&&this.vars.onStart&&(0===this._time&&this._duration||e||this._callback("onStart")),f=this._time,f>=d)for(n=this._first;n&&(a=n._next,f===this._time&&(!this._paused||g));)(n._active||n._startTime<=f&&!n._paused&&!n._gc)&&(h===n&&this.pause(),n._reversed?n.render((n._dirty?n.totalDuration():n._totalDuration)-(t-n._startTime)*n._timeScale,e,i):n.render((t-n._startTime)*n._timeScale,e,i)),n=a;else for(n=this._last;n&&(a=n._prev,f===this._time&&(!this._paused||g));){if(n._active||n._startTime<=d&&!n._paused&&!n._gc){if(h===n){for(h=n._prev;h&&h.endTime()>this._time;)h.render(h._reversed?h.totalDuration()-(t-h._startTime)*h._timeScale:(t-h._startTime)*h._timeScale,e,i),h=h._prev;h=null,this.pause()}n._reversed?n.render((n._dirty?n.totalDuration():n._totalDuration)-(t-n._startTime)*n._timeScale,e,i):n.render((t-n._startTime)*n._timeScale,e,i)}n=a}this._onUpdate&&(e||(u.length&&c(),this._callback("onUpdate"))),o&&(this._gc||_!==this._startTime&&m===this._timeScale||(0===this._time||p>=this.totalDuration())&&(r&&(u.length&&c(),this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[o]&&this._callback(o)))}},g._hasPausedChild=function(){for(var t=this._first;t;){if(t._paused||t instanceof r&&t._hasPausedChild())return!0;t=t._next}return!1},g.getChildren=function(t,e,n,r){r=r||-9999999999;for(var s=[],a=this._first,o=0;a;)a._startTime<r||(a instanceof i?e!==!1&&(s[o++]=a):(n!==!1&&(s[o++]=a),t!==!1&&(s=s.concat(a.getChildren(!0,e,n)),o=s.length))),a=a._next;return s},g.getTweensOf=function(t,e){var n,r,s=this._gc,a=[],o=0;for(s&&this._enabled(!0,!0),n=i.getTweensOf(t),r=n.length;--r>-1;)(n[r].timeline===this||e&&this._contains(n[r]))&&(a[o++]=n[r]);return s&&this._enabled(!1,!0),a},g.recent=function(){return this._recent},g._contains=function(t){for(var e=t.timeline;e;){if(e===this)return!0;e=e.timeline}return!1},g.shiftChildren=function(t,e,i){i=i||0;for(var n,r=this._first,s=this._labels;r;)r._startTime>=i&&(r._startTime+=t),r=r._next;if(e)for(n in s)s[n]>=i&&(s[n]+=t);return this._uncache(!0)},g._kill=function(t,e){if(!t&&!e)return this._enabled(!1,!1);for(var i=e?this.getTweensOf(e):this.getChildren(!0,!0,!1),n=i.length,r=!1;--n>-1;)i[n]._kill(t,e)&&(r=!0);return r},g.clear=function(t){var e=this.getChildren(!1,!0,!0),i=e.length;for(this._time=this._totalTime=0;--i>-1;)e[i]._enabled(!1,!1);return t!==!1&&(this._labels={}),this._uncache(!0)},g.invalidate=function(){for(var e=this._first;e;)e.invalidate(),e=e._next;return t.prototype.invalidate.call(this)},g._enabled=function(t,i){if(t===this._gc)for(var n=this._first;n;)n._enabled(t,!0),n=n._next;return e.prototype._enabled.call(this,t,i)},g.totalTime=function(e,i,n){this._forcingPlayhead=!0;var r=t.prototype.totalTime.apply(this,arguments);return this._forcingPlayhead=!1,r},g.duration=function(t){return arguments.length?(0!==this.duration()&&0!==t&&this.timeScale(this._duration/t),this):(this._dirty&&this.totalDuration(),this._duration)},g.totalDuration=function(t){if(!arguments.length){if(this._dirty){for(var e,i,n=0,r=this._last,s=999999999999;r;)e=r._prev,r._dirty&&r.totalDuration(),r._startTime>s&&this._sortChildren&&!r._paused?this.add(r,r._startTime-r._delay):s=r._startTime,r._startTime<0&&!r._paused&&(n-=r._startTime,this._timeline.smoothChildTiming&&(this._startTime+=r._startTime/this._timeScale),this.shiftChildren(-r._startTime,!1,-9999999999),s=0),i=r._startTime+r._totalDuration/r._timeScale,i>n&&(n=i),r=e;this._duration=this._totalDuration=n,this._dirty=!1}return this._totalDuration}return t&&this.totalDuration()?this.timeScale(this._totalDuration/t):this},g.paused=function(e){if(!e)for(var i=this._first,n=this._time;i;)i._startTime===n&&"isPause"===i.data&&(i._rawPrevTime=0),i=i._next;return t.prototype.paused.apply(this,arguments)},g.usesFrames=function(){for(var e=this._timeline;e._timeline;)e=e._timeline;return e===t._rootFramesTimeline},g.rawTime=function(){return this._paused?this._totalTime:(this._timeline.rawTime()-this._startTime)*this._timeScale},r},!0)}),n._gsDefine&&n._gsQueue.pop()(),function(i){"use strict";var r=function(){return(n.GreenSockGlobals||n)[i]};"function"==typeof define&&define.amd?define(["TweenLite"],r):"undefined"!=typeof e&&e.exports&&(t("./TweenLite.js"),e.exports=r())}("TimelineMax")}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./TweenLite.js":15}],15:[function(t,e,i){(function(t){!function(t,i){"use strict";var n={},r=t.GreenSockGlobals=t.GreenSockGlobals||t;if(!r.TweenLite){var s,a,o,l,h,u=function(t){var e,i=t.split("."),n=r;for(e=0;e<i.length;e++)n[i[e]]=n=n[i[e]]||{};return n},c=u("com.greensock"),f=1e-10,p=function(t){var e,i=[],n=t.length;for(e=0;e!==n;i.push(t[e++]));return i},d=function(){},_=function(){var t=Object.prototype.toString,e=t.call([]);return function(i){return null!=i&&(i instanceof Array||"object"==typeof i&&!!i.push&&t.call(i)===e)}}(),m={},g=function(s,a,o,l){this.sc=m[s]?m[s].sc:[],m[s]=this,this.gsClass=null,this.func=o;var h=[];this.check=function(c){for(var f,p,d,_,v,y=a.length,T=y;--y>-1;)(f=m[a[y]]||new g(a[y],[])).gsClass?(h[y]=f.gsClass,T--):c&&f.sc.push(this);if(0===T&&o){if(p=("com.greensock."+s).split("."),d=p.pop(),_=u(p.join("."))[d]=this.gsClass=o.apply(o,h),l)if(r[d]=n[d]=_,v="undefined"!=typeof e&&e.exports,!v&&"function"==typeof define&&define.amd)define((t.GreenSockAMDPath?t.GreenSockAMDPath+"/":"")+s.split(".").pop(),[],function(){return _});else if(v)if(s===i){e.exports=n[i]=_;for(y in n)_[y]=n[y]}else n[i]&&(n[i][d]=_);for(y=0;y<this.sc.length;y++)this.sc[y].check()}},this.check(!0)},v=t._gsDefine=function(t,e,i,n){return new g(t,e,i,n)},y=c._class=function(t,e,i){return e=e||function(){},v(t,[],function(){return e},i),e};v.globals=r;var T=[0,0,1,1],w=y("easing.Ease",function(t,e,i,n){this._func=t,this._type=i||0,this._power=n||0,this._params=e?T.concat(e):T},!0),b=w.map={},x=w.register=function(t,e,i,n){for(var r,s,a,o,l=e.split(","),h=l.length,u=(i||"easeIn,easeOut,easeInOut").split(",");--h>-1;)for(s=l[h],r=n?y("easing."+s,null,!0):c.easing[s]||{},a=u.length;--a>-1;)o=u[a],b[s+"."+o]=b[o+s]=r[o]=t.getRatio?t:t[o]||new t};for(o=w.prototype,o._calcEnd=!1,o.getRatio=function(t){if(this._func)return this._params[0]=t,this._func.apply(null,this._params);var e=this._type,i=this._power,n=1===e?1-t:2===e?t:t<.5?2*t:2*(1-t);return 1===i?n*=n:2===i?n*=n*n:3===i?n*=n*n*n:4===i&&(n*=n*n*n*n),1===e?1-n:2===e?n:t<.5?n/2:1-n/2},s=["Linear","Quad","Cubic","Quart","Quint,Strong"],a=s.length;--a>-1;)o=s[a]+",Power"+a,x(new w(null,null,1,a),o,"easeOut",!0),x(new w(null,null,2,a),o,"easeIn"+(0===a?",easeNone":"")),x(new w(null,null,3,a),o,"easeInOut");b.linear=c.easing.Linear.easeIn,b.swing=c.easing.Quad.easeInOut;var P=y("events.EventDispatcher",function(t){this._listeners={},this._eventTarget=t||this});o=P.prototype,o.addEventListener=function(t,e,i,n,r){r=r||0;var s,a,o=this._listeners[t],u=0;for(this!==l||h||l.wake(),null==o&&(this._listeners[t]=o=[]),a=o.length;--a>-1;)s=o[a],s.c===e&&s.s===i?o.splice(a,1):0===u&&s.pr<r&&(u=a+1);o.splice(u,0,{c:e,s:i,up:n,pr:r})},o.removeEventListener=function(t,e){var i,n=this._listeners[t];if(n)for(i=n.length;--i>-1;)if(n[i].c===e)return void n.splice(i,1)},o.dispatchEvent=function(t){var e,i,n,r=this._listeners[t];if(r)for(e=r.length,e>1&&(r=r.slice(0)),i=this._eventTarget;--e>-1;)n=r[e],n&&(n.up?n.c.call(n.s||i,{type:t,target:i}):n.c.call(n.s||i))};var S=t.requestAnimationFrame,C=t.cancelAnimationFrame,k=Date.now||function(){return(new Date).getTime()},O=k();for(s=["ms","moz","webkit","o"],a=s.length;--a>-1&&!S;)S=t[s[a]+"RequestAnimationFrame"],C=t[s[a]+"CancelAnimationFrame"]||t[s[a]+"CancelRequestAnimationFrame"];y("Ticker",function(t,e){var i,n,r,s,a,o=this,u=k(),c=!(e===!1||!S)&&"auto",p=500,_=33,m="tick",g=function(t){var e,l,h=k()-O;h>p&&(u+=h-_),O+=h,o.time=(O-u)/1e3,e=o.time-a,(!i||e>0||t===!0)&&(o.frame++,a+=e+(e>=s?.004:s-e),l=!0),t!==!0&&(r=n(g)),l&&o.dispatchEvent(m)};P.call(o),o.time=o.frame=0,o.tick=function(){g(!0)},o.lagSmoothing=function(t,e){p=t||1/f,_=Math.min(e,p,0)},o.sleep=function(){null!=r&&(c&&C?C(r):clearTimeout(r),n=d,r=null,o===l&&(h=!1))},o.wake=function(t){null!==r?o.sleep():t?u+=-O+(O=k()):o.frame>10&&(O=k()-p+5),n=0===i?d:c&&S?S:function(t){return setTimeout(t,1e3*(a-o.time)+1|0)},o===l&&(h=!0),g(2)},o.fps=function(t){return arguments.length?(i=t,s=1/(i||60),a=this.time+s,void o.wake()):i},o.useRAF=function(t){return arguments.length?(o.sleep(),c=t,void o.fps(i)):c},o.fps(t),setTimeout(function(){"auto"===c&&o.frame<5&&"hidden"!==document.visibilityState&&o.useRAF(!1)},1500)}),o=c.Ticker.prototype=new c.events.EventDispatcher,o.constructor=c.Ticker;var A=y("core.Animation",function(t,e){if(this.vars=e=e||{},this._duration=this._totalDuration=t||0,this._delay=Number(e.delay)||0,this._timeScale=1,this._active=e.immediateRender===!0,this.data=e.data,this._reversed=e.reversed===!0,$){h||l.wake();var i=this.vars.useFrames?V:$;i.add(this,i._time),this.vars.paused&&this.paused(!0)}});l=A.ticker=new c.Ticker,o=A.prototype,o._dirty=o._gc=o._initted=o._paused=!1,o._totalTime=o._time=0,o._rawPrevTime=-1,o._next=o._last=o._onUpdate=o._timeline=o.timeline=null,o._paused=!1;var R=function(){h&&k()-O>2e3&&l.wake(),setTimeout(R,2e3)};R(),o.play=function(t,e){return null!=t&&this.seek(t,e),this.reversed(!1).paused(!1)},o.pause=function(t,e){return null!=t&&this.seek(t,e),this.paused(!0)},o.resume=function(t,e){return null!=t&&this.seek(t,e),this.paused(!1)},o.seek=function(t,e){return this.totalTime(Number(t),e!==!1)},o.restart=function(t,e){return this.reversed(!1).paused(!1).totalTime(t?-this._delay:0,e!==!1,!0)},o.reverse=function(t,e){return null!=t&&this.seek(t||this.totalDuration(),e),this.reversed(!0).paused(!1)},o.render=function(t,e,i){},o.invalidate=function(){return this._time=this._totalTime=0,this._initted=this._gc=!1,this._rawPrevTime=-1,!this._gc&&this.timeline||this._enabled(!0),this},o.isActive=function(){var t,e=this._timeline,i=this._startTime;return!e||!this._gc&&!this._paused&&e.isActive()&&(t=e.rawTime())>=i&&t<i+this.totalDuration()/this._timeScale},o._enabled=function(t,e){return h||l.wake(),this._gc=!t,this._active=this.isActive(),e!==!0&&(t&&!this.timeline?this._timeline.add(this,this._startTime-this._delay):!t&&this.timeline&&this._timeline._remove(this,!0)),!1},o._kill=function(t,e){return this._enabled(!1,!1)},o.kill=function(t,e){return this._kill(t,e),this},o._uncache=function(t){for(var e=t?this:this.timeline;e;)e._dirty=!0,e=e.timeline;return this},o._swapSelfInParams=function(t){for(var e=t.length,i=t.concat();--e>-1;)"{self}"===t[e]&&(i[e]=this);return i},o._callback=function(t){var e=this.vars,i=e[t],n=e[t+"Params"],r=e[t+"Scope"]||e.callbackScope||this,s=n?n.length:0;switch(s){case 0:i.call(r);break;case 1:i.call(r,n[0]);break;case 2:i.call(r,n[0],n[1]);break;default:i.apply(r,n)}},o.eventCallback=function(t,e,i,n){if("on"===(t||"").substr(0,2)){var r=this.vars;if(1===arguments.length)return r[t];null==e?delete r[t]:(r[t]=e,r[t+"Params"]=_(i)&&i.join("").indexOf("{self}")!==-1?this._swapSelfInParams(i):i,r[t+"Scope"]=n),"onUpdate"===t&&(this._onUpdate=e)}return this},o.delay=function(t){return arguments.length?(this._timeline.smoothChildTiming&&this.startTime(this._startTime+t-this._delay),this._delay=t,this):this._delay},o.duration=function(t){return arguments.length?(this._duration=this._totalDuration=t,this._uncache(!0),this._timeline.smoothChildTiming&&this._time>0&&this._time<this._duration&&0!==t&&this.totalTime(this._totalTime*(t/this._duration),!0),this):(this._dirty=!1,this._duration)},o.totalDuration=function(t){return this._dirty=!1,arguments.length?this.duration(t):this._totalDuration},o.time=function(t,e){return arguments.length?(this._dirty&&this.totalDuration(),this.totalTime(t>this._duration?this._duration:t,e)):this._time},o.totalTime=function(t,e,i){if(h||l.wake(),!arguments.length)return this._totalTime;if(this._timeline){if(t<0&&!i&&(t+=this.totalDuration()),this._timeline.smoothChildTiming){this._dirty&&this.totalDuration();var n=this._totalDuration,r=this._timeline;if(t>n&&!i&&(t=n),this._startTime=(this._paused?this._pauseTime:r._time)-(this._reversed?n-t:t)/this._timeScale,r._dirty||this._uncache(!1),r._timeline)for(;r._timeline;)r._timeline._time!==(r._startTime+r._totalTime)/r._timeScale&&r.totalTime(r._totalTime,!0),r=r._timeline}this._gc&&this._enabled(!0,!1),this._totalTime===t&&0!==this._duration||(F.length&&Q(),this.render(t,e,!1),F.length&&Q())}return this},o.progress=o.totalProgress=function(t,e){var i=this.duration();return arguments.length?this.totalTime(i*t,e):i?this._time/i:this.ratio},o.startTime=function(t){return arguments.length?(t!==this._startTime&&(this._startTime=t,this.timeline&&this.timeline._sortChildren&&this.timeline.add(this,t-this._delay)),this):this._startTime},o.endTime=function(t){return this._startTime+(0!=t?this.totalDuration():this.duration())/this._timeScale},o.timeScale=function(t){if(!arguments.length)return this._timeScale;if(t=t||f,this._timeline&&this._timeline.smoothChildTiming){var e=this._pauseTime,i=e||0===e?e:this._timeline.totalTime();this._startTime=i-(i-this._startTime)*this._timeScale/t}return this._timeScale=t,this._uncache(!1)},o.reversed=function(t){return arguments.length?(t!=this._reversed&&(this._reversed=t,this.totalTime(this._timeline&&!this._timeline.smoothChildTiming?this.totalDuration()-this._totalTime:this._totalTime,!0)),this):this._reversed},o.paused=function(t){if(!arguments.length)return this._paused;var e,i,n=this._timeline;return t!=this._paused&&n&&(h||t||l.wake(),e=n.rawTime(),i=e-this._pauseTime,!t&&n.smoothChildTiming&&(this._startTime+=i,this._uncache(!1)),this._pauseTime=t?e:null,this._paused=t,this._active=this.isActive(),!t&&0!==i&&this._initted&&this.duration()&&(e=n.smoothChildTiming?this._totalTime:(e-this._startTime)/this._timeScale,this.render(e,e===this._totalTime,!0))),this._gc&&!t&&this._enabled(!0,!1),this};var D=y("core.SimpleTimeline",function(t){A.call(this,0,t),this.autoRemoveChildren=this.smoothChildTiming=!0});o=D.prototype=new A,o.constructor=D,o.kill()._gc=!1,o._first=o._last=o._recent=null,o._sortChildren=!1,o.add=o.insert=function(t,e,i,n){var r,s;if(t._startTime=Number(e||0)+t._delay,t._paused&&this!==t._timeline&&(t._pauseTime=t._startTime+(this.rawTime()-t._startTime)/t._timeScale),t.timeline&&t.timeline._remove(t,!0),t.timeline=t._timeline=this,t._gc&&t._enabled(!0,!0),r=this._last,this._sortChildren)for(s=t._startTime;r&&r._startTime>s;)r=r._prev;return r?(t._next=r._next,r._next=t):(t._next=this._first,this._first=t),t._next?t._next._prev=t:this._last=t,t._prev=r,this._recent=t,this._timeline&&this._uncache(!0),this},o._remove=function(t,e){return t.timeline===this&&(e||t._enabled(!1,!0),t._prev?t._prev._next=t._next:this._first===t&&(this._first=t._next),t._next?t._next._prev=t._prev:this._last===t&&(this._last=t._prev),t._next=t._prev=t.timeline=null,t===this._recent&&(this._recent=this._last),this._timeline&&this._uncache(!0)),this},o.render=function(t,e,i){var n,r=this._first;for(this._totalTime=this._time=this._rawPrevTime=t;r;)n=r._next,(r._active||t>=r._startTime&&!r._paused)&&(r._reversed?r.render((r._dirty?r.totalDuration():r._totalDuration)-(t-r._startTime)*r._timeScale,e,i):r.render((t-r._startTime)*r._timeScale,e,i)),r=n},o.rawTime=function(){return h||l.wake(),this._totalTime};var M=y("TweenLite",function(e,i,n){if(A.call(this,i,n),this.render=M.prototype.render,null==e)throw"Cannot tween a null target.";this.target=e="string"!=typeof e?e:M.selector(e)||e;var r,s,a,o=e.jquery||e.length&&e!==t&&e[0]&&(e[0]===t||e[0].nodeType&&e[0].style&&!e.nodeType),l=this.vars.overwrite;if(this._overwrite=l=null==l?U[M.defaultOverwrite]:"number"==typeof l?l>>0:U[l],(o||e instanceof Array||e.push&&_(e))&&"number"!=typeof e[0])for(this._targets=a=p(e),this._propLookup=[],this._siblings=[],r=0;r<a.length;r++)s=a[r],s?"string"!=typeof s?s.length&&s!==t&&s[0]&&(s[0]===t||s[0].nodeType&&s[0].style&&!s.nodeType)?(a.splice(r--,1),this._targets=a=a.concat(p(s))):(this._siblings[r]=Z(s,this,!1),1===l&&this._siblings[r].length>1&&J(s,this,null,1,this._siblings[r])):(s=a[r--]=M.selector(s),"string"==typeof s&&a.splice(r+1,1)):a.splice(r--,1);else this._propLookup={},this._siblings=Z(e,this,!1),1===l&&this._siblings.length>1&&J(e,this,null,1,this._siblings);(this.vars.immediateRender||0===i&&0===this._delay&&this.vars.immediateRender!==!1)&&(this._time=-f,this.render(Math.min(0,-this._delay)))},!0),j=function(e){return e&&e.length&&e!==t&&e[0]&&(e[0]===t||e[0].nodeType&&e[0].style&&!e.nodeType)},E=function(t,e){var i,n={};for(i in t)W[i]||i in e&&"transform"!==i&&"x"!==i&&"y"!==i&&"width"!==i&&"height"!==i&&"className"!==i&&"border"!==i||!(!X[i]||X[i]&&X[i]._autoCSS)||(n[i]=t[i],delete t[i]);t.css=n};o=M.prototype=new A,o.constructor=M,o.kill()._gc=!1,o.ratio=0,o._firstPT=o._targets=o._overwrittenProps=o._startAt=null,o._notifyPluginsOfEnabled=o._lazy=!1,M.version="1.19.0",M.defaultEase=o._ease=new w(null,null,1,1),M.defaultOverwrite="auto",M.ticker=l,M.autoSleep=120,M.lagSmoothing=function(t,e){l.lagSmoothing(t,e)},M.selector=t.$||t.jQuery||function(e){var i=t.$||t.jQuery;return i?(M.selector=i,i(e)):"undefined"==typeof document?e:document.querySelectorAll?document.querySelectorAll(e):document.getElementById("#"===e.charAt(0)?e.substr(1):e)};var F=[],N={},L=/(?:(-|-=|\+=)?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/gi,I=function(t){for(var e,i=this._firstPT,n=1e-6;i;)e=i.blob?t?this.join(""):this.start:i.c*t+i.s,i.m?e=i.m(e,this._target||i.t):e<n&&e>-n&&(e=0),i.f?i.fp?i.t[i.p](i.fp,e):i.t[i.p](e):i.t[i.p]=e,i=i._next},z=function(t,e,i,n){var r,s,a,o,l,h,u,c=[t,e],f=0,p="",d=0;for(c.start=t,i&&(i(c),t=c[0],e=c[1]),c.length=0,r=t.match(L)||[],s=e.match(L)||[],n&&(n._next=null,n.blob=1,c._firstPT=c._applyPT=n),l=s.length,o=0;o<l;o++)u=s[o],h=e.substr(f,e.indexOf(u,f)-f),p+=h||!o?h:",",f+=h.length,d?d=(d+1)%5:"rgba("===h.substr(-5)&&(d=1),u===r[o]||r.length<=o?p+=u:(p&&(c.push(p),p=""),a=parseFloat(r[o]),c.push(a),c._firstPT={_next:c._firstPT,t:c,p:c.length-1,s:a,c:("="===u.charAt(1)?parseInt(u.charAt(0)+"1",10)*parseFloat(u.substr(2)):parseFloat(u)-a)||0,f:0,m:d&&d<4?Math.round:0}),f+=u.length;return p+=e.substr(f),p&&c.push(p),c.setRatio=I,c},q=function(t,e,i,n,r,s,a,o,l){"function"==typeof n&&(n=n(l||0,t));var h,u,c="get"===i?t[e]:i,f=typeof t[e],p="string"==typeof n&&"="===n.charAt(1),d={t:t,p:e,s:c,f:"function"===f,pg:0,n:r||e,m:s?"function"==typeof s?s:Math.round:0,pr:0,c:p?parseInt(n.charAt(0)+"1",10)*parseFloat(n.substr(2)):parseFloat(n)-c||0};if("number"!==f&&("function"===f&&"get"===i&&(u=e.indexOf("set")||"function"!=typeof t["get"+e.substr(3)]?e:"get"+e.substr(3),d.s=c=a?t[u](a):t[u]()),"string"==typeof c&&(a||isNaN(c))?(d.fp=a,h=z(c,n,o||M.defaultStringFilter,d),d={t:h,p:"setRatio",s:0,c:1,f:2,pg:0,n:r||e,pr:0,m:0}):p||(d.s=parseFloat(c),d.c=parseFloat(n)-d.s||0)),d.c)return(d._next=this._firstPT)&&(d._next._prev=d),this._firstPT=d,d},B=M._internals={isArray:_,isSelector:j,lazyTweens:F,blobDif:z},X=M._plugins={},Y=B.tweenLookup={},H=0,W=B.reservedProps={ease:1,delay:1,overwrite:1,onComplete:1,onCompleteParams:1,onCompleteScope:1,useFrames:1,runBackwards:1,startAt:1,onUpdate:1,onUpdateParams:1,onUpdateScope:1,onStart:1,onStartParams:1,onStartScope:1,onReverseComplete:1,onReverseCompleteParams:1,onReverseCompleteScope:1,onRepeat:1,onRepeatParams:1,onRepeatScope:1,easeParams:1,yoyo:1,immediateRender:1,repeat:1,repeatDelay:1,data:1,paused:1,reversed:1,autoCSS:1,lazy:1,onOverwrite:1,callbackScope:1,stringFilter:1,id:1},U={none:0,all:1,auto:2,concurrent:3,allOnStart:4,preexisting:5,true:1,false:0},V=A._rootFramesTimeline=new D,$=A._rootTimeline=new D,G=30,Q=B.lazyRender=function(){var t,e=F.length;for(N={};--e>-1;)t=F[e],t&&t._lazy!==!1&&(t.render(t._lazy[0],t._lazy[1],!0),t._lazy=!1);F.length=0};$._startTime=l.time,V._startTime=l.frame,$._active=V._active=!0,setTimeout(Q,1),A._updateRoot=M.render=function(){var t,e,i;if(F.length&&Q(),$.render((l.time-$._startTime)*$._timeScale,!1,!1),V.render((l.frame-V._startTime)*V._timeScale,!1,!1),F.length&&Q(),l.frame>=G){G=l.frame+(parseInt(M.autoSleep,10)||120);for(i in Y){for(e=Y[i].tweens,t=e.length;--t>-1;)e[t]._gc&&e.splice(t,1);0===e.length&&delete Y[i]}if(i=$._first,(!i||i._paused)&&M.autoSleep&&!V._first&&1===l._listeners.tick.length){for(;i&&i._paused;)i=i._next;i||l.sleep()}}},l.addEventListener("tick",A._updateRoot);var Z=function(t,e,i){var n,r,s=t._gsTweenID;if(Y[s||(t._gsTweenID=s="t"+H++)]||(Y[s]={target:t,tweens:[]}),e&&(n=Y[s].tweens,n[r=n.length]=e,i))for(;--r>-1;)n[r]===e&&n.splice(r,1);return Y[s].tweens},K=function(t,e,i,n){var r,s,a=t.vars.onOverwrite;return a&&(r=a(t,e,i,n)),a=M.onOverwrite,a&&(s=a(t,e,i,n)),r!==!1&&s!==!1},J=function(t,e,i,n,r){var s,a,o,l;if(1===n||n>=4){for(l=r.length,s=0;s<l;s++)if((o=r[s])!==e)o._gc||o._kill(null,t,e)&&(a=!0);else if(5===n)break;return a}var h,u=e._startTime+f,c=[],p=0,d=0===e._duration;for(s=r.length;--s>-1;)(o=r[s])===e||o._gc||o._paused||(o._timeline!==e._timeline?(h=h||tt(e,0,d),0===tt(o,h,d)&&(c[p++]=o)):o._startTime<=u&&o._startTime+o.totalDuration()/o._timeScale>u&&((d||!o._initted)&&u-o._startTime<=2e-10||(c[p++]=o)));for(s=p;--s>-1;)if(o=c[s],2===n&&o._kill(i,t,e)&&(a=!0),2!==n||!o._firstPT&&o._initted){if(2!==n&&!K(o,e))continue;o._enabled(!1,!1)&&(a=!0)}return a;
},tt=function(t,e,i){for(var n=t._timeline,r=n._timeScale,s=t._startTime;n._timeline;){if(s+=n._startTime,r*=n._timeScale,n._paused)return-100;n=n._timeline}return s/=r,s>e?s-e:i&&s===e||!t._initted&&s-e<2*f?f:(s+=t.totalDuration()/t._timeScale/r)>e+f?0:s-e-f};o._init=function(){var t,e,i,n,r,s,a=this.vars,o=this._overwrittenProps,l=this._duration,h=!!a.immediateRender,u=a.ease;if(a.startAt){this._startAt&&(this._startAt.render(-1,!0),this._startAt.kill()),r={};for(n in a.startAt)r[n]=a.startAt[n];if(r.overwrite=!1,r.immediateRender=!0,r.lazy=h&&a.lazy!==!1,r.startAt=r.delay=null,this._startAt=M.to(this.target,0,r),h)if(this._time>0)this._startAt=null;else if(0!==l)return}else if(a.runBackwards&&0!==l)if(this._startAt)this._startAt.render(-1,!0),this._startAt.kill(),this._startAt=null;else{0!==this._time&&(h=!1),i={};for(n in a)W[n]&&"autoCSS"!==n||(i[n]=a[n]);if(i.overwrite=0,i.data="isFromStart",i.lazy=h&&a.lazy!==!1,i.immediateRender=h,this._startAt=M.to(this.target,0,i),h){if(0===this._time)return}else this._startAt._init(),this._startAt._enabled(!1),this.vars.immediateRender&&(this._startAt=null)}if(this._ease=u=u?u instanceof w?u:"function"==typeof u?new w(u,a.easeParams):b[u]||M.defaultEase:M.defaultEase,a.easeParams instanceof Array&&u.config&&(this._ease=u.config.apply(u,a.easeParams)),this._easeType=this._ease._type,this._easePower=this._ease._power,this._firstPT=null,this._targets)for(s=this._targets.length,t=0;t<s;t++)this._initProps(this._targets[t],this._propLookup[t]={},this._siblings[t],o?o[t]:null,t)&&(e=!0);else e=this._initProps(this.target,this._propLookup,this._siblings,o,0);if(e&&M._onPluginEvent("_onInitAllProps",this),o&&(this._firstPT||"function"!=typeof this.target&&this._enabled(!1,!1)),a.runBackwards)for(i=this._firstPT;i;)i.s+=i.c,i.c=-i.c,i=i._next;this._onUpdate=a.onUpdate,this._initted=!0},o._initProps=function(e,i,n,r,s){var a,o,l,h,u,c;if(null==e)return!1;N[e._gsTweenID]&&Q(),this.vars.css||e.style&&e!==t&&e.nodeType&&X.css&&this.vars.autoCSS!==!1&&E(this.vars,e);for(a in this.vars)if(c=this.vars[a],W[a])c&&(c instanceof Array||c.push&&_(c))&&c.join("").indexOf("{self}")!==-1&&(this.vars[a]=c=this._swapSelfInParams(c,this));else if(X[a]&&(h=new X[a])._onInitTween(e,this.vars[a],this,s)){for(this._firstPT=u={_next:this._firstPT,t:h,p:"setRatio",s:0,c:1,f:1,n:a,pg:1,pr:h._priority,m:0},o=h._overwriteProps.length;--o>-1;)i[h._overwriteProps[o]]=this._firstPT;(h._priority||h._onInitAllProps)&&(l=!0),(h._onDisable||h._onEnable)&&(this._notifyPluginsOfEnabled=!0),u._next&&(u._next._prev=u)}else i[a]=q.call(this,e,a,"get",c,a,0,null,this.vars.stringFilter,s);return r&&this._kill(r,e)?this._initProps(e,i,n,r,s):this._overwrite>1&&this._firstPT&&n.length>1&&J(e,this,i,this._overwrite,n)?(this._kill(i,e),this._initProps(e,i,n,r,s)):(this._firstPT&&(this.vars.lazy!==!1&&this._duration||this.vars.lazy&&!this._duration)&&(N[e._gsTweenID]=!0),l)},o.render=function(t,e,i){var n,r,s,a,o=this._time,l=this._duration,h=this._rawPrevTime;if(t>=l-1e-7)this._totalTime=this._time=l,this.ratio=this._ease._calcEnd?this._ease.getRatio(1):1,this._reversed||(n=!0,r="onComplete",i=i||this._timeline.autoRemoveChildren),0===l&&(this._initted||!this.vars.lazy||i)&&(this._startTime===this._timeline._duration&&(t=0),(h<0||t<=0&&t>=-1e-7||h===f&&"isPause"!==this.data)&&h!==t&&(i=!0,h>f&&(r="onReverseComplete")),this._rawPrevTime=a=!e||t||h===t?t:f);else if(t<1e-7)this._totalTime=this._time=0,this.ratio=this._ease._calcEnd?this._ease.getRatio(0):0,(0!==o||0===l&&h>0)&&(r="onReverseComplete",n=this._reversed),t<0&&(this._active=!1,0===l&&(this._initted||!this.vars.lazy||i)&&(h>=0&&(h!==f||"isPause"!==this.data)&&(i=!0),this._rawPrevTime=a=!e||t||h===t?t:f)),this._initted||(i=!0);else if(this._totalTime=this._time=t,this._easeType){var u=t/l,c=this._easeType,p=this._easePower;(1===c||3===c&&u>=.5)&&(u=1-u),3===c&&(u*=2),1===p?u*=u:2===p?u*=u*u:3===p?u*=u*u*u:4===p&&(u*=u*u*u*u),1===c?this.ratio=1-u:2===c?this.ratio=u:t/l<.5?this.ratio=u/2:this.ratio=1-u/2}else this.ratio=this._ease.getRatio(t/l);if(this._time!==o||i){if(!this._initted){if(this._init(),!this._initted||this._gc)return;if(!i&&this._firstPT&&(this.vars.lazy!==!1&&this._duration||this.vars.lazy&&!this._duration))return this._time=this._totalTime=o,this._rawPrevTime=h,F.push(this),void(this._lazy=[t,e]);this._time&&!n?this.ratio=this._ease.getRatio(this._time/l):n&&this._ease._calcEnd&&(this.ratio=this._ease.getRatio(0===this._time?0:1))}for(this._lazy!==!1&&(this._lazy=!1),this._active||!this._paused&&this._time!==o&&t>=0&&(this._active=!0),0===o&&(this._startAt&&(t>=0?this._startAt.render(t,e,i):r||(r="_dummyGS")),this.vars.onStart&&(0===this._time&&0!==l||e||this._callback("onStart"))),s=this._firstPT;s;)s.f?s.t[s.p](s.c*this.ratio+s.s):s.t[s.p]=s.c*this.ratio+s.s,s=s._next;this._onUpdate&&(t<0&&this._startAt&&t!==-1e-4&&this._startAt.render(t,e,i),e||(this._time!==o||n||i)&&this._callback("onUpdate")),r&&(this._gc&&!i||(t<0&&this._startAt&&!this._onUpdate&&t!==-1e-4&&this._startAt.render(t,e,i),n&&(this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[r]&&this._callback(r),0===l&&this._rawPrevTime===f&&a!==f&&(this._rawPrevTime=0)))}},o._kill=function(t,e,i){if("all"===t&&(t=null),null==t&&(null==e||e===this.target))return this._lazy=!1,this._enabled(!1,!1);e="string"!=typeof e?e||this._targets||this.target:M.selector(e)||e;var n,r,s,a,o,l,h,u,c,f=i&&this._time&&i._startTime===this._startTime&&this._timeline===i._timeline;if((_(e)||j(e))&&"number"!=typeof e[0])for(n=e.length;--n>-1;)this._kill(t,e[n],i)&&(l=!0);else{if(this._targets){for(n=this._targets.length;--n>-1;)if(e===this._targets[n]){o=this._propLookup[n]||{},this._overwrittenProps=this._overwrittenProps||[],r=this._overwrittenProps[n]=t?this._overwrittenProps[n]||{}:"all";break}}else{if(e!==this.target)return!1;o=this._propLookup,r=this._overwrittenProps=t?this._overwrittenProps||{}:"all"}if(o){if(h=t||o,u=t!==r&&"all"!==r&&t!==o&&("object"!=typeof t||!t._tempKill),i&&(M.onOverwrite||this.vars.onOverwrite)){for(s in h)o[s]&&(c||(c=[]),c.push(s));if((c||!t)&&!K(this,i,e,c))return!1}for(s in h)(a=o[s])&&(f&&(a.f?a.t[a.p](a.s):a.t[a.p]=a.s,l=!0),a.pg&&a.t._kill(h)&&(l=!0),a.pg&&0!==a.t._overwriteProps.length||(a._prev?a._prev._next=a._next:a===this._firstPT&&(this._firstPT=a._next),a._next&&(a._next._prev=a._prev),a._next=a._prev=null),delete o[s]),u&&(r[s]=1);!this._firstPT&&this._initted&&this._enabled(!1,!1)}}return l},o.invalidate=function(){return this._notifyPluginsOfEnabled&&M._onPluginEvent("_onDisable",this),this._firstPT=this._overwrittenProps=this._startAt=this._onUpdate=null,this._notifyPluginsOfEnabled=this._active=this._lazy=!1,this._propLookup=this._targets?{}:[],A.prototype.invalidate.call(this),this.vars.immediateRender&&(this._time=-f,this.render(Math.min(0,-this._delay))),this},o._enabled=function(t,e){if(h||l.wake(),t&&this._gc){var i,n=this._targets;if(n)for(i=n.length;--i>-1;)this._siblings[i]=Z(n[i],this,!0);else this._siblings=Z(this.target,this,!0)}return A.prototype._enabled.call(this,t,e),!(!this._notifyPluginsOfEnabled||!this._firstPT)&&M._onPluginEvent(t?"_onEnable":"_onDisable",this)},M.to=function(t,e,i){return new M(t,e,i)},M.from=function(t,e,i){return i.runBackwards=!0,i.immediateRender=0!=i.immediateRender,new M(t,e,i)},M.fromTo=function(t,e,i,n){return n.startAt=i,n.immediateRender=0!=n.immediateRender&&0!=i.immediateRender,new M(t,e,n)},M.delayedCall=function(t,e,i,n,r){return new M(e,0,{delay:t,onComplete:e,onCompleteParams:i,callbackScope:n,onReverseComplete:e,onReverseCompleteParams:i,immediateRender:!1,lazy:!1,useFrames:r,overwrite:0})},M.set=function(t,e){return new M(t,0,e)},M.getTweensOf=function(t,e){if(null==t)return[];t="string"!=typeof t?t:M.selector(t)||t;var i,n,r,s;if((_(t)||j(t))&&"number"!=typeof t[0]){for(i=t.length,n=[];--i>-1;)n=n.concat(M.getTweensOf(t[i],e));for(i=n.length;--i>-1;)for(s=n[i],r=i;--r>-1;)s===n[r]&&n.splice(i,1)}else for(n=Z(t).concat(),i=n.length;--i>-1;)(n[i]._gc||e&&!n[i].isActive())&&n.splice(i,1);return n},M.killTweensOf=M.killDelayedCallsTo=function(t,e,i){"object"==typeof e&&(i=e,e=!1);for(var n=M.getTweensOf(t,e),r=n.length;--r>-1;)n[r]._kill(i,t)};var et=y("plugins.TweenPlugin",function(t,e){this._overwriteProps=(t||"").split(","),this._propName=this._overwriteProps[0],this._priority=e||0,this._super=et.prototype},!0);if(o=et.prototype,et.version="1.19.0",et.API=2,o._firstPT=null,o._addTween=q,o.setRatio=I,o._kill=function(t){var e,i=this._overwriteProps,n=this._firstPT;if(null!=t[this._propName])this._overwriteProps=[];else for(e=i.length;--e>-1;)null!=t[i[e]]&&i.splice(e,1);for(;n;)null!=t[n.n]&&(n._next&&(n._next._prev=n._prev),n._prev?(n._prev._next=n._next,n._prev=null):this._firstPT===n&&(this._firstPT=n._next)),n=n._next;return!1},o._mod=o._roundProps=function(t){for(var e,i=this._firstPT;i;)e=t[this._propName]||null!=i.n&&t[i.n.split(this._propName+"_").join("")],e&&"function"==typeof e&&(2===i.f?i.t._applyPT.m=e:i.m=e),i=i._next},M._onPluginEvent=function(t,e){var i,n,r,s,a,o=e._firstPT;if("_onInitAllProps"===t){for(;o;){for(a=o._next,n=r;n&&n.pr>o.pr;)n=n._next;(o._prev=n?n._prev:s)?o._prev._next=o:r=o,(o._next=n)?n._prev=o:s=o,o=a}o=e._firstPT=r}for(;o;)o.pg&&"function"==typeof o.t[t]&&o.t[t]()&&(i=!0),o=o._next;return i},et.activate=function(t){for(var e=t.length;--e>-1;)t[e].API===et.API&&(X[(new t[e])._propName]=t[e]);return!0},v.plugin=function(t){if(!(t&&t.propName&&t.init&&t.API))throw"illegal plugin definition.";var e,i=t.propName,n=t.priority||0,r=t.overwriteProps,s={init:"_onInitTween",set:"setRatio",kill:"_kill",round:"_mod",mod:"_mod",initAll:"_onInitAllProps"},a=y("plugins."+i.charAt(0).toUpperCase()+i.substr(1)+"Plugin",function(){et.call(this,i,n),this._overwriteProps=r||[]},t.global===!0),o=a.prototype=new et(i);o.constructor=a,a.API=t.API;for(e in s)"function"==typeof t[e]&&(o[s[e]]=t[e]);return a.version=t.version,et.activate([a]),a},s=t._gsQueue){for(a=0;a<s.length;a++)s[a]();for(o in m)m[o].func||t.console.log("GSAP encountered missing dependency: "+o)}h=!1}}("undefined"!=typeof e&&e.exports&&"undefined"!=typeof t?t:this||window,"TweenLite")}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],16:[function(t,e,i){(function(t){var i="undefined"!=typeof e&&e.exports&&"undefined"!=typeof t?t:this||window;(i._gsQueue||(i._gsQueue=[])).push(function(){"use strict";i._gsDefine("TweenMax",["core.Animation","core.SimpleTimeline","TweenLite"],function(t,e,i){var n=function(t){var e,i=[],n=t.length;for(e=0;e!==n;i.push(t[e++]));return i},r=function(t,e,i){var n,r,s=t.cycle;for(n in s)r=s[n],t[n]="function"==typeof r?r(i,e[i]):r[i%r.length];delete t.cycle},s=function(t,e,n){i.call(this,t,e,n),this._cycle=0,this._yoyo=this.vars.yoyo===!0,this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._dirty=!0,this.render=s.prototype.render},a=1e-10,o=i._internals,l=o.isSelector,h=o.isArray,u=s.prototype=i.to({},.1,{}),c=[];s.version="1.19.0",u.constructor=s,u.kill()._gc=!1,s.killTweensOf=s.killDelayedCallsTo=i.killTweensOf,s.getTweensOf=i.getTweensOf,s.lagSmoothing=i.lagSmoothing,s.ticker=i.ticker,s.render=i.render,u.invalidate=function(){return this._yoyo=this.vars.yoyo===!0,this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._uncache(!0),i.prototype.invalidate.call(this)},u.updateTo=function(t,e){var n,r=this.ratio,s=this.vars.immediateRender||t.immediateRender;e&&this._startTime<this._timeline._time&&(this._startTime=this._timeline._time,this._uncache(!1),this._gc?this._enabled(!0,!1):this._timeline.insert(this,this._startTime-this._delay));for(n in t)this.vars[n]=t[n];if(this._initted||s)if(e)this._initted=!1,s&&this.render(0,!0,!0);else if(this._gc&&this._enabled(!0,!1),this._notifyPluginsOfEnabled&&this._firstPT&&i._onPluginEvent("_onDisable",this),this._time/this._duration>.998){var a=this._totalTime;this.render(0,!0,!1),this._initted=!1,this.render(a,!0,!1)}else if(this._initted=!1,this._init(),this._time>0||s)for(var o,l=1/(1-r),h=this._firstPT;h;)o=h.s+h.c,h.c*=l,h.s=o-h.c,h=h._next;return this},u.render=function(t,e,i){this._initted||0===this._duration&&this.vars.repeat&&this.invalidate();var n,r,s,l,h,u,c,f,p=this._dirty?this.totalDuration():this._totalDuration,d=this._time,_=this._totalTime,m=this._cycle,g=this._duration,v=this._rawPrevTime;if(t>=p-1e-7?(this._totalTime=p,this._cycle=this._repeat,this._yoyo&&0!==(1&this._cycle)?(this._time=0,this.ratio=this._ease._calcEnd?this._ease.getRatio(0):0):(this._time=g,this.ratio=this._ease._calcEnd?this._ease.getRatio(1):1),this._reversed||(n=!0,r="onComplete",i=i||this._timeline.autoRemoveChildren),0===g&&(this._initted||!this.vars.lazy||i)&&(this._startTime===this._timeline._duration&&(t=0),(v<0||t<=0&&t>=-1e-7||v===a&&"isPause"!==this.data)&&v!==t&&(i=!0,v>a&&(r="onReverseComplete")),this._rawPrevTime=f=!e||t||v===t?t:a)):t<1e-7?(this._totalTime=this._time=this._cycle=0,this.ratio=this._ease._calcEnd?this._ease.getRatio(0):0,(0!==_||0===g&&v>0)&&(r="onReverseComplete",n=this._reversed),t<0&&(this._active=!1,0===g&&(this._initted||!this.vars.lazy||i)&&(v>=0&&(i=!0),this._rawPrevTime=f=!e||t||v===t?t:a)),this._initted||(i=!0)):(this._totalTime=this._time=t,0!==this._repeat&&(l=g+this._repeatDelay,this._cycle=this._totalTime/l>>0,0!==this._cycle&&this._cycle===this._totalTime/l&&_<=t&&this._cycle--,this._time=this._totalTime-this._cycle*l,this._yoyo&&0!==(1&this._cycle)&&(this._time=g-this._time),this._time>g?this._time=g:this._time<0&&(this._time=0)),this._easeType?(h=this._time/g,u=this._easeType,c=this._easePower,(1===u||3===u&&h>=.5)&&(h=1-h),3===u&&(h*=2),1===c?h*=h:2===c?h*=h*h:3===c?h*=h*h*h:4===c&&(h*=h*h*h*h),1===u?this.ratio=1-h:2===u?this.ratio=h:this._time/g<.5?this.ratio=h/2:this.ratio=1-h/2):this.ratio=this._ease.getRatio(this._time/g)),d===this._time&&!i&&m===this._cycle)return void(_!==this._totalTime&&this._onUpdate&&(e||this._callback("onUpdate")));if(!this._initted){if(this._init(),!this._initted||this._gc)return;if(!i&&this._firstPT&&(this.vars.lazy!==!1&&this._duration||this.vars.lazy&&!this._duration))return this._time=d,this._totalTime=_,this._rawPrevTime=v,this._cycle=m,o.lazyTweens.push(this),void(this._lazy=[t,e]);this._time&&!n?this.ratio=this._ease.getRatio(this._time/g):n&&this._ease._calcEnd&&(this.ratio=this._ease.getRatio(0===this._time?0:1))}for(this._lazy!==!1&&(this._lazy=!1),this._active||!this._paused&&this._time!==d&&t>=0&&(this._active=!0),0===_&&(2===this._initted&&t>0&&this._init(),this._startAt&&(t>=0?this._startAt.render(t,e,i):r||(r="_dummyGS")),this.vars.onStart&&(0===this._totalTime&&0!==g||e||this._callback("onStart"))),s=this._firstPT;s;)s.f?s.t[s.p](s.c*this.ratio+s.s):s.t[s.p]=s.c*this.ratio+s.s,s=s._next;this._onUpdate&&(t<0&&this._startAt&&this._startTime&&this._startAt.render(t,e,i),e||(this._totalTime!==_||r)&&this._callback("onUpdate")),this._cycle!==m&&(e||this._gc||this.vars.onRepeat&&this._callback("onRepeat")),r&&(this._gc&&!i||(t<0&&this._startAt&&!this._onUpdate&&this._startTime&&this._startAt.render(t,e,i),n&&(this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[r]&&this._callback(r),0===g&&this._rawPrevTime===a&&f!==a&&(this._rawPrevTime=0)))},s.to=function(t,e,i){return new s(t,e,i)},s.from=function(t,e,i){return i.runBackwards=!0,i.immediateRender=0!=i.immediateRender,new s(t,e,i)},s.fromTo=function(t,e,i,n){return n.startAt=i,n.immediateRender=0!=n.immediateRender&&0!=i.immediateRender,new s(t,e,n)},s.staggerTo=s.allTo=function(t,e,a,o,u,f,p){o=o||0;var d,_,m,g,v=0,y=[],T=function(){a.onComplete&&a.onComplete.apply(a.onCompleteScope||this,arguments),u.apply(p||a.callbackScope||this,f||c)},w=a.cycle,b=a.startAt&&a.startAt.cycle;for(h(t)||("string"==typeof t&&(t=i.selector(t)||t),l(t)&&(t=n(t))),t=t||[],o<0&&(t=n(t),t.reverse(),o*=-1),d=t.length-1,m=0;m<=d;m++){_={};for(g in a)_[g]=a[g];if(w&&(r(_,t,m),null!=_.duration&&(e=_.duration,delete _.duration)),b){b=_.startAt={};for(g in a.startAt)b[g]=a.startAt[g];r(_.startAt,t,m)}_.delay=v+(_.delay||0),m===d&&u&&(_.onComplete=T),y[m]=new s(t[m],e,_),v+=o}return y},s.staggerFrom=s.allFrom=function(t,e,i,n,r,a,o){return i.runBackwards=!0,i.immediateRender=0!=i.immediateRender,s.staggerTo(t,e,i,n,r,a,o)},s.staggerFromTo=s.allFromTo=function(t,e,i,n,r,a,o,l){return n.startAt=i,n.immediateRender=0!=n.immediateRender&&0!=i.immediateRender,s.staggerTo(t,e,n,r,a,o,l)},s.delayedCall=function(t,e,i,n,r){return new s(e,0,{delay:t,onComplete:e,onCompleteParams:i,callbackScope:n,onReverseComplete:e,onReverseCompleteParams:i,immediateRender:!1,useFrames:r,overwrite:0})},s.set=function(t,e){return new s(t,0,e)},s.isTweening=function(t){return i.getTweensOf(t,!0).length>0};var f=function(t,e){for(var n=[],r=0,s=t._first;s;)s instanceof i?n[r++]=s:(e&&(n[r++]=s),n=n.concat(f(s,e)),r=n.length),s=s._next;return n},p=s.getAllTweens=function(e){return f(t._rootTimeline,e).concat(f(t._rootFramesTimeline,e))};s.killAll=function(t,i,n,r){null==i&&(i=!0),null==n&&(n=!0);var s,a,o,l=p(0!=r),h=l.length,u=i&&n&&r;for(o=0;o<h;o++)a=l[o],(u||a instanceof e||(s=a.target===a.vars.onComplete)&&n||i&&!s)&&(t?a.totalTime(a._reversed?0:a.totalDuration()):a._enabled(!1,!1))},s.killChildTweensOf=function(t,e){if(null!=t){var r,a,u,c,f,p=o.tweenLookup;if("string"==typeof t&&(t=i.selector(t)||t),l(t)&&(t=n(t)),h(t))for(c=t.length;--c>-1;)s.killChildTweensOf(t[c],e);else{r=[];for(u in p)for(a=p[u].target.parentNode;a;)a===t&&(r=r.concat(p[u].tweens)),a=a.parentNode;for(f=r.length,c=0;c<f;c++)e&&r[c].totalTime(r[c].totalDuration()),r[c]._enabled(!1,!1)}}};var d=function(t,i,n,r){i=i!==!1,n=n!==!1,r=r!==!1;for(var s,a,o=p(r),l=i&&n&&r,h=o.length;--h>-1;)a=o[h],(l||a instanceof e||(s=a.target===a.vars.onComplete)&&n||i&&!s)&&a.paused(t)};return s.pauseAll=function(t,e,i){d(!0,t,e,i)},s.resumeAll=function(t,e,i){d(!1,t,e,i)},s.globalTimeScale=function(e){var n=t._rootTimeline,r=i.ticker.time;return arguments.length?(e=e||a,n._startTime=r-(r-n._startTime)*n._timeScale/e,n=t._rootFramesTimeline,r=i.ticker.frame,n._startTime=r-(r-n._startTime)*n._timeScale/e,n._timeScale=t._rootTimeline._timeScale=e,e):n._timeScale},u.progress=function(t,e){return arguments.length?this.totalTime(this.duration()*(this._yoyo&&0!==(1&this._cycle)?1-t:t)+this._cycle*(this._duration+this._repeatDelay),e):this._time/this.duration()},u.totalProgress=function(t,e){return arguments.length?this.totalTime(this.totalDuration()*t,e):this._totalTime/this.totalDuration()},u.time=function(t,e){return arguments.length?(this._dirty&&this.totalDuration(),t>this._duration&&(t=this._duration),this._yoyo&&0!==(1&this._cycle)?t=this._duration-t+this._cycle*(this._duration+this._repeatDelay):0!==this._repeat&&(t+=this._cycle*(this._duration+this._repeatDelay)),this.totalTime(t,e)):this._time},u.duration=function(e){return arguments.length?t.prototype.duration.call(this,e):this._duration},u.totalDuration=function(t){return arguments.length?this._repeat===-1?this:this.duration((t-this._repeat*this._repeatDelay)/(this._repeat+1)):(this._dirty&&(this._totalDuration=this._repeat===-1?999999999999:this._duration*(this._repeat+1)+this._repeatDelay*this._repeat,this._dirty=!1),this._totalDuration)},u.repeat=function(t){return arguments.length?(this._repeat=t,this._uncache(!0)):this._repeat},u.repeatDelay=function(t){return arguments.length?(this._repeatDelay=t,this._uncache(!0)):this._repeatDelay},u.yoyo=function(t){return arguments.length?(this._yoyo=t,this):this._yoyo},s},!0),i._gsDefine("TimelineLite",["core.Animation","core.SimpleTimeline","TweenLite"],function(t,e,n){var r=function(t){e.call(this,t),this._labels={},this.autoRemoveChildren=this.vars.autoRemoveChildren===!0,this.smoothChildTiming=this.vars.smoothChildTiming===!0,this._sortChildren=!0,this._onUpdate=this.vars.onUpdate;var i,n,r=this.vars;for(n in r)i=r[n],h(i)&&i.join("").indexOf("{self}")!==-1&&(r[n]=this._swapSelfInParams(i));h(r.tweens)&&this.add(r.tweens,0,r.align,r.stagger)},s=1e-10,a=n._internals,o=r._internals={},l=a.isSelector,h=a.isArray,u=a.lazyTweens,c=a.lazyRender,f=i._gsDefine.globals,p=function(t){var e,i={};for(e in t)i[e]=t[e];return i},d=function(t,e,i){var n,r,s=t.cycle;for(n in s)r=s[n],t[n]="function"==typeof r?r.call(e[i],i):r[i%r.length];delete t.cycle},_=o.pauseCallback=function(){},m=function(t){var e,i=[],n=t.length;for(e=0;e!==n;i.push(t[e++]));return i},g=r.prototype=new e;return r.version="1.19.0",g.constructor=r,g.kill()._gc=g._forcingPlayhead=g._hasPause=!1,g.to=function(t,e,i,r){var s=i.repeat&&f.TweenMax||n;return e?this.add(new s(t,e,i),r):this.set(t,i,r)},g.from=function(t,e,i,r){return this.add((i.repeat&&f.TweenMax||n).from(t,e,i),r)},g.fromTo=function(t,e,i,r,s){var a=r.repeat&&f.TweenMax||n;return e?this.add(a.fromTo(t,e,i,r),s):this.set(t,r,s)},g.staggerTo=function(t,e,i,s,a,o,h,u){var c,f,_=new r({onComplete:o,onCompleteParams:h,callbackScope:u,smoothChildTiming:this.smoothChildTiming}),g=i.cycle;for("string"==typeof t&&(t=n.selector(t)||t),t=t||[],l(t)&&(t=m(t)),s=s||0,s<0&&(t=m(t),t.reverse(),s*=-1),f=0;f<t.length;f++)c=p(i),c.startAt&&(c.startAt=p(c.startAt),c.startAt.cycle&&d(c.startAt,t,f)),g&&(d(c,t,f),null!=c.duration&&(e=c.duration,delete c.duration)),_.to(t[f],e,c,f*s);return this.add(_,a)},g.staggerFrom=function(t,e,i,n,r,s,a,o){return i.immediateRender=0!=i.immediateRender,i.runBackwards=!0,this.staggerTo(t,e,i,n,r,s,a,o)},g.staggerFromTo=function(t,e,i,n,r,s,a,o,l){return n.startAt=i,n.immediateRender=0!=n.immediateRender&&0!=i.immediateRender,this.staggerTo(t,e,n,r,s,a,o,l)},g.call=function(t,e,i,r){return this.add(n.delayedCall(0,t,e,i),r)},g.set=function(t,e,i){return i=this._parseTimeOrLabel(i,0,!0),null==e.immediateRender&&(e.immediateRender=i===this._time&&!this._paused),this.add(new n(t,0,e),i)},r.exportRoot=function(t,e){t=t||{},null==t.smoothChildTiming&&(t.smoothChildTiming=!0);var i,s,a=new r(t),o=a._timeline;for(null==e&&(e=!0),o._remove(a,!0),a._startTime=0,a._rawPrevTime=a._time=a._totalTime=o._time,i=o._first;i;)s=i._next,e&&i instanceof n&&i.target===i.vars.onComplete||a.add(i,i._startTime-i._delay),i=s;return o.add(a,0),a},g.add=function(i,s,a,o){var l,u,c,f,p,d;if("number"!=typeof s&&(s=this._parseTimeOrLabel(s,0,!0,i)),!(i instanceof t)){if(i instanceof Array||i&&i.push&&h(i)){for(a=a||"normal",o=o||0,l=s,u=i.length,c=0;c<u;c++)h(f=i[c])&&(f=new r({tweens:f})),this.add(f,l),"string"!=typeof f&&"function"!=typeof f&&("sequence"===a?l=f._startTime+f.totalDuration()/f._timeScale:"start"===a&&(f._startTime-=f.delay())),l+=o;return this._uncache(!0)}if("string"==typeof i)return this.addLabel(i,s);if("function"!=typeof i)throw"Cannot add "+i+" into the timeline; it is not a tween, timeline, function, or string.";i=n.delayedCall(0,i)}if(e.prototype.add.call(this,i,s),(this._gc||this._time===this._duration)&&!this._paused&&this._duration<this.duration())for(p=this,d=p.rawTime()>i._startTime;p._timeline;)d&&p._timeline.smoothChildTiming?p.totalTime(p._totalTime,!0):p._gc&&p._enabled(!0,!1),p=p._timeline;return this},g.remove=function(e){if(e instanceof t){this._remove(e,!1);var i=e._timeline=e.vars.useFrames?t._rootFramesTimeline:t._rootTimeline;return e._startTime=(e._paused?e._pauseTime:i._time)-(e._reversed?e.totalDuration()-e._totalTime:e._totalTime)/e._timeScale,this}if(e instanceof Array||e&&e.push&&h(e)){for(var n=e.length;--n>-1;)this.remove(e[n]);return this}return"string"==typeof e?this.removeLabel(e):this.kill(null,e)},g._remove=function(t,i){e.prototype._remove.call(this,t,i);var n=this._last;return n?this._time>n._startTime+n._totalDuration/n._timeScale&&(this._time=this.duration(),this._totalTime=this._totalDuration):this._time=this._totalTime=this._duration=this._totalDuration=0,this},g.append=function(t,e){return this.add(t,this._parseTimeOrLabel(null,e,!0,t))},g.insert=g.insertMultiple=function(t,e,i,n){return this.add(t,e||0,i,n)},g.appendMultiple=function(t,e,i,n){return this.add(t,this._parseTimeOrLabel(null,e,!0,t),i,n)},g.addLabel=function(t,e){return this._labels[t]=this._parseTimeOrLabel(e),this},g.addPause=function(t,e,i,r){var s=n.delayedCall(0,_,i,r||this);return s.vars.onComplete=s.vars.onReverseComplete=e,s.data="isPause",this._hasPause=!0,this.add(s,t)},g.removeLabel=function(t){return delete this._labels[t],this},g.getLabelTime=function(t){return null!=this._labels[t]?this._labels[t]:-1},g._parseTimeOrLabel=function(e,i,n,r){var s;if(r instanceof t&&r.timeline===this)this.remove(r);else if(r&&(r instanceof Array||r.push&&h(r)))for(s=r.length;--s>-1;)r[s]instanceof t&&r[s].timeline===this&&this.remove(r[s]);if("string"==typeof i)return this._parseTimeOrLabel(i,n&&"number"==typeof e&&null==this._labels[i]?e-this.duration():0,n);if(i=i||0,"string"!=typeof e||!isNaN(e)&&null==this._labels[e])null==e&&(e=this.duration());else{if(s=e.indexOf("="),s===-1)return null==this._labels[e]?n?this._labels[e]=this.duration()+i:i:this._labels[e]+i;i=parseInt(e.charAt(s-1)+"1",10)*Number(e.substr(s+1)),e=s>1?this._parseTimeOrLabel(e.substr(0,s-1),0,n):this.duration()}return Number(e)+i},g.seek=function(t,e){return this.totalTime("number"==typeof t?t:this._parseTimeOrLabel(t),e!==!1)},g.stop=function(){return this.paused(!0)},g.gotoAndPlay=function(t,e){return this.play(t,e)},g.gotoAndStop=function(t,e){return this.pause(t,e)},g.render=function(t,e,i){this._gc&&this._enabled(!0,!1);var n,r,a,o,l,h,f,p=this._dirty?this.totalDuration():this._totalDuration,d=this._time,_=this._startTime,m=this._timeScale,g=this._paused;if(t>=p-1e-7)this._totalTime=this._time=p,this._reversed||this._hasPausedChild()||(r=!0,o="onComplete",l=!!this._timeline.autoRemoveChildren,0===this._duration&&(t<=0&&t>=-1e-7||this._rawPrevTime<0||this._rawPrevTime===s)&&this._rawPrevTime!==t&&this._first&&(l=!0,this._rawPrevTime>s&&(o="onReverseComplete"))),this._rawPrevTime=this._duration||!e||t||this._rawPrevTime===t?t:s,t=p+1e-4;else if(t<1e-7)if(this._totalTime=this._time=0,(0!==d||0===this._duration&&this._rawPrevTime!==s&&(this._rawPrevTime>0||t<0&&this._rawPrevTime>=0))&&(o="onReverseComplete",r=this._reversed),t<0)this._active=!1,this._timeline.autoRemoveChildren&&this._reversed?(l=r=!0,o="onReverseComplete"):this._rawPrevTime>=0&&this._first&&(l=!0),this._rawPrevTime=t;else{if(this._rawPrevTime=this._duration||!e||t||this._rawPrevTime===t?t:s,0===t&&r)for(n=this._first;n&&0===n._startTime;)n._duration||(r=!1),n=n._next;t=0,this._initted||(l=!0)}else{if(this._hasPause&&!this._forcingPlayhead&&!e){if(t>=d)for(n=this._first;n&&n._startTime<=t&&!h;)n._duration||"isPause"!==n.data||n.ratio||0===n._startTime&&0===this._rawPrevTime||(h=n),n=n._next;else for(n=this._last;n&&n._startTime>=t&&!h;)n._duration||"isPause"===n.data&&n._rawPrevTime>0&&(h=n),n=n._prev;h&&(this._time=t=h._startTime,this._totalTime=t+this._cycle*(this._totalDuration+this._repeatDelay))}this._totalTime=this._time=this._rawPrevTime=t}if(this._time!==d&&this._first||i||l||h){if(this._initted||(this._initted=!0),this._active||!this._paused&&this._time!==d&&t>0&&(this._active=!0),0===d&&this.vars.onStart&&(0===this._time&&this._duration||e||this._callback("onStart")),f=this._time,f>=d)for(n=this._first;n&&(a=n._next,f===this._time&&(!this._paused||g));)(n._active||n._startTime<=f&&!n._paused&&!n._gc)&&(h===n&&this.pause(),n._reversed?n.render((n._dirty?n.totalDuration():n._totalDuration)-(t-n._startTime)*n._timeScale,e,i):n.render((t-n._startTime)*n._timeScale,e,i)),n=a;else for(n=this._last;n&&(a=n._prev,f===this._time&&(!this._paused||g));){if(n._active||n._startTime<=d&&!n._paused&&!n._gc){if(h===n){for(h=n._prev;h&&h.endTime()>this._time;)h.render(h._reversed?h.totalDuration()-(t-h._startTime)*h._timeScale:(t-h._startTime)*h._timeScale,e,i),h=h._prev;h=null,this.pause()}n._reversed?n.render((n._dirty?n.totalDuration():n._totalDuration)-(t-n._startTime)*n._timeScale,e,i):n.render((t-n._startTime)*n._timeScale,e,i)}n=a}this._onUpdate&&(e||(u.length&&c(),this._callback("onUpdate"))),o&&(this._gc||_!==this._startTime&&m===this._timeScale||(0===this._time||p>=this.totalDuration())&&(r&&(u.length&&c(),this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[o]&&this._callback(o)))}},g._hasPausedChild=function(){for(var t=this._first;t;){if(t._paused||t instanceof r&&t._hasPausedChild())return!0;t=t._next}return!1},g.getChildren=function(t,e,i,r){r=r||-9999999999;for(var s=[],a=this._first,o=0;a;)a._startTime<r||(a instanceof n?e!==!1&&(s[o++]=a):(i!==!1&&(s[o++]=a),t!==!1&&(s=s.concat(a.getChildren(!0,e,i)),o=s.length))),a=a._next;return s},g.getTweensOf=function(t,e){var i,r,s=this._gc,a=[],o=0;for(s&&this._enabled(!0,!0),i=n.getTweensOf(t),r=i.length;--r>-1;)(i[r].timeline===this||e&&this._contains(i[r]))&&(a[o++]=i[r]);return s&&this._enabled(!1,!0),a},g.recent=function(){return this._recent},g._contains=function(t){for(var e=t.timeline;e;){if(e===this)return!0;e=e.timeline}return!1},g.shiftChildren=function(t,e,i){i=i||0;for(var n,r=this._first,s=this._labels;r;)r._startTime>=i&&(r._startTime+=t),r=r._next;if(e)for(n in s)s[n]>=i&&(s[n]+=t);return this._uncache(!0)},g._kill=function(t,e){if(!t&&!e)return this._enabled(!1,!1);for(var i=e?this.getTweensOf(e):this.getChildren(!0,!0,!1),n=i.length,r=!1;--n>-1;)i[n]._kill(t,e)&&(r=!0);return r},g.clear=function(t){var e=this.getChildren(!1,!0,!0),i=e.length;for(this._time=this._totalTime=0;--i>-1;)e[i]._enabled(!1,!1);return t!==!1&&(this._labels={}),this._uncache(!0)},g.invalidate=function(){for(var e=this._first;e;)e.invalidate(),e=e._next;return t.prototype.invalidate.call(this)},g._enabled=function(t,i){if(t===this._gc)for(var n=this._first;n;)n._enabled(t,!0),n=n._next;return e.prototype._enabled.call(this,t,i)},g.totalTime=function(e,i,n){this._forcingPlayhead=!0;var r=t.prototype.totalTime.apply(this,arguments);return this._forcingPlayhead=!1,r},g.duration=function(t){return arguments.length?(0!==this.duration()&&0!==t&&this.timeScale(this._duration/t),this):(this._dirty&&this.totalDuration(),this._duration)},g.totalDuration=function(t){if(!arguments.length){if(this._dirty){for(var e,i,n=0,r=this._last,s=999999999999;r;)e=r._prev,r._dirty&&r.totalDuration(),r._startTime>s&&this._sortChildren&&!r._paused?this.add(r,r._startTime-r._delay):s=r._startTime,r._startTime<0&&!r._paused&&(n-=r._startTime,this._timeline.smoothChildTiming&&(this._startTime+=r._startTime/this._timeScale),this.shiftChildren(-r._startTime,!1,-9999999999),s=0),i=r._startTime+r._totalDuration/r._timeScale,i>n&&(n=i),r=e;this._duration=this._totalDuration=n,this._dirty=!1}return this._totalDuration}return t&&this.totalDuration()?this.timeScale(this._totalDuration/t):this},g.paused=function(e){if(!e)for(var i=this._first,n=this._time;i;)i._startTime===n&&"isPause"===i.data&&(i._rawPrevTime=0),i=i._next;return t.prototype.paused.apply(this,arguments)},g.usesFrames=function(){for(var e=this._timeline;e._timeline;)e=e._timeline;return e===t._rootFramesTimeline},g.rawTime=function(){return this._paused?this._totalTime:(this._timeline.rawTime()-this._startTime)*this._timeScale},r},!0),i._gsDefine("TimelineMax",["TimelineLite","TweenLite","easing.Ease"],function(t,e,n){var r=function(e){t.call(this,e),this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._cycle=0,this._yoyo=this.vars.yoyo===!0,this._dirty=!0},s=1e-10,a=e._internals,o=a.lazyTweens,l=a.lazyRender,h=i._gsDefine.globals,u=new n(null,null,1,0),c=r.prototype=new t;return c.constructor=r,c.kill()._gc=!1,r.version="1.19.0",c.invalidate=function(){return this._yoyo=this.vars.yoyo===!0,this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._uncache(!0),t.prototype.invalidate.call(this)},c.addCallback=function(t,i,n,r){return this.add(e.delayedCall(0,t,n,r),i)},c.removeCallback=function(t,e){if(t)if(null==e)this._kill(null,t);else for(var i=this.getTweensOf(t,!1),n=i.length,r=this._parseTimeOrLabel(e);--n>-1;)i[n]._startTime===r&&i[n]._enabled(!1,!1);
return this},c.removePause=function(e){return this.removeCallback(t._internals.pauseCallback,e)},c.tweenTo=function(t,i){i=i||{};var n,r,s,a={ease:u,useFrames:this.usesFrames(),immediateRender:!1},o=i.repeat&&h.TweenMax||e;for(r in i)a[r]=i[r];return a.time=this._parseTimeOrLabel(t),n=Math.abs(Number(a.time)-this._time)/this._timeScale||.001,s=new o(this,n,a),a.onStart=function(){s.target.paused(!0),s.vars.time!==s.target.time()&&n===s.duration()&&s.duration(Math.abs(s.vars.time-s.target.time())/s.target._timeScale),i.onStart&&s._callback("onStart")},s},c.tweenFromTo=function(t,e,i){i=i||{},t=this._parseTimeOrLabel(t),i.startAt={onComplete:this.seek,onCompleteParams:[t],callbackScope:this},i.immediateRender=i.immediateRender!==!1;var n=this.tweenTo(e,i);return n.duration(Math.abs(n.vars.time-t)/this._timeScale||.001)},c.render=function(t,e,i){this._gc&&this._enabled(!0,!1);var n,r,a,h,u,c,f,p,d=this._dirty?this.totalDuration():this._totalDuration,_=this._duration,m=this._time,g=this._totalTime,v=this._startTime,y=this._timeScale,T=this._rawPrevTime,w=this._paused,b=this._cycle;if(t>=d-1e-7)this._locked||(this._totalTime=d,this._cycle=this._repeat),this._reversed||this._hasPausedChild()||(r=!0,h="onComplete",u=!!this._timeline.autoRemoveChildren,0===this._duration&&(t<=0&&t>=-1e-7||T<0||T===s)&&T!==t&&this._first&&(u=!0,T>s&&(h="onReverseComplete"))),this._rawPrevTime=this._duration||!e||t||this._rawPrevTime===t?t:s,this._yoyo&&0!==(1&this._cycle)?this._time=t=0:(this._time=_,t=_+1e-4);else if(t<1e-7)if(this._locked||(this._totalTime=this._cycle=0),this._time=0,(0!==m||0===_&&T!==s&&(T>0||t<0&&T>=0)&&!this._locked)&&(h="onReverseComplete",r=this._reversed),t<0)this._active=!1,this._timeline.autoRemoveChildren&&this._reversed?(u=r=!0,h="onReverseComplete"):T>=0&&this._first&&(u=!0),this._rawPrevTime=t;else{if(this._rawPrevTime=_||!e||t||this._rawPrevTime===t?t:s,0===t&&r)for(n=this._first;n&&0===n._startTime;)n._duration||(r=!1),n=n._next;t=0,this._initted||(u=!0)}else if(0===_&&T<0&&(u=!0),this._time=this._rawPrevTime=t,this._locked||(this._totalTime=t,0!==this._repeat&&(c=_+this._repeatDelay,this._cycle=this._totalTime/c>>0,0!==this._cycle&&this._cycle===this._totalTime/c&&g<=t&&this._cycle--,this._time=this._totalTime-this._cycle*c,this._yoyo&&0!==(1&this._cycle)&&(this._time=_-this._time),this._time>_?(this._time=_,t=_+1e-4):this._time<0?this._time=t=0:t=this._time)),this._hasPause&&!this._forcingPlayhead&&!e){if(t=this._time,t>=m)for(n=this._first;n&&n._startTime<=t&&!f;)n._duration||"isPause"!==n.data||n.ratio||0===n._startTime&&0===this._rawPrevTime||(f=n),n=n._next;else for(n=this._last;n&&n._startTime>=t&&!f;)n._duration||"isPause"===n.data&&n._rawPrevTime>0&&(f=n),n=n._prev;f&&(this._time=t=f._startTime,this._totalTime=t+this._cycle*(this._totalDuration+this._repeatDelay))}if(this._cycle!==b&&!this._locked){var x=this._yoyo&&0!==(1&b),P=x===(this._yoyo&&0!==(1&this._cycle)),S=this._totalTime,C=this._cycle,k=this._rawPrevTime,O=this._time;if(this._totalTime=b*_,this._cycle<b?x=!x:this._totalTime+=_,this._time=m,this._rawPrevTime=0===_?T-1e-4:T,this._cycle=b,this._locked=!0,m=x?0:_,this.render(m,e,0===_),e||this._gc||this.vars.onRepeat&&this._callback("onRepeat"),m!==this._time)return;if(P&&(m=x?_+1e-4:-1e-4,this.render(m,!0,!1)),this._locked=!1,this._paused&&!w)return;this._time=O,this._totalTime=S,this._cycle=C,this._rawPrevTime=k}if(!(this._time!==m&&this._first||i||u||f))return void(g!==this._totalTime&&this._onUpdate&&(e||this._callback("onUpdate")));if(this._initted||(this._initted=!0),this._active||!this._paused&&this._totalTime!==g&&t>0&&(this._active=!0),0===g&&this.vars.onStart&&(0===this._totalTime&&this._totalDuration||e||this._callback("onStart")),p=this._time,p>=m)for(n=this._first;n&&(a=n._next,p===this._time&&(!this._paused||w));)(n._active||n._startTime<=this._time&&!n._paused&&!n._gc)&&(f===n&&this.pause(),n._reversed?n.render((n._dirty?n.totalDuration():n._totalDuration)-(t-n._startTime)*n._timeScale,e,i):n.render((t-n._startTime)*n._timeScale,e,i)),n=a;else for(n=this._last;n&&(a=n._prev,p===this._time&&(!this._paused||w));){if(n._active||n._startTime<=m&&!n._paused&&!n._gc){if(f===n){for(f=n._prev;f&&f.endTime()>this._time;)f.render(f._reversed?f.totalDuration()-(t-f._startTime)*f._timeScale:(t-f._startTime)*f._timeScale,e,i),f=f._prev;f=null,this.pause()}n._reversed?n.render((n._dirty?n.totalDuration():n._totalDuration)-(t-n._startTime)*n._timeScale,e,i):n.render((t-n._startTime)*n._timeScale,e,i)}n=a}this._onUpdate&&(e||(o.length&&l(),this._callback("onUpdate"))),h&&(this._locked||this._gc||v!==this._startTime&&y===this._timeScale||(0===this._time||d>=this.totalDuration())&&(r&&(o.length&&l(),this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[h]&&this._callback(h)))},c.getActive=function(t,e,i){null==t&&(t=!0),null==e&&(e=!0),null==i&&(i=!1);var n,r,s=[],a=this.getChildren(t,e,i),o=0,l=a.length;for(n=0;n<l;n++)r=a[n],r.isActive()&&(s[o++]=r);return s},c.getLabelAfter=function(t){t||0!==t&&(t=this._time);var e,i=this.getLabelsArray(),n=i.length;for(e=0;e<n;e++)if(i[e].time>t)return i[e].name;return null},c.getLabelBefore=function(t){null==t&&(t=this._time);for(var e=this.getLabelsArray(),i=e.length;--i>-1;)if(e[i].time<t)return e[i].name;return null},c.getLabelsArray=function(){var t,e=[],i=0;for(t in this._labels)e[i++]={time:this._labels[t],name:t};return e.sort(function(t,e){return t.time-e.time}),e},c.progress=function(t,e){return arguments.length?this.totalTime(this.duration()*(this._yoyo&&0!==(1&this._cycle)?1-t:t)+this._cycle*(this._duration+this._repeatDelay),e):this._time/this.duration()},c.totalProgress=function(t,e){return arguments.length?this.totalTime(this.totalDuration()*t,e):this._totalTime/this.totalDuration()},c.totalDuration=function(e){return arguments.length?this._repeat!==-1&&e?this.timeScale(this.totalDuration()/e):this:(this._dirty&&(t.prototype.totalDuration.call(this),this._totalDuration=this._repeat===-1?999999999999:this._duration*(this._repeat+1)+this._repeatDelay*this._repeat),this._totalDuration)},c.time=function(t,e){return arguments.length?(this._dirty&&this.totalDuration(),t>this._duration&&(t=this._duration),this._yoyo&&0!==(1&this._cycle)?t=this._duration-t+this._cycle*(this._duration+this._repeatDelay):0!==this._repeat&&(t+=this._cycle*(this._duration+this._repeatDelay)),this.totalTime(t,e)):this._time},c.repeat=function(t){return arguments.length?(this._repeat=t,this._uncache(!0)):this._repeat},c.repeatDelay=function(t){return arguments.length?(this._repeatDelay=t,this._uncache(!0)):this._repeatDelay},c.yoyo=function(t){return arguments.length?(this._yoyo=t,this):this._yoyo},c.currentLabel=function(t){return arguments.length?this.seek(t,!0):this.getLabelBefore(this._time+1e-8)},r},!0),function(){var t=180/Math.PI,e=[],n=[],r=[],s={},a=i._gsDefine.globals,o=function(t,e,i,n){i===n&&(i=n-(n-e)/1e6),t===e&&(e=t+(i-t)/1e6),this.a=t,this.b=e,this.c=i,this.d=n,this.da=n-t,this.ca=i-t,this.ba=e-t},l=",x,y,z,left,top,right,bottom,marginTop,marginLeft,marginRight,marginBottom,paddingLeft,paddingTop,paddingRight,paddingBottom,backgroundPosition,backgroundPosition_y,",h=function(t,e,i,n){var r={a:t},s={},a={},o={c:n},l=(t+e)/2,h=(e+i)/2,u=(i+n)/2,c=(l+h)/2,f=(h+u)/2,p=(f-c)/8;return r.b=l+(t-l)/4,s.b=c+p,r.c=s.a=(r.b+s.b)/2,s.c=a.a=(c+f)/2,a.b=f-p,o.b=u+(n-u)/4,a.c=o.a=(a.b+o.b)/2,[r,s,a,o]},u=function(t,i,s,a,o){var l,u,c,f,p,d,_,m,g,v,y,T,w,b=t.length-1,x=0,P=t[0].a;for(l=0;l<b;l++)p=t[x],u=p.a,c=p.d,f=t[x+1].d,o?(y=e[l],T=n[l],w=(T+y)*i*.25/(a?.5:r[l]||.5),d=c-(c-u)*(a?.5*i:0!==y?w/y:0),_=c+(f-c)*(a?.5*i:0!==T?w/T:0),m=c-(d+((_-d)*(3*y/(y+T)+.5)/4||0))):(d=c-(c-u)*i*.5,_=c+(f-c)*i*.5,m=c-(d+_)/2),d+=m,_+=m,p.c=g=d,0!==l?p.b=P:p.b=P=p.a+.6*(p.c-p.a),p.da=c-u,p.ca=g-u,p.ba=P-u,s?(v=h(u,P,g,c),t.splice(x,1,v[0],v[1],v[2],v[3]),x+=4):x++,P=_;p=t[x],p.b=P,p.c=P+.4*(p.d-P),p.da=p.d-p.a,p.ca=p.c-p.a,p.ba=P-p.a,s&&(v=h(p.a,P,p.c,p.d),t.splice(x,1,v[0],v[1],v[2],v[3]))},c=function(t,i,r,s){var a,l,h,u,c,f,p=[];if(s)for(t=[s].concat(t),l=t.length;--l>-1;)"string"==typeof(f=t[l][i])&&"="===f.charAt(1)&&(t[l][i]=s[i]+Number(f.charAt(0)+f.substr(2)));if(a=t.length-2,a<0)return p[0]=new o(t[0][i],0,0,t[a<-1?0:1][i]),p;for(l=0;l<a;l++)h=t[l][i],u=t[l+1][i],p[l]=new o(h,0,0,u),r&&(c=t[l+2][i],e[l]=(e[l]||0)+(u-h)*(u-h),n[l]=(n[l]||0)+(c-u)*(c-u));return p[l]=new o(t[l][i],0,0,t[l+1][i]),p},f=function(t,i,a,o,h,f){var p,d,_,m,g,v,y,T,w={},b=[],x=f||t[0];h="string"==typeof h?","+h+",":l,null==i&&(i=1);for(d in t[0])b.push(d);if(t.length>1){for(T=t[t.length-1],y=!0,p=b.length;--p>-1;)if(d=b[p],Math.abs(x[d]-T[d])>.05){y=!1;break}y&&(t=t.concat(),f&&t.unshift(f),t.push(t[1]),f=t[t.length-3])}for(e.length=n.length=r.length=0,p=b.length;--p>-1;)d=b[p],s[d]=h.indexOf(","+d+",")!==-1,w[d]=c(t,d,s[d],f);for(p=e.length;--p>-1;)e[p]=Math.sqrt(e[p]),n[p]=Math.sqrt(n[p]);if(!o){for(p=b.length;--p>-1;)if(s[d])for(_=w[b[p]],v=_.length-1,m=0;m<v;m++)g=_[m+1].da/n[m]+_[m].da/e[m]||0,r[m]=(r[m]||0)+g*g;for(p=r.length;--p>-1;)r[p]=Math.sqrt(r[p])}for(p=b.length,m=a?4:1;--p>-1;)d=b[p],_=w[d],u(_,i,a,o,s[d]),y&&(_.splice(0,m),_.splice(_.length-m,m));return w},p=function(t,e,i){e=e||"soft";var n,r,s,a,l,h,u,c,f,p,d,_={},m="cubic"===e?3:2,g="soft"===e,v=[];if(g&&i&&(t=[i].concat(t)),null==t||t.length<m+1)throw"invalid Bezier data";for(f in t[0])v.push(f);for(h=v.length;--h>-1;){for(f=v[h],_[f]=l=[],p=0,c=t.length,u=0;u<c;u++)n=null==i?t[u][f]:"string"==typeof(d=t[u][f])&&"="===d.charAt(1)?i[f]+Number(d.charAt(0)+d.substr(2)):Number(d),g&&u>1&&u<c-1&&(l[p++]=(n+l[p-2])/2),l[p++]=n;for(c=p-m+1,p=0,u=0;u<c;u+=m)n=l[u],r=l[u+1],s=l[u+2],a=2===m?0:l[u+3],l[p++]=d=3===m?new o(n,r,s,a):new o(n,(2*r+n)/3,(2*r+s)/3,s);l.length=p}return _},d=function(t,e,i){for(var n,r,s,a,o,l,h,u,c,f,p,d=1/i,_=t.length;--_>-1;)for(f=t[_],s=f.a,a=f.d-s,o=f.c-s,l=f.b-s,n=r=0,u=1;u<=i;u++)h=d*u,c=1-h,n=r-(r=(h*h*a+3*c*(h*o+c*l))*h),p=_*i+u-1,e[p]=(e[p]||0)+n*n},_=function(t,e){e=e>>0||6;var i,n,r,s,a=[],o=[],l=0,h=0,u=e-1,c=[],f=[];for(i in t)d(t[i],a,e);for(r=a.length,n=0;n<r;n++)l+=Math.sqrt(a[n]),s=n%e,f[s]=l,s===u&&(h+=l,s=n/e>>0,c[s]=f,o[s]=h,l=0,f=[]);return{length:h,lengths:o,segments:c}},m=i._gsDefine.plugin({propName:"bezier",priority:-1,version:"1.3.7",API:2,global:!0,init:function(t,e,i){this._target=t,e instanceof Array&&(e={values:e}),this._func={},this._mod={},this._props=[],this._timeRes=null==e.timeResolution?6:parseInt(e.timeResolution,10);var n,r,s,a,o,l=e.values||[],h={},u=l[0],c=e.autoRotate||i.vars.orientToBezier;this._autoRotate=c?c instanceof Array?c:[["x","y","rotation",c===!0?0:Number(c)||0]]:null;for(n in u)this._props.push(n);for(s=this._props.length;--s>-1;)n=this._props[s],this._overwriteProps.push(n),r=this._func[n]="function"==typeof t[n],h[n]=r?t[n.indexOf("set")||"function"!=typeof t["get"+n.substr(3)]?n:"get"+n.substr(3)]():parseFloat(t[n]),o||h[n]!==l[0][n]&&(o=h);if(this._beziers="cubic"!==e.type&&"quadratic"!==e.type&&"soft"!==e.type?f(l,isNaN(e.curviness)?1:e.curviness,!1,"thruBasic"===e.type,e.correlate,o):p(l,e.type,h),this._segCount=this._beziers[n].length,this._timeRes){var d=_(this._beziers,this._timeRes);this._length=d.length,this._lengths=d.lengths,this._segments=d.segments,this._l1=this._li=this._s1=this._si=0,this._l2=this._lengths[0],this._curSeg=this._segments[0],this._s2=this._curSeg[0],this._prec=1/this._curSeg.length}if(c=this._autoRotate)for(this._initialRotations=[],c[0]instanceof Array||(this._autoRotate=c=[c]),s=c.length;--s>-1;){for(a=0;a<3;a++)n=c[s][a],this._func[n]="function"==typeof t[n]&&t[n.indexOf("set")||"function"!=typeof t["get"+n.substr(3)]?n:"get"+n.substr(3)];n=c[s][2],this._initialRotations[s]=(this._func[n]?this._func[n].call(this._target):this._target[n])||0,this._overwriteProps.push(n)}return this._startRatio=i.vars.runBackwards?1:0,!0},set:function(e){var i,n,r,s,a,o,l,h,u,c,f=this._segCount,p=this._func,d=this._target,_=e!==this._startRatio;if(this._timeRes){if(u=this._lengths,c=this._curSeg,e*=this._length,r=this._li,e>this._l2&&r<f-1){for(h=f-1;r<h&&(this._l2=u[++r])<=e;);this._l1=u[r-1],this._li=r,this._curSeg=c=this._segments[r],this._s2=c[this._s1=this._si=0]}else if(e<this._l1&&r>0){for(;r>0&&(this._l1=u[--r])>=e;);0===r&&e<this._l1?this._l1=0:r++,this._l2=u[r],this._li=r,this._curSeg=c=this._segments[r],this._s1=c[(this._si=c.length-1)-1]||0,this._s2=c[this._si]}if(i=r,e-=this._l1,r=this._si,e>this._s2&&r<c.length-1){for(h=c.length-1;r<h&&(this._s2=c[++r])<=e;);this._s1=c[r-1],this._si=r}else if(e<this._s1&&r>0){for(;r>0&&(this._s1=c[--r])>=e;);0===r&&e<this._s1?this._s1=0:r++,this._s2=c[r],this._si=r}o=(r+(e-this._s1)/(this._s2-this._s1))*this._prec||0}else i=e<0?0:e>=1?f-1:f*e>>0,o=(e-i*(1/f))*f;for(n=1-o,r=this._props.length;--r>-1;)s=this._props[r],a=this._beziers[s][i],l=(o*o*a.da+3*n*(o*a.ca+n*a.ba))*o+a.a,this._mod[s]&&(l=this._mod[s](l,d)),p[s]?d[s](l):d[s]=l;if(this._autoRotate){var m,g,v,y,T,w,b,x=this._autoRotate;for(r=x.length;--r>-1;)s=x[r][2],w=x[r][3]||0,b=x[r][4]===!0?1:t,a=this._beziers[x[r][0]],m=this._beziers[x[r][1]],a&&m&&(a=a[i],m=m[i],g=a.a+(a.b-a.a)*o,y=a.b+(a.c-a.b)*o,g+=(y-g)*o,y+=(a.c+(a.d-a.c)*o-y)*o,v=m.a+(m.b-m.a)*o,T=m.b+(m.c-m.b)*o,v+=(T-v)*o,T+=(m.c+(m.d-m.c)*o-T)*o,l=_?Math.atan2(T-v,y-g)*b+w:this._initialRotations[r],this._mod[s]&&(l=this._mod[s](l,d)),p[s]?d[s](l):d[s]=l)}}}),g=m.prototype;m.bezierThrough=f,m.cubicToQuadratic=h,m._autoCSS=!0,m.quadraticToCubic=function(t,e,i){return new o(t,(2*e+t)/3,(2*e+i)/3,i)},m._cssRegister=function(){var t=a.CSSPlugin;if(t){var e=t._internals,i=e._parseToProxy,n=e._setPluginRatio,r=e.CSSPropTween;e._registerComplexSpecialProp("bezier",{parser:function(t,e,s,a,o,l){e instanceof Array&&(e={values:e}),l=new m;var h,u,c,f=e.values,p=f.length-1,d=[],_={};if(p<0)return o;for(h=0;h<=p;h++)c=i(t,f[h],a,o,l,p!==h),d[h]=c.end;for(u in e)_[u]=e[u];return _.values=d,o=new r(t,"bezier",0,0,c.pt,2),o.data=c,o.plugin=l,o.setRatio=n,0===_.autoRotate&&(_.autoRotate=!0),!_.autoRotate||_.autoRotate instanceof Array||(h=_.autoRotate===!0?0:Number(_.autoRotate),_.autoRotate=null!=c.end.left?[["left","top","rotation",h,!1]]:null!=c.end.x&&[["x","y","rotation",h,!1]]),_.autoRotate&&(a._transform||a._enableTransforms(!1),c.autoRotate=a._target._gsTransform,c.proxy.rotation=c.autoRotate.rotation||0,a._overwriteProps.push("rotation")),l._onInitTween(c.proxy,_,a._tween),o}})}},g._mod=function(t){for(var e,i=this._overwriteProps,n=i.length;--n>-1;)e=t[i[n]],e&&"function"==typeof e&&(this._mod[i[n]]=e)},g._kill=function(t){var e,i,n=this._props;for(e in this._beziers)if(e in t)for(delete this._beziers[e],delete this._func[e],i=n.length;--i>-1;)n[i]===e&&n.splice(i,1);if(n=this._autoRotate)for(i=n.length;--i>-1;)t[n[i][2]]&&n.splice(i,1);return this._super._kill.call(this,t)}}(),i._gsDefine("plugins.CSSPlugin",["plugins.TweenPlugin","TweenLite"],function(t,e){var n,r,s,a,o=function(){t.call(this,"css"),this._overwriteProps.length=0,this.setRatio=o.prototype.setRatio},l=i._gsDefine.globals,h={},u=o.prototype=new t("css");u.constructor=o,o.version="1.19.0",o.API=2,o.defaultTransformPerspective=0,o.defaultSkewType="compensated",o.defaultSmoothOrigin=!0,u="px",o.suffixMap={top:u,right:u,bottom:u,left:u,width:u,height:u,fontSize:u,padding:u,margin:u,perspective:u,lineHeight:""};var c,f,p,d,_,m,g,v,y=/(?:\-|\.|\b)(\d|\.|e\-)+/g,T=/(?:\d|\-\d|\.\d|\-\.\d|\+=\d|\-=\d|\+=.\d|\-=\.\d)+/g,w=/(?:\+=|\-=|\-|\b)[\d\-\.]+[a-zA-Z0-9]*(?:%|\b)/gi,b=/(?![+-]?\d*\.?\d+|[+-]|e[+-]\d+)[^0-9]/g,x=/(?:\d|\-|\+|=|#|\.)*/g,P=/opacity *= *([^)]*)/i,S=/opacity:([^;]*)/i,C=/alpha\(opacity *=.+?\)/i,k=/^(rgb|hsl)/,O=/([A-Z])/g,A=/-([a-z])/gi,R=/(^(?:url\(\"|url\())|(?:(\"\))$|\)$)/gi,D=function(t,e){return e.toUpperCase()},M=/(?:Left|Right|Width)/i,j=/(M11|M12|M21|M22)=[\d\-\.e]+/gi,E=/progid\:DXImageTransform\.Microsoft\.Matrix\(.+?\)/i,F=/,(?=[^\)]*(?:\(|$))/gi,N=/[\s,\(]/i,L=Math.PI/180,I=180/Math.PI,z={},q=document,B=function(t){return q.createElementNS?q.createElementNS("http://www.w3.org/1999/xhtml",t):q.createElement(t)},X=B("div"),Y=B("img"),H=o._internals={_specialProps:h},W=navigator.userAgent,U=function(){var t=W.indexOf("Android"),e=B("a");return p=W.indexOf("Safari")!==-1&&W.indexOf("Chrome")===-1&&(t===-1||Number(W.substr(t+8,1))>3),_=p&&Number(W.substr(W.indexOf("Version/")+8,1))<6,d=W.indexOf("Firefox")!==-1,(/MSIE ([0-9]{1,}[\.0-9]{0,})/.exec(W)||/Trident\/.*rv:([0-9]{1,}[\.0-9]{0,})/.exec(W))&&(m=parseFloat(RegExp.$1)),!!e&&(e.style.cssText="top:1px;opacity:.55;",/^0.55/.test(e.style.opacity))}(),V=function(t){return P.test("string"==typeof t?t:(t.currentStyle?t.currentStyle.filter:t.style.filter)||"")?parseFloat(RegExp.$1)/100:1},$=function(t){window.console&&console.log(t)},G="",Q="",Z=function(t,e){e=e||X;var i,n,r=e.style;if(void 0!==r[t])return t;for(t=t.charAt(0).toUpperCase()+t.substr(1),i=["O","Moz","ms","Ms","Webkit"],n=5;--n>-1&&void 0===r[i[n]+t];);return n>=0?(Q=3===n?"ms":i[n],G="-"+Q.toLowerCase()+"-",Q+t):null},K=q.defaultView?q.defaultView.getComputedStyle:function(){},J=o.getStyle=function(t,e,i,n,r){var s;return U||"opacity"!==e?(!n&&t.style[e]?s=t.style[e]:(i=i||K(t))?s=i[e]||i.getPropertyValue(e)||i.getPropertyValue(e.replace(O,"-$1").toLowerCase()):t.currentStyle&&(s=t.currentStyle[e]),null==r||s&&"none"!==s&&"auto"!==s&&"auto auto"!==s?s:r):V(t)},tt=H.convertToPixels=function(t,i,n,r,s){if("px"===r||!r)return n;if("auto"===r||!n)return 0;var a,l,h,u=M.test(i),c=t,f=X.style,p=n<0,d=1===n;if(p&&(n=-n),d&&(n*=100),"%"===r&&i.indexOf("border")!==-1)a=n/100*(u?t.clientWidth:t.clientHeight);else{if(f.cssText="border:0 solid red;position:"+J(t,"position")+";line-height:0;","%"!==r&&c.appendChild&&"v"!==r.charAt(0)&&"rem"!==r)f[u?"borderLeftWidth":"borderTopWidth"]=n+r;else{if(c=t.parentNode||q.body,l=c._gsCache,h=e.ticker.frame,l&&u&&l.time===h)return l.width*n/100;f[u?"width":"height"]=n+r}c.appendChild(X),a=parseFloat(X[u?"offsetWidth":"offsetHeight"]),c.removeChild(X),u&&"%"===r&&o.cacheWidths!==!1&&(l=c._gsCache=c._gsCache||{},l.time=h,l.width=a/n*100),0!==a||s||(a=tt(t,i,n,r,!0))}return d&&(a/=100),p?-a:a},et=H.calculateOffset=function(t,e,i){if("absolute"!==J(t,"position",i))return 0;var n="left"===e?"Left":"Top",r=J(t,"margin"+n,i);return t["offset"+n]-(tt(t,e,parseFloat(r),r.replace(x,""))||0)},it=function(t,e){var i,n,r,s={};if(e=e||K(t,null))if(i=e.length)for(;--i>-1;)r=e[i],r.indexOf("-transform")!==-1&&At!==r||(s[r.replace(A,D)]=e.getPropertyValue(r));else for(i in e)i.indexOf("Transform")!==-1&&Ot!==i||(s[i]=e[i]);else if(e=t.currentStyle||t.style)for(i in e)"string"==typeof i&&void 0===s[i]&&(s[i.replace(A,D)]=e[i]);return U||(s.opacity=V(t)),n=Xt(t,e,!1),s.rotation=n.rotation,s.skewX=n.skewX,s.scaleX=n.scaleX,s.scaleY=n.scaleY,s.x=n.x,s.y=n.y,Dt&&(s.z=n.z,s.rotationX=n.rotationX,s.rotationY=n.rotationY,s.scaleZ=n.scaleZ),s.filters&&delete s.filters,s},nt=function(t,e,i,n,r){var s,a,o,l={},h=t.style;for(a in i)"cssText"!==a&&"length"!==a&&isNaN(a)&&(e[a]!==(s=i[a])||r&&r[a])&&a.indexOf("Origin")===-1&&("number"!=typeof s&&"string"!=typeof s||(l[a]="auto"!==s||"left"!==a&&"top"!==a?""!==s&&"auto"!==s&&"none"!==s||"string"!=typeof e[a]||""===e[a].replace(b,"")?s:0:et(t,a),void 0!==h[a]&&(o=new vt(h,a,h[a],o))));if(n)for(a in n)"className"!==a&&(l[a]=n[a]);return{difs:l,firstMPT:o}},rt={width:["Left","Right"],height:["Top","Bottom"]},st=["marginLeft","marginRight","marginTop","marginBottom"],at=function(t,e,i){if("svg"===(t.nodeName+"").toLowerCase())return(i||K(t))[e]||0;if(t.getBBox&&zt(t))return t.getBBox()[e]||0;var n=parseFloat("width"===e?t.offsetWidth:t.offsetHeight),r=rt[e],s=r.length;for(i=i||K(t,null);--s>-1;)n-=parseFloat(J(t,"padding"+r[s],i,!0))||0,n-=parseFloat(J(t,"border"+r[s]+"Width",i,!0))||0;return n},ot=function(t,e){if("contain"===t||"auto"===t||"auto auto"===t)return t+" ";null!=t&&""!==t||(t="0 0");var i,n=t.split(" "),r=t.indexOf("left")!==-1?"0%":t.indexOf("right")!==-1?"100%":n[0],s=t.indexOf("top")!==-1?"0%":t.indexOf("bottom")!==-1?"100%":n[1];if(n.length>3&&!e){for(n=t.split(", ").join(",").split(","),t=[],i=0;i<n.length;i++)t.push(ot(n[i]));return t.join(",")}return null==s?s="center"===r?"50%":"0":"center"===s&&(s="50%"),("center"===r||isNaN(parseFloat(r))&&(r+"").indexOf("=")===-1)&&(r="50%"),t=r+" "+s+(n.length>2?" "+n[2]:""),e&&(e.oxp=r.indexOf("%")!==-1,e.oyp=s.indexOf("%")!==-1,e.oxr="="===r.charAt(1),e.oyr="="===s.charAt(1),e.ox=parseFloat(r.replace(b,"")),e.oy=parseFloat(s.replace(b,"")),e.v=t),e||t},lt=function(t,e){return"function"==typeof t&&(t=t(v,g)),"string"==typeof t&&"="===t.charAt(1)?parseInt(t.charAt(0)+"1",10)*parseFloat(t.substr(2)):parseFloat(t)-parseFloat(e)||0},ht=function(t,e){return"function"==typeof t&&(t=t(v,g)),null==t?e:"string"==typeof t&&"="===t.charAt(1)?parseInt(t.charAt(0)+"1",10)*parseFloat(t.substr(2))+e:parseFloat(t)||0},ut=function(t,e,i,n){var r,s,a,o,l,h=1e-6;return"function"==typeof t&&(t=t(v,g)),null==t?o=e:"number"==typeof t?o=t:(r=360,s=t.split("_"),l="="===t.charAt(1),a=(l?parseInt(t.charAt(0)+"1",10)*parseFloat(s[0].substr(2)):parseFloat(s[0]))*(t.indexOf("rad")===-1?1:I)-(l?0:e),s.length&&(n&&(n[i]=e+a),t.indexOf("short")!==-1&&(a%=r,a!==a%(r/2)&&(a=a<0?a+r:a-r)),t.indexOf("_cw")!==-1&&a<0?a=(a+9999999999*r)%r-(a/r|0)*r:t.indexOf("ccw")!==-1&&a>0&&(a=(a-9999999999*r)%r-(a/r|0)*r)),o=e+a),o<h&&o>-h&&(o=0),o},ct={aqua:[0,255,255],lime:[0,255,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,255],navy:[0,0,128],white:[255,255,255],fuchsia:[255,0,255],olive:[128,128,0],yellow:[255,255,0],orange:[255,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[255,0,0],pink:[255,192,203],cyan:[0,255,255],transparent:[255,255,255,0]},ft=function(t,e,i){return t=t<0?t+1:t>1?t-1:t,255*(6*t<1?e+(i-e)*t*6:t<.5?i:3*t<2?e+(i-e)*(2/3-t)*6:e)+.5|0},pt=o.parseColor=function(t,e){var i,n,r,s,a,o,l,h,u,c,f;if(t)if("number"==typeof t)i=[t>>16,t>>8&255,255&t];else{if(","===t.charAt(t.length-1)&&(t=t.substr(0,t.length-1)),ct[t])i=ct[t];else if("#"===t.charAt(0))4===t.length&&(n=t.charAt(1),r=t.charAt(2),s=t.charAt(3),t="#"+n+n+r+r+s+s),t=parseInt(t.substr(1),16),i=[t>>16,t>>8&255,255&t];else if("hsl"===t.substr(0,3))if(i=f=t.match(y),e){if(t.indexOf("=")!==-1)return t.match(T)}else a=Number(i[0])%360/360,o=Number(i[1])/100,l=Number(i[2])/100,r=l<=.5?l*(o+1):l+o-l*o,n=2*l-r,i.length>3&&(i[3]=Number(t[3])),i[0]=ft(a+1/3,n,r),i[1]=ft(a,n,r),i[2]=ft(a-1/3,n,r);else i=t.match(y)||ct.transparent;i[0]=Number(i[0]),i[1]=Number(i[1]),i[2]=Number(i[2]),i.length>3&&(i[3]=Number(i[3]))}else i=ct.black;return e&&!f&&(n=i[0]/255,r=i[1]/255,s=i[2]/255,h=Math.max(n,r,s),u=Math.min(n,r,s),l=(h+u)/2,h===u?a=o=0:(c=h-u,o=l>.5?c/(2-h-u):c/(h+u),a=h===n?(r-s)/c+(r<s?6:0):h===r?(s-n)/c+2:(n-r)/c+4,a*=60),i[0]=a+.5|0,i[1]=100*o+.5|0,i[2]=100*l+.5|0),i},dt=function(t,e){var i,n,r,s=t.match(_t)||[],a=0,o=s.length?"":t;for(i=0;i<s.length;i++)n=s[i],r=t.substr(a,t.indexOf(n,a)-a),a+=r.length+n.length,n=pt(n,e),3===n.length&&n.push(1),o+=r+(e?"hsla("+n[0]+","+n[1]+"%,"+n[2]+"%,"+n[3]:"rgba("+n.join(","))+")";return o+t.substr(a)},_t="(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3}){1,2}\\b";for(u in ct)_t+="|"+u+"\\b";_t=new RegExp(_t+")","gi"),o.colorStringFilter=function(t){var e,i=t[0]+t[1];_t.test(i)&&(e=i.indexOf("hsl(")!==-1||i.indexOf("hsla(")!==-1,t[0]=dt(t[0],e),t[1]=dt(t[1],e)),_t.lastIndex=0},e.defaultStringFilter||(e.defaultStringFilter=o.colorStringFilter);var mt=function(t,e,i,n){if(null==t)return function(t){return t};var r,s=e?(t.match(_t)||[""])[0]:"",a=t.split(s).join("").match(w)||[],o=t.substr(0,t.indexOf(a[0])),l=")"===t.charAt(t.length-1)?")":"",h=t.indexOf(" ")!==-1?" ":",",u=a.length,c=u>0?a[0].replace(y,""):"";return u?r=e?function(t){var e,f,p,d;if("number"==typeof t)t+=c;else if(n&&F.test(t)){for(d=t.replace(F,"|").split("|"),p=0;p<d.length;p++)d[p]=r(d[p]);return d.join(",")}if(e=(t.match(_t)||[s])[0],f=t.split(e).join("").match(w)||[],p=f.length,u>p--)for(;++p<u;)f[p]=i?f[(p-1)/2|0]:a[p];return o+f.join(h)+h+e+l+(t.indexOf("inset")!==-1?" inset":"")}:function(t){var e,s,f;if("number"==typeof t)t+=c;else if(n&&F.test(t)){for(s=t.replace(F,"|").split("|"),f=0;f<s.length;f++)s[f]=r(s[f]);return s.join(",")}if(e=t.match(w)||[],f=e.length,u>f--)for(;++f<u;)e[f]=i?e[(f-1)/2|0]:a[f];return o+e.join(h)+l}:function(t){return t}},gt=function(t){return t=t.split(","),function(e,i,n,r,s,a,o){var l,h=(i+"").split(" ");for(o={},l=0;l<4;l++)o[t[l]]=h[l]=h[l]||h[(l-1)/2>>0];return r.parse(e,o,s,a)}},vt=(H._setPluginRatio=function(t){this.plugin.setRatio(t);for(var e,i,n,r,s,a=this.data,o=a.proxy,l=a.firstMPT,h=1e-6;l;)e=o[l.v],l.r?e=Math.round(e):e<h&&e>-h&&(e=0),l.t[l.p]=e,l=l._next;if(a.autoRotate&&(a.autoRotate.rotation=a.mod?a.mod(o.rotation,this.t):o.rotation),1===t||0===t)for(l=a.firstMPT,s=1===t?"e":"b";l;){if(i=l.t,i.type){if(1===i.type){for(r=i.xs0+i.s+i.xs1,n=1;n<i.l;n++)r+=i["xn"+n]+i["xs"+(n+1)];i[s]=r}}else i[s]=i.s+i.xs0;l=l._next}},function(t,e,i,n,r){this.t=t,this.p=e,this.v=i,this.r=r,n&&(n._prev=this,this._next=n)}),yt=(H._parseToProxy=function(t,e,i,n,r,s){var a,o,l,h,u,c=n,f={},p={},d=i._transform,_=z;for(i._transform=null,z=e,n=u=i.parse(t,e,n,r),z=_,s&&(i._transform=d,c&&(c._prev=null,c._prev&&(c._prev._next=null)));n&&n!==c;){if(n.type<=1&&(o=n.p,p[o]=n.s+n.c,f[o]=n.s,s||(h=new vt(n,"s",o,h,n.r),n.c=0),1===n.type))for(a=n.l;--a>0;)l="xn"+a,o=n.p+"_"+l,p[o]=n.data[l],f[o]=n[l],s||(h=new vt(n,l,o,h,n.rxp[l]));n=n._next}return{proxy:f,end:p,firstMPT:h,pt:u}},H.CSSPropTween=function(t,e,i,r,s,o,l,h,u,c,f){this.t=t,this.p=e,this.s=i,this.c=r,this.n=l||e,t instanceof yt||a.push(this.n),this.r=h,this.type=o||0,u&&(this.pr=u,n=!0),this.b=void 0===c?i:c,this.e=void 0===f?i+r:f,s&&(this._next=s,s._prev=this)}),Tt=function(t,e,i,n,r,s){var a=new yt(t,e,i,n-i,r,(-1),s);return a.b=i,a.e=a.xs0=n,a},wt=o.parseComplex=function(t,e,i,n,r,s,a,l,h,u){i=i||s||"","function"==typeof n&&(n=n(v,g)),a=new yt(t,e,0,0,a,u?2:1,null,(!1),l,i,n),n+="",r&&_t.test(n+i)&&(n=[i,n],o.colorStringFilter(n),i=n[0],n=n[1]);var f,p,d,_,m,w,b,x,P,S,C,k,O,A=i.split(", ").join(",").split(" "),R=n.split(", ").join(",").split(" "),D=A.length,M=c!==!1;for(n.indexOf(",")===-1&&i.indexOf(",")===-1||(A=A.join(" ").replace(F,", ").split(" "),R=R.join(" ").replace(F,", ").split(" "),D=A.length),D!==R.length&&(A=(s||"").split(" "),D=A.length),a.plugin=h,a.setRatio=u,_t.lastIndex=0,f=0;f<D;f++)if(_=A[f],m=R[f],x=parseFloat(_),x||0===x)a.appendXtra("",x,lt(m,x),m.replace(T,""),M&&m.indexOf("px")!==-1,!0);else if(r&&_t.test(_))k=m.indexOf(")")+1,k=")"+(k?m.substr(k):""),O=m.indexOf("hsl")!==-1&&U,_=pt(_,O),m=pt(m,O),P=_.length+m.length>6,P&&!U&&0===m[3]?(a["xs"+a.l]+=a.l?" transparent":"transparent",a.e=a.e.split(R[f]).join("transparent")):(U||(P=!1),O?a.appendXtra(P?"hsla(":"hsl(",_[0],lt(m[0],_[0]),",",!1,!0).appendXtra("",_[1],lt(m[1],_[1]),"%,",!1).appendXtra("",_[2],lt(m[2],_[2]),P?"%,":"%"+k,!1):a.appendXtra(P?"rgba(":"rgb(",_[0],m[0]-_[0],",",!0,!0).appendXtra("",_[1],m[1]-_[1],",",!0).appendXtra("",_[2],m[2]-_[2],P?",":k,!0),P&&(_=_.length<4?1:_[3],a.appendXtra("",_,(m.length<4?1:m[3])-_,k,!1))),_t.lastIndex=0;else if(w=_.match(y)){if(b=m.match(T),!b||b.length!==w.length)return a;for(d=0,p=0;p<w.length;p++)C=w[p],S=_.indexOf(C,d),a.appendXtra(_.substr(d,S-d),Number(C),lt(b[p],C),"",M&&"px"===_.substr(S+C.length,2),0===p),d=S+C.length;a["xs"+a.l]+=_.substr(d)}else a["xs"+a.l]+=a.l||a["xs"+a.l]?" "+m:m;if(n.indexOf("=")!==-1&&a.data){for(k=a.xs0+a.data.s,f=1;f<a.l;f++)k+=a["xs"+f]+a.data["xn"+f];a.e=k+a["xs"+f]}return a.l||(a.type=-1,a.xs0=a.e),a.xfirst||a},bt=9;for(u=yt.prototype,u.l=u.pr=0;--bt>0;)u["xn"+bt]=0,u["xs"+bt]="";u.xs0="",u._next=u._prev=u.xfirst=u.data=u.plugin=u.setRatio=u.rxp=null,u.appendXtra=function(t,e,i,n,r,s){var a=this,o=a.l;return a["xs"+o]+=s&&(o||a["xs"+o])?" "+t:t||"",i||0===o||a.plugin?(a.l++,a.type=a.setRatio?2:1,a["xs"+a.l]=n||"",o>0?(a.data["xn"+o]=e+i,a.rxp["xn"+o]=r,a["xn"+o]=e,a.plugin||(a.xfirst=new yt(a,"xn"+o,e,i,a.xfirst||a,0,a.n,r,a.pr),a.xfirst.xs0=0),a):(a.data={s:e+i},a.rxp={},a.s=e,a.c=i,a.r=r,a)):(a["xs"+o]+=e+(n||""),a)};var xt=function(t,e){e=e||{},this.p=e.prefix?Z(t)||t:t,h[t]=h[this.p]=this,this.format=e.formatter||mt(e.defaultValue,e.color,e.collapsible,e.multi),e.parser&&(this.parse=e.parser),this.clrs=e.color,this.multi=e.multi,this.keyword=e.keyword,this.dflt=e.defaultValue,this.pr=e.priority||0},Pt=H._registerComplexSpecialProp=function(t,e,i){"object"!=typeof e&&(e={parser:i});var n,r,s=t.split(","),a=e.defaultValue;for(i=i||[a],n=0;n<s.length;n++)e.prefix=0===n&&e.prefix,e.defaultValue=i[n]||a,r=new xt(s[n],e)},St=H._registerPluginProp=function(t){if(!h[t]){var e=t.charAt(0).toUpperCase()+t.substr(1)+"Plugin";Pt(t,{parser:function(t,i,n,r,s,a,o){var u=l.com.greensock.plugins[e];return u?(u._cssRegister(),h[n].parse(t,i,n,r,s,a,o)):($("Error: "+e+" js file not loaded."),s)}})}};u=xt.prototype,u.parseComplex=function(t,e,i,n,r,s){var a,o,l,h,u,c,f=this.keyword;if(this.multi&&(F.test(i)||F.test(e)?(o=e.replace(F,"|").split("|"),l=i.replace(F,"|").split("|")):f&&(o=[e],l=[i])),l){for(h=l.length>o.length?l.length:o.length,a=0;a<h;a++)e=o[a]=o[a]||this.dflt,i=l[a]=l[a]||this.dflt,f&&(u=e.indexOf(f),c=i.indexOf(f),u!==c&&(c===-1?o[a]=o[a].split(f).join(""):u===-1&&(o[a]+=" "+f)));e=o.join(", "),i=l.join(", ")}return wt(t,this.p,e,i,this.clrs,this.dflt,n,this.pr,r,s)},u.parse=function(t,e,i,n,r,a,o){return this.parseComplex(t.style,this.format(J(t,this.p,s,!1,this.dflt)),this.format(e),r,a)},o.registerSpecialProp=function(t,e,i){Pt(t,{parser:function(t,n,r,s,a,o,l){var h=new yt(t,r,0,0,a,2,r,(!1),i);return h.plugin=o,h.setRatio=e(t,n,s._tween,r),h},priority:i})},o.useSVGTransformAttr=p||d;var Ct,kt="scaleX,scaleY,scaleZ,x,y,z,skewX,skewY,rotation,rotationX,rotationY,perspective,xPercent,yPercent".split(","),Ot=Z("transform"),At=G+"transform",Rt=Z("transformOrigin"),Dt=null!==Z("perspective"),Mt=H.Transform=function(){this.perspective=parseFloat(o.defaultTransformPerspective)||0,this.force3D=!(o.defaultForce3D===!1||!Dt)&&(o.defaultForce3D||"auto")},jt=window.SVGElement,Et=function(t,e,i){var n,r=q.createElementNS("http://www.w3.org/2000/svg",t),s=/([a-z])([A-Z])/g;for(n in i)r.setAttributeNS(null,n.replace(s,"$1-$2").toLowerCase(),i[n]);return e.appendChild(r),r},Ft=q.documentElement,Nt=function(){var t,e,i,n=m||/Android/i.test(W)&&!window.chrome;return q.createElementNS&&!n&&(t=Et("svg",Ft),e=Et("rect",t,{width:100,height:50,x:100}),i=e.getBoundingClientRect().width,e.style[Rt]="50% 50%",e.style[Ot]="scaleX(0.5)",n=i===e.getBoundingClientRect().width&&!(d&&Dt),Ft.removeChild(t)),n}(),Lt=function(t,e,i,n,r,s){var a,l,h,u,c,f,p,d,_,m,g,v,y,T,w=t._gsTransform,b=Bt(t,!0);w&&(y=w.xOrigin,T=w.yOrigin),(!n||(a=n.split(" ")).length<2)&&(p=t.getBBox(),e=ot(e).split(" "),a=[(e[0].indexOf("%")!==-1?parseFloat(e[0])/100*p.width:parseFloat(e[0]))+p.x,(e[1].indexOf("%")!==-1?parseFloat(e[1])/100*p.height:parseFloat(e[1]))+p.y]),i.xOrigin=u=parseFloat(a[0]),i.yOrigin=c=parseFloat(a[1]),n&&b!==qt&&(f=b[0],p=b[1],d=b[2],_=b[3],m=b[4],g=b[5],v=f*_-p*d,l=u*(_/v)+c*(-d/v)+(d*g-_*m)/v,h=u*(-p/v)+c*(f/v)-(f*g-p*m)/v,u=i.xOrigin=a[0]=l,c=i.yOrigin=a[1]=h),w&&(s&&(i.xOffset=w.xOffset,i.yOffset=w.yOffset,w=i),r||r!==!1&&o.defaultSmoothOrigin!==!1?(l=u-y,h=c-T,w.xOffset+=l*b[0]+h*b[2]-l,w.yOffset+=l*b[1]+h*b[3]-h):w.xOffset=w.yOffset=0),s||t.setAttribute("data-svg-origin",a.join(" "))},It=function(t){try{return t.getBBox()}catch(t){}},zt=function(t){return!!(jt&&t.getBBox&&t.getCTM&&It(t)&&(!t.parentNode||t.parentNode.getBBox&&t.parentNode.getCTM))},qt=[1,0,0,1,0,0],Bt=function(t,e){var i,n,r,s,a,o,l=t._gsTransform||new Mt,h=1e5,u=t.style;if(Ot?n=J(t,At,null,!0):t.currentStyle&&(n=t.currentStyle.filter.match(j),n=n&&4===n.length?[n[0].substr(4),Number(n[2].substr(4)),Number(n[1].substr(4)),n[3].substr(4),l.x||0,l.y||0].join(","):""),i=!n||"none"===n||"matrix(1, 0, 0, 1, 0, 0)"===n,i&&Ot&&((o="none"===K(t).display)||!t.parentNode)&&(o&&(s=u.display,
u.display="block"),t.parentNode||(a=1,Ft.appendChild(t)),n=J(t,At,null,!0),i=!n||"none"===n||"matrix(1, 0, 0, 1, 0, 0)"===n,s?u.display=s:o&&Ut(u,"display"),a&&Ft.removeChild(t)),(l.svg||t.getBBox&&zt(t))&&(i&&(u[Ot]+"").indexOf("matrix")!==-1&&(n=u[Ot],i=0),r=t.getAttribute("transform"),i&&r&&(r.indexOf("matrix")!==-1?(n=r,i=0):r.indexOf("translate")!==-1&&(n="matrix(1,0,0,1,"+r.match(/(?:\-|\b)[\d\-\.e]+\b/gi).join(",")+")",i=0))),i)return qt;for(r=(n||"").match(y)||[],bt=r.length;--bt>-1;)s=Number(r[bt]),r[bt]=(a=s-(s|=0))?(a*h+(a<0?-.5:.5)|0)/h+s:s;return e&&r.length>6?[r[0],r[1],r[4],r[5],r[12],r[13]]:r},Xt=H.getTransform=function(t,i,n,r){if(t._gsTransform&&n&&!r)return t._gsTransform;var s,a,l,h,u,c,f=n?t._gsTransform||new Mt:new Mt,p=f.scaleX<0,d=2e-5,_=1e5,m=Dt?parseFloat(J(t,Rt,i,!1,"0 0 0").split(" ")[2])||f.zOrigin||0:0,g=parseFloat(o.defaultTransformPerspective)||0;if(f.svg=!(!t.getBBox||!zt(t)),f.svg&&(Lt(t,J(t,Rt,i,!1,"50% 50%")+"",f,t.getAttribute("data-svg-origin")),Ct=o.useSVGTransformAttr||Nt),s=Bt(t),s!==qt){if(16===s.length){var v,y,T,w,b,x=s[0],P=s[1],S=s[2],C=s[3],k=s[4],O=s[5],A=s[6],R=s[7],D=s[8],M=s[9],j=s[10],E=s[12],F=s[13],N=s[14],L=s[11],z=Math.atan2(A,j);f.zOrigin&&(N=-f.zOrigin,E=D*N-s[12],F=M*N-s[13],N=j*N+f.zOrigin-s[14]),f.rotationX=z*I,z&&(w=Math.cos(-z),b=Math.sin(-z),v=k*w+D*b,y=O*w+M*b,T=A*w+j*b,D=k*-b+D*w,M=O*-b+M*w,j=A*-b+j*w,L=R*-b+L*w,k=v,O=y,A=T),z=Math.atan2(-S,j),f.rotationY=z*I,z&&(w=Math.cos(-z),b=Math.sin(-z),v=x*w-D*b,y=P*w-M*b,T=S*w-j*b,M=P*b+M*w,j=S*b+j*w,L=C*b+L*w,x=v,P=y,S=T),z=Math.atan2(P,x),f.rotation=z*I,z&&(w=Math.cos(-z),b=Math.sin(-z),x=x*w+k*b,y=P*w+O*b,O=P*-b+O*w,A=S*-b+A*w,P=y),f.rotationX&&Math.abs(f.rotationX)+Math.abs(f.rotation)>359.9&&(f.rotationX=f.rotation=0,f.rotationY=180-f.rotationY),f.scaleX=(Math.sqrt(x*x+P*P)*_+.5|0)/_,f.scaleY=(Math.sqrt(O*O+M*M)*_+.5|0)/_,f.scaleZ=(Math.sqrt(A*A+j*j)*_+.5|0)/_,f.rotationX||f.rotationY?f.skewX=0:(f.skewX=k||O?Math.atan2(k,O)*I+f.rotation:f.skewX||0,Math.abs(f.skewX)>90&&Math.abs(f.skewX)<270&&(p?(f.scaleX*=-1,f.skewX+=f.rotation<=0?180:-180,f.rotation+=f.rotation<=0?180:-180):(f.scaleY*=-1,f.skewX+=f.skewX<=0?180:-180))),f.perspective=L?1/(L<0?-L:L):0,f.x=E,f.y=F,f.z=N,f.svg&&(f.x-=f.xOrigin-(f.xOrigin*x-f.yOrigin*k),f.y-=f.yOrigin-(f.yOrigin*P-f.xOrigin*O))}else if(!Dt||r||!s.length||f.x!==s[4]||f.y!==s[5]||!f.rotationX&&!f.rotationY){var q=s.length>=6,B=q?s[0]:1,X=s[1]||0,Y=s[2]||0,H=q?s[3]:1;f.x=s[4]||0,f.y=s[5]||0,l=Math.sqrt(B*B+X*X),h=Math.sqrt(H*H+Y*Y),u=B||X?Math.atan2(X,B)*I:f.rotation||0,c=Y||H?Math.atan2(Y,H)*I+u:f.skewX||0,Math.abs(c)>90&&Math.abs(c)<270&&(p?(l*=-1,c+=u<=0?180:-180,u+=u<=0?180:-180):(h*=-1,c+=c<=0?180:-180)),f.scaleX=l,f.scaleY=h,f.rotation=u,f.skewX=c,Dt&&(f.rotationX=f.rotationY=f.z=0,f.perspective=g,f.scaleZ=1),f.svg&&(f.x-=f.xOrigin-(f.xOrigin*B+f.yOrigin*Y),f.y-=f.yOrigin-(f.xOrigin*X+f.yOrigin*H))}f.zOrigin=m;for(a in f)f[a]<d&&f[a]>-d&&(f[a]=0)}return n&&(t._gsTransform=f,f.svg&&(Ct&&t.style[Ot]?e.delayedCall(.001,function(){Ut(t.style,Ot)}):!Ct&&t.getAttribute("transform")&&e.delayedCall(.001,function(){t.removeAttribute("transform")}))),f},Yt=function(t){var e,i,n=this.data,r=-n.rotation*L,s=r+n.skewX*L,a=1e5,o=(Math.cos(r)*n.scaleX*a|0)/a,l=(Math.sin(r)*n.scaleX*a|0)/a,h=(Math.sin(s)*-n.scaleY*a|0)/a,u=(Math.cos(s)*n.scaleY*a|0)/a,c=this.t.style,f=this.t.currentStyle;if(f){i=l,l=-h,h=-i,e=f.filter,c.filter="";var p,d,_=this.t.offsetWidth,g=this.t.offsetHeight,v="absolute"!==f.position,y="progid:DXImageTransform.Microsoft.Matrix(M11="+o+", M12="+l+", M21="+h+", M22="+u,T=n.x+_*n.xPercent/100,w=n.y+g*n.yPercent/100;if(null!=n.ox&&(p=(n.oxp?_*n.ox*.01:n.ox)-_/2,d=(n.oyp?g*n.oy*.01:n.oy)-g/2,T+=p-(p*o+d*l),w+=d-(p*h+d*u)),v?(p=_/2,d=g/2,y+=", Dx="+(p-(p*o+d*l)+T)+", Dy="+(d-(p*h+d*u)+w)+")"):y+=", sizingMethod='auto expand')",e.indexOf("DXImageTransform.Microsoft.Matrix(")!==-1?c.filter=e.replace(E,y):c.filter=y+" "+e,0!==t&&1!==t||1===o&&0===l&&0===h&&1===u&&(v&&y.indexOf("Dx=0, Dy=0")===-1||P.test(e)&&100!==parseFloat(RegExp.$1)||e.indexOf(e.indexOf("Alpha"))===-1&&c.removeAttribute("filter")),!v){var b,S,C,k=m<8?1:-1;for(p=n.ieOffsetX||0,d=n.ieOffsetY||0,n.ieOffsetX=Math.round((_-((o<0?-o:o)*_+(l<0?-l:l)*g))/2+T),n.ieOffsetY=Math.round((g-((u<0?-u:u)*g+(h<0?-h:h)*_))/2+w),bt=0;bt<4;bt++)S=st[bt],b=f[S],i=b.indexOf("px")!==-1?parseFloat(b):tt(this.t,S,parseFloat(b),b.replace(x,""))||0,C=i!==n[S]?bt<2?-n.ieOffsetX:-n.ieOffsetY:bt<2?p-n.ieOffsetX:d-n.ieOffsetY,c[S]=(n[S]=Math.round(i-C*(0===bt||2===bt?1:k)))+"px"}}},Ht=H.set3DTransformRatio=H.setTransformRatio=function(t){var e,i,n,r,s,a,o,l,h,u,c,f,p,_,m,g,v,y,T,w,b,x,P,S=this.data,C=this.t.style,k=S.rotation,O=S.rotationX,A=S.rotationY,R=S.scaleX,D=S.scaleY,M=S.scaleZ,j=S.x,E=S.y,F=S.z,N=S.svg,I=S.perspective,z=S.force3D;if(((1===t||0===t)&&"auto"===z&&(this.tween._totalTime===this.tween._totalDuration||!this.tween._totalTime)||!z)&&!F&&!I&&!A&&!O&&1===M||Ct&&N||!Dt)return void(k||S.skewX||N?(k*=L,x=S.skewX*L,P=1e5,e=Math.cos(k)*R,r=Math.sin(k)*R,i=Math.sin(k-x)*-D,s=Math.cos(k-x)*D,x&&"simple"===S.skewType&&(v=Math.tan(x-S.skewY*L),v=Math.sqrt(1+v*v),i*=v,s*=v,S.skewY&&(v=Math.tan(S.skewY*L),v=Math.sqrt(1+v*v),e*=v,r*=v)),N&&(j+=S.xOrigin-(S.xOrigin*e+S.yOrigin*i)+S.xOffset,E+=S.yOrigin-(S.xOrigin*r+S.yOrigin*s)+S.yOffset,Ct&&(S.xPercent||S.yPercent)&&(_=this.t.getBBox(),j+=.01*S.xPercent*_.width,E+=.01*S.yPercent*_.height),_=1e-6,j<_&&j>-_&&(j=0),E<_&&E>-_&&(E=0)),T=(e*P|0)/P+","+(r*P|0)/P+","+(i*P|0)/P+","+(s*P|0)/P+","+j+","+E+")",N&&Ct?this.t.setAttribute("transform","matrix("+T):C[Ot]=(S.xPercent||S.yPercent?"translate("+S.xPercent+"%,"+S.yPercent+"%) matrix(":"matrix(")+T):C[Ot]=(S.xPercent||S.yPercent?"translate("+S.xPercent+"%,"+S.yPercent+"%) matrix(":"matrix(")+R+",0,0,"+D+","+j+","+E+")");if(d&&(_=1e-4,R<_&&R>-_&&(R=M=2e-5),D<_&&D>-_&&(D=M=2e-5),!I||S.z||S.rotationX||S.rotationY||(I=0)),k||S.skewX)k*=L,m=e=Math.cos(k),g=r=Math.sin(k),S.skewX&&(k-=S.skewX*L,m=Math.cos(k),g=Math.sin(k),"simple"===S.skewType&&(v=Math.tan((S.skewX-S.skewY)*L),v=Math.sqrt(1+v*v),m*=v,g*=v,S.skewY&&(v=Math.tan(S.skewY*L),v=Math.sqrt(1+v*v),e*=v,r*=v))),i=-g,s=m;else{if(!(A||O||1!==M||I||N))return void(C[Ot]=(S.xPercent||S.yPercent?"translate("+S.xPercent+"%,"+S.yPercent+"%) translate3d(":"translate3d(")+j+"px,"+E+"px,"+F+"px)"+(1!==R||1!==D?" scale("+R+","+D+")":""));e=s=1,i=r=0}h=1,n=a=o=l=u=c=0,f=I?-1/I:0,p=S.zOrigin,_=1e-6,w=",",b="0",k=A*L,k&&(m=Math.cos(k),g=Math.sin(k),o=-g,u=f*-g,n=e*g,a=r*g,h=m,f*=m,e*=m,r*=m),k=O*L,k&&(m=Math.cos(k),g=Math.sin(k),v=i*m+n*g,y=s*m+a*g,l=h*g,c=f*g,n=i*-g+n*m,a=s*-g+a*m,h*=m,f*=m,i=v,s=y),1!==M&&(n*=M,a*=M,h*=M,f*=M),1!==D&&(i*=D,s*=D,l*=D,c*=D),1!==R&&(e*=R,r*=R,o*=R,u*=R),(p||N)&&(p&&(j+=n*-p,E+=a*-p,F+=h*-p+p),N&&(j+=S.xOrigin-(S.xOrigin*e+S.yOrigin*i)+S.xOffset,E+=S.yOrigin-(S.xOrigin*r+S.yOrigin*s)+S.yOffset),j<_&&j>-_&&(j=b),E<_&&E>-_&&(E=b),F<_&&F>-_&&(F=0)),T=S.xPercent||S.yPercent?"translate("+S.xPercent+"%,"+S.yPercent+"%) matrix3d(":"matrix3d(",T+=(e<_&&e>-_?b:e)+w+(r<_&&r>-_?b:r)+w+(o<_&&o>-_?b:o),T+=w+(u<_&&u>-_?b:u)+w+(i<_&&i>-_?b:i)+w+(s<_&&s>-_?b:s),O||A||1!==M?(T+=w+(l<_&&l>-_?b:l)+w+(c<_&&c>-_?b:c)+w+(n<_&&n>-_?b:n),T+=w+(a<_&&a>-_?b:a)+w+(h<_&&h>-_?b:h)+w+(f<_&&f>-_?b:f)+w):T+=",0,0,0,0,1,0,",T+=j+w+E+w+F+w+(I?1+-F/I:1)+")",C[Ot]=T};u=Mt.prototype,u.x=u.y=u.z=u.skewX=u.skewY=u.rotation=u.rotationX=u.rotationY=u.zOrigin=u.xPercent=u.yPercent=u.xOffset=u.yOffset=0,u.scaleX=u.scaleY=u.scaleZ=1,Pt("transform,scale,scaleX,scaleY,scaleZ,x,y,z,rotation,rotationX,rotationY,rotationZ,skewX,skewY,shortRotation,shortRotationX,shortRotationY,shortRotationZ,transformOrigin,svgOrigin,transformPerspective,directionalRotation,parseTransform,force3D,skewType,xPercent,yPercent,smoothOrigin",{parser:function(t,e,i,n,r,a,l){if(n._lastParsedTransform===l)return r;n._lastParsedTransform=l;var h;"function"==typeof l[i]&&(h=l[i],l[i]=e);var u,c,f,p,d,_,m,y,T,w=t._gsTransform,b=t.style,x=1e-6,P=kt.length,S=l,C={},k="transformOrigin",O=Xt(t,s,!0,S.parseTransform),A=S.transform&&("function"==typeof S.transform?S.transform(v,g):S.transform);if(n._transform=O,A&&"string"==typeof A&&Ot)c=X.style,c[Ot]=A,c.display="block",c.position="absolute",q.body.appendChild(X),u=Xt(X,null,!1),O.svg&&(_=O.xOrigin,m=O.yOrigin,u.x-=O.xOffset,u.y-=O.yOffset,(S.transformOrigin||S.svgOrigin)&&(A={},Lt(t,ot(S.transformOrigin),A,S.svgOrigin,S.smoothOrigin,!0),_=A.xOrigin,m=A.yOrigin,u.x-=A.xOffset-O.xOffset,u.y-=A.yOffset-O.yOffset),(_||m)&&(y=Bt(X,!0),u.x-=_-(_*y[0]+m*y[2]),u.y-=m-(_*y[1]+m*y[3]))),q.body.removeChild(X),u.perspective||(u.perspective=O.perspective),null!=S.xPercent&&(u.xPercent=ht(S.xPercent,O.xPercent)),null!=S.yPercent&&(u.yPercent=ht(S.yPercent,O.yPercent));else if("object"==typeof S){if(u={scaleX:ht(null!=S.scaleX?S.scaleX:S.scale,O.scaleX),scaleY:ht(null!=S.scaleY?S.scaleY:S.scale,O.scaleY),scaleZ:ht(S.scaleZ,O.scaleZ),x:ht(S.x,O.x),y:ht(S.y,O.y),z:ht(S.z,O.z),xPercent:ht(S.xPercent,O.xPercent),yPercent:ht(S.yPercent,O.yPercent),perspective:ht(S.transformPerspective,O.perspective)},d=S.directionalRotation,null!=d)if("object"==typeof d)for(c in d)S[c]=d[c];else S.rotation=d;"string"==typeof S.x&&S.x.indexOf("%")!==-1&&(u.x=0,u.xPercent=ht(S.x,O.xPercent)),"string"==typeof S.y&&S.y.indexOf("%")!==-1&&(u.y=0,u.yPercent=ht(S.y,O.yPercent)),u.rotation=ut("rotation"in S?S.rotation:"shortRotation"in S?S.shortRotation+"_short":"rotationZ"in S?S.rotationZ:O.rotation-O.skewY,O.rotation-O.skewY,"rotation",C),Dt&&(u.rotationX=ut("rotationX"in S?S.rotationX:"shortRotationX"in S?S.shortRotationX+"_short":O.rotationX||0,O.rotationX,"rotationX",C),u.rotationY=ut("rotationY"in S?S.rotationY:"shortRotationY"in S?S.shortRotationY+"_short":O.rotationY||0,O.rotationY,"rotationY",C)),u.skewX=ut(S.skewX,O.skewX-O.skewY),(u.skewY=ut(S.skewY,O.skewY))&&(u.skewX+=u.skewY,u.rotation+=u.skewY)}for(Dt&&null!=S.force3D&&(O.force3D=S.force3D,p=!0),O.skewType=S.skewType||O.skewType||o.defaultSkewType,f=O.force3D||O.z||O.rotationX||O.rotationY||u.z||u.rotationX||u.rotationY||u.perspective,f||null==S.scale||(u.scaleZ=1);--P>-1;)T=kt[P],A=u[T]-O[T],(A>x||A<-x||null!=S[T]||null!=z[T])&&(p=!0,r=new yt(O,T,O[T],A,r),T in C&&(r.e=C[T]),r.xs0=0,r.plugin=a,n._overwriteProps.push(r.n));return A=S.transformOrigin,O.svg&&(A||S.svgOrigin)&&(_=O.xOffset,m=O.yOffset,Lt(t,ot(A),u,S.svgOrigin,S.smoothOrigin),r=Tt(O,"xOrigin",(w?O:u).xOrigin,u.xOrigin,r,k),r=Tt(O,"yOrigin",(w?O:u).yOrigin,u.yOrigin,r,k),_===O.xOffset&&m===O.yOffset||(r=Tt(O,"xOffset",w?_:O.xOffset,O.xOffset,r,k),r=Tt(O,"yOffset",w?m:O.yOffset,O.yOffset,r,k)),A=Ct?null:"0px 0px"),(A||Dt&&f&&O.zOrigin)&&(Ot?(p=!0,T=Rt,A=(A||J(t,T,s,!1,"50% 50%"))+"",r=new yt(b,T,0,0,r,(-1),k),r.b=b[T],r.plugin=a,Dt?(c=O.zOrigin,A=A.split(" "),O.zOrigin=(A.length>2&&(0===c||"0px"!==A[2])?parseFloat(A[2]):c)||0,r.xs0=r.e=A[0]+" "+(A[1]||"50%")+" 0px",r=new yt(O,"zOrigin",0,0,r,(-1),r.n),r.b=c,r.xs0=r.e=O.zOrigin):r.xs0=r.e=A):ot(A+"",O)),p&&(n._transformType=O.svg&&Ct||!f&&3!==this._transformType?2:3),h&&(l[i]=h),r},prefix:!0}),Pt("boxShadow",{defaultValue:"0px 0px 0px 0px #999",prefix:!0,color:!0,multi:!0,keyword:"inset"}),Pt("borderRadius",{defaultValue:"0px",parser:function(t,e,i,n,a,o){e=this.format(e);var l,h,u,c,f,p,d,_,m,g,v,y,T,w,b,x,P=["borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius"],S=t.style;for(m=parseFloat(t.offsetWidth),g=parseFloat(t.offsetHeight),l=e.split(" "),h=0;h<P.length;h++)this.p.indexOf("border")&&(P[h]=Z(P[h])),f=c=J(t,P[h],s,!1,"0px"),f.indexOf(" ")!==-1&&(c=f.split(" "),f=c[0],c=c[1]),p=u=l[h],d=parseFloat(f),y=f.substr((d+"").length),T="="===p.charAt(1),T?(_=parseInt(p.charAt(0)+"1",10),p=p.substr(2),_*=parseFloat(p),v=p.substr((_+"").length-(_<0?1:0))||""):(_=parseFloat(p),v=p.substr((_+"").length)),""===v&&(v=r[i]||y),v!==y&&(w=tt(t,"borderLeft",d,y),b=tt(t,"borderTop",d,y),"%"===v?(f=w/m*100+"%",c=b/g*100+"%"):"em"===v?(x=tt(t,"borderLeft",1,"em"),f=w/x+"em",c=b/x+"em"):(f=w+"px",c=b+"px"),T&&(p=parseFloat(f)+_+v,u=parseFloat(c)+_+v)),a=wt(S,P[h],f+" "+c,p+" "+u,!1,"0px",a);return a},prefix:!0,formatter:mt("0px 0px 0px 0px",!1,!0)}),Pt("borderBottomLeftRadius,borderBottomRightRadius,borderTopLeftRadius,borderTopRightRadius",{defaultValue:"0px",parser:function(t,e,i,n,r,a){return wt(t.style,i,this.format(J(t,i,s,!1,"0px 0px")),this.format(e),!1,"0px",r)},prefix:!0,formatter:mt("0px 0px",!1,!0)}),Pt("backgroundPosition",{defaultValue:"0 0",parser:function(t,e,i,n,r,a){var o,l,h,u,c,f,p="background-position",d=s||K(t,null),_=this.format((d?m?d.getPropertyValue(p+"-x")+" "+d.getPropertyValue(p+"-y"):d.getPropertyValue(p):t.currentStyle.backgroundPositionX+" "+t.currentStyle.backgroundPositionY)||"0 0"),g=this.format(e);if(_.indexOf("%")!==-1!=(g.indexOf("%")!==-1)&&g.split(",").length<2&&(f=J(t,"backgroundImage").replace(R,""),f&&"none"!==f)){for(o=_.split(" "),l=g.split(" "),Y.setAttribute("src",f),h=2;--h>-1;)_=o[h],u=_.indexOf("%")!==-1,u!==(l[h].indexOf("%")!==-1)&&(c=0===h?t.offsetWidth-Y.width:t.offsetHeight-Y.height,o[h]=u?parseFloat(_)/100*c+"px":parseFloat(_)/c*100+"%");_=o.join(" ")}return this.parseComplex(t.style,_,g,r,a)},formatter:ot}),Pt("backgroundSize",{defaultValue:"0 0",formatter:function(t){return t+="",ot(t.indexOf(" ")===-1?t+" "+t:t)}}),Pt("perspective",{defaultValue:"0px",prefix:!0}),Pt("perspectiveOrigin",{defaultValue:"50% 50%",prefix:!0}),Pt("transformStyle",{prefix:!0}),Pt("backfaceVisibility",{prefix:!0}),Pt("userSelect",{prefix:!0}),Pt("margin",{parser:gt("marginTop,marginRight,marginBottom,marginLeft")}),Pt("padding",{parser:gt("paddingTop,paddingRight,paddingBottom,paddingLeft")}),Pt("clip",{defaultValue:"rect(0px,0px,0px,0px)",parser:function(t,e,i,n,r,a){var o,l,h;return m<9?(l=t.currentStyle,h=m<8?" ":",",o="rect("+l.clipTop+h+l.clipRight+h+l.clipBottom+h+l.clipLeft+")",e=this.format(e).split(",").join(h)):(o=this.format(J(t,this.p,s,!1,this.dflt)),e=this.format(e)),this.parseComplex(t.style,o,e,r,a)}}),Pt("textShadow",{defaultValue:"0px 0px 0px #999",color:!0,multi:!0}),Pt("autoRound,strictUnits",{parser:function(t,e,i,n,r){return r}}),Pt("border",{defaultValue:"0px solid #000",parser:function(t,e,i,n,r,a){var o=J(t,"borderTopWidth",s,!1,"0px"),l=this.format(e).split(" "),h=l[0].replace(x,"");return"px"!==h&&(o=parseFloat(o)/tt(t,"borderTopWidth",1,h)+h),this.parseComplex(t.style,this.format(o+" "+J(t,"borderTopStyle",s,!1,"solid")+" "+J(t,"borderTopColor",s,!1,"#000")),l.join(" "),r,a)},color:!0,formatter:function(t){var e=t.split(" ");return e[0]+" "+(e[1]||"solid")+" "+(t.match(_t)||["#000"])[0]}}),Pt("borderWidth",{parser:gt("borderTopWidth,borderRightWidth,borderBottomWidth,borderLeftWidth")}),Pt("float,cssFloat,styleFloat",{parser:function(t,e,i,n,r,s){var a=t.style,o="cssFloat"in a?"cssFloat":"styleFloat";return new yt(a,o,0,0,r,(-1),i,(!1),0,a[o],e)}});var Wt=function(t){var e,i=this.t,n=i.filter||J(this.data,"filter")||"",r=this.s+this.c*t|0;100===r&&(n.indexOf("atrix(")===-1&&n.indexOf("radient(")===-1&&n.indexOf("oader(")===-1?(i.removeAttribute("filter"),e=!J(this.data,"filter")):(i.filter=n.replace(C,""),e=!0)),e||(this.xn1&&(i.filter=n=n||"alpha(opacity="+r+")"),n.indexOf("pacity")===-1?0===r&&this.xn1||(i.filter=n+" alpha(opacity="+r+")"):i.filter=n.replace(P,"opacity="+r))};Pt("opacity,alpha,autoAlpha",{defaultValue:"1",parser:function(t,e,i,n,r,a){var o=parseFloat(J(t,"opacity",s,!1,"1")),l=t.style,h="autoAlpha"===i;return"string"==typeof e&&"="===e.charAt(1)&&(e=("-"===e.charAt(0)?-1:1)*parseFloat(e.substr(2))+o),h&&1===o&&"hidden"===J(t,"visibility",s)&&0!==e&&(o=0),U?r=new yt(l,"opacity",o,e-o,r):(r=new yt(l,"opacity",100*o,100*(e-o),r),r.xn1=h?1:0,l.zoom=1,r.type=2,r.b="alpha(opacity="+r.s+")",r.e="alpha(opacity="+(r.s+r.c)+")",r.data=t,r.plugin=a,r.setRatio=Wt),h&&(r=new yt(l,"visibility",0,0,r,(-1),null,(!1),0,0!==o?"inherit":"hidden",0===e?"hidden":"inherit"),r.xs0="inherit",n._overwriteProps.push(r.n),n._overwriteProps.push(i)),r}});var Ut=function(t,e){e&&(t.removeProperty?("ms"!==e.substr(0,2)&&"webkit"!==e.substr(0,6)||(e="-"+e),t.removeProperty(e.replace(O,"-$1").toLowerCase())):t.removeAttribute(e))},Vt=function(t){if(this.t._gsClassPT=this,1===t||0===t){this.t.setAttribute("class",0===t?this.b:this.e);for(var e=this.data,i=this.t.style;e;)e.v?i[e.p]=e.v:Ut(i,e.p),e=e._next;1===t&&this.t._gsClassPT===this&&(this.t._gsClassPT=null)}else this.t.getAttribute("class")!==this.e&&this.t.setAttribute("class",this.e)};Pt("className",{parser:function(t,e,i,r,a,o,l){var h,u,c,f,p,d=t.getAttribute("class")||"",_=t.style.cssText;if(a=r._classNamePT=new yt(t,i,0,0,a,2),a.setRatio=Vt,a.pr=-11,n=!0,a.b=d,u=it(t,s),c=t._gsClassPT){for(f={},p=c.data;p;)f[p.p]=1,p=p._next;c.setRatio(1)}return t._gsClassPT=a,a.e="="!==e.charAt(1)?e:d.replace(new RegExp("(?:\\s|^)"+e.substr(2)+"(?![\\w-])"),"")+("+"===e.charAt(0)?" "+e.substr(2):""),t.setAttribute("class",a.e),h=nt(t,u,it(t),l,f),t.setAttribute("class",d),a.data=h.firstMPT,t.style.cssText=_,a=a.xfirst=r.parse(t,h.difs,a,o)}});var $t=function(t){if((1===t||0===t)&&this.data._totalTime===this.data._totalDuration&&"isFromStart"!==this.data.data){var e,i,n,r,s,a=this.t.style,o=h.transform.parse;if("all"===this.e)a.cssText="",r=!0;else for(e=this.e.split(" ").join("").split(","),n=e.length;--n>-1;)i=e[n],h[i]&&(h[i].parse===o?r=!0:i="transformOrigin"===i?Rt:h[i].p),Ut(a,i);r&&(Ut(a,Ot),s=this.t._gsTransform,s&&(s.svg&&(this.t.removeAttribute("data-svg-origin"),this.t.removeAttribute("transform")),delete this.t._gsTransform))}};for(Pt("clearProps",{parser:function(t,e,i,r,s){return s=new yt(t,i,0,0,s,2),s.setRatio=$t,s.e=e,s.pr=-10,s.data=r._tween,n=!0,s}}),u="bezier,throwProps,physicsProps,physics2D".split(","),bt=u.length;bt--;)St(u[bt]);u=o.prototype,u._firstPT=u._lastParsedTransform=u._transform=null,u._onInitTween=function(t,e,i,l){if(!t.nodeType)return!1;this._target=g=t,this._tween=i,this._vars=e,v=l,c=e.autoRound,n=!1,r=e.suffixMap||o.suffixMap,s=K(t,""),a=this._overwriteProps;var u,d,m,y,T,w,b,x,P,C=t.style;if(f&&""===C.zIndex&&(u=J(t,"zIndex",s),"auto"!==u&&""!==u||this._addLazySet(C,"zIndex",0)),"string"==typeof e&&(y=C.cssText,u=it(t,s),C.cssText=y+";"+e,u=nt(t,u,it(t)).difs,!U&&S.test(e)&&(u.opacity=parseFloat(RegExp.$1)),e=u,C.cssText=y),e.className?this._firstPT=d=h.className.parse(t,e.className,"className",this,null,null,e):this._firstPT=d=this.parse(t,e,null),this._transformType){for(P=3===this._transformType,Ot?p&&(f=!0,""===C.zIndex&&(b=J(t,"zIndex",s),"auto"!==b&&""!==b||this._addLazySet(C,"zIndex",0)),_&&this._addLazySet(C,"WebkitBackfaceVisibility",this._vars.WebkitBackfaceVisibility||(P?"visible":"hidden"))):C.zoom=1,m=d;m&&m._next;)m=m._next;x=new yt(t,"transform",0,0,null,2),this._linkCSSP(x,null,m),x.setRatio=Ot?Ht:Yt,x.data=this._transform||Xt(t,s,!0),x.tween=i,x.pr=-1,a.pop()}if(n){for(;d;){for(w=d._next,m=y;m&&m.pr>d.pr;)m=m._next;(d._prev=m?m._prev:T)?d._prev._next=d:y=d,(d._next=m)?m._prev=d:T=d,d=w}this._firstPT=y}return!0},u.parse=function(t,e,i,n){var a,o,l,u,f,p,d,_,m,y,T=t.style;for(a in e)p=e[a],"function"==typeof p&&(p=p(v,g)),o=h[a],o?i=o.parse(t,p,a,this,i,n,e):(f=J(t,a,s)+"",m="string"==typeof p,"color"===a||"fill"===a||"stroke"===a||a.indexOf("Color")!==-1||m&&k.test(p)?(m||(p=pt(p),p=(p.length>3?"rgba(":"rgb(")+p.join(",")+")"),i=wt(T,a,f,p,!0,"transparent",i,0,n)):m&&N.test(p)?i=wt(T,a,f,p,!0,null,i,0,n):(l=parseFloat(f),d=l||0===l?f.substr((l+"").length):"",""!==f&&"auto"!==f||("width"===a||"height"===a?(l=at(t,a,s),d="px"):"left"===a||"top"===a?(l=et(t,a,s),d="px"):(l="opacity"!==a?0:1,d="")),y=m&&"="===p.charAt(1),y?(u=parseInt(p.charAt(0)+"1",10),p=p.substr(2),u*=parseFloat(p),_=p.replace(x,"")):(u=parseFloat(p),_=m?p.replace(x,""):""),""===_&&(_=a in r?r[a]:d),p=u||0===u?(y?u+l:u)+_:e[a],d!==_&&""!==_&&(u||0===u)&&l&&(l=tt(t,a,l,d),"%"===_?(l/=tt(t,a,100,"%")/100,e.strictUnits!==!0&&(f=l+"%")):"em"===_||"rem"===_||"vw"===_||"vh"===_?l/=tt(t,a,1,_):"px"!==_&&(u=tt(t,a,u,_),_="px"),y&&(u||0===u)&&(p=u+l+_)),y&&(u+=l),!l&&0!==l||!u&&0!==u?void 0!==T[a]&&(p||p+""!="NaN"&&null!=p)?(i=new yt(T,a,u||l||0,0,i,(-1),a,(!1),0,f,p),i.xs0="none"!==p||"display"!==a&&a.indexOf("Style")===-1?p:f):$("invalid "+a+" tween value: "+e[a]):(i=new yt(T,a,l,u-l,i,0,a,c!==!1&&("px"===_||"zIndex"===a),0,f,p),i.xs0=_))),n&&i&&!i.plugin&&(i.plugin=n);return i},u.setRatio=function(t){var e,i,n,r=this._firstPT,s=1e-6;if(1!==t||this._tween._time!==this._tween._duration&&0!==this._tween._time)if(t||this._tween._time!==this._tween._duration&&0!==this._tween._time||this._tween._rawPrevTime===-1e-6)for(;r;){if(e=r.c*t+r.s,r.r?e=Math.round(e):e<s&&e>-s&&(e=0),r.type)if(1===r.type)if(n=r.l,2===n)r.t[r.p]=r.xs0+e+r.xs1+r.xn1+r.xs2;else if(3===n)r.t[r.p]=r.xs0+e+r.xs1+r.xn1+r.xs2+r.xn2+r.xs3;else if(4===n)r.t[r.p]=r.xs0+e+r.xs1+r.xn1+r.xs2+r.xn2+r.xs3+r.xn3+r.xs4;else if(5===n)r.t[r.p]=r.xs0+e+r.xs1+r.xn1+r.xs2+r.xn2+r.xs3+r.xn3+r.xs4+r.xn4+r.xs5;else{for(i=r.xs0+e+r.xs1,n=1;n<r.l;n++)i+=r["xn"+n]+r["xs"+(n+1)];r.t[r.p]=i}else r.type===-1?r.t[r.p]=r.xs0:r.setRatio&&r.setRatio(t);else r.t[r.p]=e+r.xs0;r=r._next}else for(;r;)2!==r.type?r.t[r.p]=r.b:r.setRatio(t),r=r._next;else for(;r;){if(2!==r.type)if(r.r&&r.type!==-1)if(e=Math.round(r.s+r.c),r.type){if(1===r.type){for(n=r.l,i=r.xs0+e+r.xs1,n=1;n<r.l;n++)i+=r["xn"+n]+r["xs"+(n+1)];r.t[r.p]=i}}else r.t[r.p]=e+r.xs0;else r.t[r.p]=r.e;else r.setRatio(t);r=r._next}},u._enableTransforms=function(t){this._transform=this._transform||Xt(this._target,s,!0),this._transformType=this._transform.svg&&Ct||!t&&3!==this._transformType?2:3};var Gt=function(t){this.t[this.p]=this.e,this.data._linkCSSP(this,this._next,null,!0)};u._addLazySet=function(t,e,i){var n=this._firstPT=new yt(t,e,0,0,this._firstPT,2);n.e=i,n.setRatio=Gt,n.data=this},u._linkCSSP=function(t,e,i,n){return t&&(e&&(e._prev=t),t._next&&(t._next._prev=t._prev),t._prev?t._prev._next=t._next:this._firstPT===t&&(this._firstPT=t._next,n=!0),i?i._next=t:n||null!==this._firstPT||(this._firstPT=t),t._next=e,t._prev=i),t},u._mod=function(t){for(var e=this._firstPT;e;)"function"==typeof t[e.p]&&t[e.p]===Math.round&&(e.r=1),e=e._next},u._kill=function(e){var i,n,r,s=e;if(e.autoAlpha||e.alpha){s={};for(n in e)s[n]=e[n];s.opacity=1,s.autoAlpha&&(s.visibility=1)}for(e.className&&(i=this._classNamePT)&&(r=i.xfirst,r&&r._prev?this._linkCSSP(r._prev,i._next,r._prev._prev):r===this._firstPT&&(this._firstPT=i._next),i._next&&this._linkCSSP(i._next,i._next._next,r._prev),this._classNamePT=null),i=this._firstPT;i;)i.plugin&&i.plugin!==n&&i.plugin._kill&&(i.plugin._kill(e),n=i.plugin),i=i._next;return t.prototype._kill.call(this,s)};var Qt=function(t,e,i){var n,r,s,a;if(t.slice)for(r=t.length;--r>-1;)Qt(t[r],e,i);else for(n=t.childNodes,r=n.length;--r>-1;)s=n[r],a=s.type,s.style&&(e.push(it(s)),i&&i.push(s)),1!==a&&9!==a&&11!==a||!s.childNodes.length||Qt(s,e,i)};return o.cascadeTo=function(t,i,n){var r,s,a,o,l=e.to(t,i,n),h=[l],u=[],c=[],f=[],p=e._internals.reservedProps;for(t=l._targets||l.target,Qt(t,u,f),l.render(i,!0,!0),Qt(t,c),l.render(0,!0,!0),l._enabled(!0),r=f.length;--r>-1;)if(s=nt(f[r],u[r],c[r]),s.firstMPT){s=s.difs;for(a in n)p[a]&&(s[a]=n[a]);o={};for(a in s)o[a]=u[r][a];h.push(e.fromTo(f[r],i,o,s))}return h},t.activate([o]),o},!0),function(){var t=i._gsDefine.plugin({propName:"roundProps",version:"1.6.0",priority:-1,API:2,init:function(t,e,i){return this._tween=i,!0}}),e=function(t){for(;t;)t.f||t.blob||(t.m=Math.round),t=t._next},n=t.prototype;n._onInitAllProps=function(){for(var t,i,n,r=this._tween,s=r.vars.roundProps.join?r.vars.roundProps:r.vars.roundProps.split(","),a=s.length,o={},l=r._propLookup.roundProps;--a>-1;)o[s[a]]=Math.round;for(a=s.length;--a>-1;)for(t=s[a],i=r._firstPT;i;)n=i._next,i.pg?i.t._mod(o):i.n===t&&(2===i.f&&i.t?e(i.t._firstPT):(this._add(i.t,t,i.s,i.c),n&&(n._prev=i._prev),i._prev?i._prev._next=n:r._firstPT===i&&(r._firstPT=n),i._next=i._prev=null,r._propLookup[t]=l)),i=n;return!1},n._add=function(t,e,i,n){this._addTween(t,e,i,i+n,e,Math.round),this._overwriteProps.push(e)}}(),function(){i._gsDefine.plugin({propName:"attr",API:2,version:"0.6.0",init:function(t,e,i,n){var r,s;if("function"!=typeof t.setAttribute)return!1;for(r in e)s=e[r],"function"==typeof s&&(s=s(n,t)),this._addTween(t,"setAttribute",t.getAttribute(r)+"",s+"",r,!1,r),this._overwriteProps.push(r);return!0}})}(),i._gsDefine.plugin({propName:"directionalRotation",version:"0.3.0",API:2,init:function(t,e,i,n){"object"!=typeof e&&(e={rotation:e}),this.finals={};var r,s,a,o,l,h,u=e.useRadians===!0?2*Math.PI:360,c=1e-6;for(r in e)"useRadians"!==r&&(o=e[r],"function"==typeof o&&(o=o(n,t)),h=(o+"").split("_"),s=h[0],a=parseFloat("function"!=typeof t[r]?t[r]:t[r.indexOf("set")||"function"!=typeof t["get"+r.substr(3)]?r:"get"+r.substr(3)]()),o=this.finals[r]="string"==typeof s&&"="===s.charAt(1)?a+parseInt(s.charAt(0)+"1",10)*Number(s.substr(2)):Number(s)||0,l=o-a,h.length&&(s=h.join("_"),s.indexOf("short")!==-1&&(l%=u,l!==l%(u/2)&&(l=l<0?l+u:l-u)),s.indexOf("_cw")!==-1&&l<0?l=(l+9999999999*u)%u-(l/u|0)*u:s.indexOf("ccw")!==-1&&l>0&&(l=(l-9999999999*u)%u-(l/u|0)*u)),(l>c||l<-c)&&(this._addTween(t,r,a,a+l,r),this._overwriteProps.push(r)));return!0},set:function(t){var e;if(1!==t)this._super.setRatio.call(this,t);else for(e=this._firstPT;e;)e.f?e.t[e.p](this.finals[e.p]):e.t[e.p]=this.finals[e.p],e=e._next}})._autoCSS=!0,i._gsDefine("easing.Back",["easing.Ease"],function(t){var e,n,r,s=i.GreenSockGlobals||i,a=s.com.greensock,o=2*Math.PI,l=Math.PI/2,h=a._class,u=function(e,i){var n=h("easing."+e,function(){},!0),r=n.prototype=new t;return r.constructor=n,r.getRatio=i,n},c=t.register||function(){},f=function(t,e,i,n,r){var s=h("easing."+t,{easeOut:new e,easeIn:new i,easeInOut:new n},!0);return c(s,t),s},p=function(t,e,i){this.t=t,this.v=e,i&&(this.next=i,i.prev=this,this.c=i.v-e,this.gap=i.t-t)},d=function(e,i){var n=h("easing."+e,function(t){this._p1=t||0===t?t:1.70158,this._p2=1.525*this._p1},!0),r=n.prototype=new t;return r.constructor=n,r.getRatio=i,r.config=function(t){return new n(t)},n},_=f("Back",d("BackOut",function(t){return(t-=1)*t*((this._p1+1)*t+this._p1)+1}),d("BackIn",function(t){return t*t*((this._p1+1)*t-this._p1)}),d("BackInOut",function(t){return(t*=2)<1?.5*t*t*((this._p2+1)*t-this._p2):.5*((t-=2)*t*((this._p2+1)*t+this._p2)+2)})),m=h("easing.SlowMo",function(t,e,i){e=e||0===e?e:.7,null==t?t=.7:t>1&&(t=1),this._p=1!==t?e:0,this._p1=(1-t)/2,this._p2=t,this._p3=this._p1+this._p2,this._calcEnd=i===!0},!0),g=m.prototype=new t;return g.constructor=m,g.getRatio=function(t){var e=t+(.5-t)*this._p;return t<this._p1?this._calcEnd?1-(t=1-t/this._p1)*t:e-(t=1-t/this._p1)*t*t*t*e:t>this._p3?this._calcEnd?1-(t=(t-this._p3)/this._p1)*t:e+(t-e)*(t=(t-this._p3)/this._p1)*t*t*t:this._calcEnd?1:e},m.ease=new m(.7,.7),g.config=m.config=function(t,e,i){return new m(t,e,i)},e=h("easing.SteppedEase",function(t){t=t||1,this._p1=1/t,this._p2=t+1},!0),g=e.prototype=new t,g.constructor=e,g.getRatio=function(t){return t<0?t=0:t>=1&&(t=.999999999),(this._p2*t>>0)*this._p1},g.config=e.config=function(t){return new e(t)},n=h("easing.RoughEase",function(e){e=e||{};for(var i,n,r,s,a,o,l=e.taper||"none",h=[],u=0,c=0|(e.points||20),f=c,d=e.randomize!==!1,_=e.clamp===!0,m=e.template instanceof t?e.template:null,g="number"==typeof e.strength?.4*e.strength:.4;--f>-1;)i=d?Math.random():1/c*f,n=m?m.getRatio(i):i,"none"===l?r=g:"out"===l?(s=1-i,r=s*s*g):"in"===l?r=i*i*g:i<.5?(s=2*i,r=s*s*.5*g):(s=2*(1-i),r=s*s*.5*g),d?n+=Math.random()*r-.5*r:f%2?n+=.5*r:n-=.5*r,_&&(n>1?n=1:n<0&&(n=0)),h[u++]={x:i,y:n};for(h.sort(function(t,e){return t.x-e.x}),o=new p(1,1,null),f=c;--f>-1;)a=h[f],o=new p(a.x,a.y,o);this._prev=new p(0,0,0!==o.t?o:o.next)},!0),g=n.prototype=new t,g.constructor=n,g.getRatio=function(t){var e=this._prev;if(t>e.t){for(;e.next&&t>=e.t;)e=e.next;e=e.prev}else for(;e.prev&&t<=e.t;)e=e.prev;return this._prev=e,e.v+(t-e.t)/e.gap*e.c},g.config=function(t){return new n(t)},n.ease=new n,f("Bounce",u("BounceOut",function(t){return t<1/2.75?7.5625*t*t:t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375}),u("BounceIn",function(t){return(t=1-t)<1/2.75?1-7.5625*t*t:t<2/2.75?1-(7.5625*(t-=1.5/2.75)*t+.75):t<2.5/2.75?1-(7.5625*(t-=2.25/2.75)*t+.9375):1-(7.5625*(t-=2.625/2.75)*t+.984375)}),u("BounceInOut",function(t){var e=t<.5;return t=e?1-2*t:2*t-1,t=t<1/2.75?7.5625*t*t:t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375,e?.5*(1-t):.5*t+.5})),f("Circ",u("CircOut",function(t){return Math.sqrt(1-(t-=1)*t)}),u("CircIn",function(t){return-(Math.sqrt(1-t*t)-1)}),u("CircInOut",function(t){return(t*=2)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1)})),r=function(e,i,n){var r=h("easing."+e,function(t,e){this._p1=t>=1?t:1,this._p2=(e||n)/(t<1?t:1),this._p3=this._p2/o*(Math.asin(1/this._p1)||0),this._p2=o/this._p2},!0),s=r.prototype=new t;return s.constructor=r,s.getRatio=i,s.config=function(t,e){return new r(t,e)},r},f("Elastic",r("ElasticOut",function(t){return this._p1*Math.pow(2,-10*t)*Math.sin((t-this._p3)*this._p2)+1},.3),r("ElasticIn",function(t){return-(this._p1*Math.pow(2,10*(t-=1))*Math.sin((t-this._p3)*this._p2))},.3),r("ElasticInOut",function(t){return(t*=2)<1?-.5*(this._p1*Math.pow(2,10*(t-=1))*Math.sin((t-this._p3)*this._p2)):this._p1*Math.pow(2,-10*(t-=1))*Math.sin((t-this._p3)*this._p2)*.5+1},.45)),f("Expo",u("ExpoOut",function(t){return 1-Math.pow(2,-10*t)}),u("ExpoIn",function(t){return Math.pow(2,10*(t-1))-.001}),u("ExpoInOut",function(t){return(t*=2)<1?.5*Math.pow(2,10*(t-1)):.5*(2-Math.pow(2,-10*(t-1)))})),f("Sine",u("SineOut",function(t){return Math.sin(t*l)}),u("SineIn",function(t){return-Math.cos(t*l)+1}),u("SineInOut",function(t){return-.5*(Math.cos(Math.PI*t)-1)})),h("easing.EaseLookup",{find:function(e){return t.map[e]}},!0),c(s.SlowMo,"SlowMo","ease,"),c(n,"RoughEase","ease,"),c(e,"SteppedEase","ease,"),_},!0)}),i._gsDefine&&i._gsQueue.pop()(),function(t,i){"use strict";var n={},r=t.GreenSockGlobals=t.GreenSockGlobals||t;if(!r.TweenLite){var s,a,o,l,h,u=function(t){var e,i=t.split("."),n=r;for(e=0;e<i.length;e++)n[i[e]]=n=n[i[e]]||{};return n},c=u("com.greensock"),f=1e-10,p=function(t){var e,i=[],n=t.length;for(e=0;e!==n;i.push(t[e++]));return i},d=function(){},_=function(){var t=Object.prototype.toString,e=t.call([]);return function(i){return null!=i&&(i instanceof Array||"object"==typeof i&&!!i.push&&t.call(i)===e)}}(),m={},g=function(s,a,o,l){this.sc=m[s]?m[s].sc:[],m[s]=this,this.gsClass=null,this.func=o;var h=[];this.check=function(c){for(var f,p,d,_,v,y=a.length,T=y;--y>-1;)(f=m[a[y]]||new g(a[y],[])).gsClass?(h[y]=f.gsClass,T--):c&&f.sc.push(this);if(0===T&&o){if(p=("com.greensock."+s).split("."),d=p.pop(),_=u(p.join("."))[d]=this.gsClass=o.apply(o,h),l)if(r[d]=n[d]=_,v="undefined"!=typeof e&&e.exports,!v&&"function"==typeof define&&define.amd)define((t.GreenSockAMDPath?t.GreenSockAMDPath+"/":"")+s.split(".").pop(),[],function(){return _});else if(v)if(s===i){e.exports=n[i]=_;for(y in n)_[y]=n[y]}else n[i]&&(n[i][d]=_);for(y=0;y<this.sc.length;y++)this.sc[y].check()}},this.check(!0)},v=t._gsDefine=function(t,e,i,n){return new g(t,e,i,n)},y=c._class=function(t,e,i){return e=e||function(){},v(t,[],function(){return e},i),e};v.globals=r;var T=[0,0,1,1],w=y("easing.Ease",function(t,e,i,n){this._func=t,this._type=i||0,this._power=n||0,this._params=e?T.concat(e):T},!0),b=w.map={},x=w.register=function(t,e,i,n){for(var r,s,a,o,l=e.split(","),h=l.length,u=(i||"easeIn,easeOut,easeInOut").split(",");--h>-1;)for(s=l[h],r=n?y("easing."+s,null,!0):c.easing[s]||{},a=u.length;--a>-1;)o=u[a],b[s+"."+o]=b[o+s]=r[o]=t.getRatio?t:t[o]||new t};for(o=w.prototype,o._calcEnd=!1,o.getRatio=function(t){if(this._func)return this._params[0]=t,this._func.apply(null,this._params);var e=this._type,i=this._power,n=1===e?1-t:2===e?t:t<.5?2*t:2*(1-t);return 1===i?n*=n:2===i?n*=n*n:3===i?n*=n*n*n:4===i&&(n*=n*n*n*n),1===e?1-n:2===e?n:t<.5?n/2:1-n/2;
},s=["Linear","Quad","Cubic","Quart","Quint,Strong"],a=s.length;--a>-1;)o=s[a]+",Power"+a,x(new w(null,null,1,a),o,"easeOut",!0),x(new w(null,null,2,a),o,"easeIn"+(0===a?",easeNone":"")),x(new w(null,null,3,a),o,"easeInOut");b.linear=c.easing.Linear.easeIn,b.swing=c.easing.Quad.easeInOut;var P=y("events.EventDispatcher",function(t){this._listeners={},this._eventTarget=t||this});o=P.prototype,o.addEventListener=function(t,e,i,n,r){r=r||0;var s,a,o=this._listeners[t],u=0;for(this!==l||h||l.wake(),null==o&&(this._listeners[t]=o=[]),a=o.length;--a>-1;)s=o[a],s.c===e&&s.s===i?o.splice(a,1):0===u&&s.pr<r&&(u=a+1);o.splice(u,0,{c:e,s:i,up:n,pr:r})},o.removeEventListener=function(t,e){var i,n=this._listeners[t];if(n)for(i=n.length;--i>-1;)if(n[i].c===e)return void n.splice(i,1)},o.dispatchEvent=function(t){var e,i,n,r=this._listeners[t];if(r)for(e=r.length,e>1&&(r=r.slice(0)),i=this._eventTarget;--e>-1;)n=r[e],n&&(n.up?n.c.call(n.s||i,{type:t,target:i}):n.c.call(n.s||i))};var S=t.requestAnimationFrame,C=t.cancelAnimationFrame,k=Date.now||function(){return(new Date).getTime()},O=k();for(s=["ms","moz","webkit","o"],a=s.length;--a>-1&&!S;)S=t[s[a]+"RequestAnimationFrame"],C=t[s[a]+"CancelAnimationFrame"]||t[s[a]+"CancelRequestAnimationFrame"];y("Ticker",function(t,e){var i,n,r,s,a,o=this,u=k(),c=!(e===!1||!S)&&"auto",p=500,_=33,m="tick",g=function(t){var e,l,h=k()-O;h>p&&(u+=h-_),O+=h,o.time=(O-u)/1e3,e=o.time-a,(!i||e>0||t===!0)&&(o.frame++,a+=e+(e>=s?.004:s-e),l=!0),t!==!0&&(r=n(g)),l&&o.dispatchEvent(m)};P.call(o),o.time=o.frame=0,o.tick=function(){g(!0)},o.lagSmoothing=function(t,e){p=t||1/f,_=Math.min(e,p,0)},o.sleep=function(){null!=r&&(c&&C?C(r):clearTimeout(r),n=d,r=null,o===l&&(h=!1))},o.wake=function(t){null!==r?o.sleep():t?u+=-O+(O=k()):o.frame>10&&(O=k()-p+5),n=0===i?d:c&&S?S:function(t){return setTimeout(t,1e3*(a-o.time)+1|0)},o===l&&(h=!0),g(2)},o.fps=function(t){return arguments.length?(i=t,s=1/(i||60),a=this.time+s,void o.wake()):i},o.useRAF=function(t){return arguments.length?(o.sleep(),c=t,void o.fps(i)):c},o.fps(t),setTimeout(function(){"auto"===c&&o.frame<5&&"hidden"!==document.visibilityState&&o.useRAF(!1)},1500)}),o=c.Ticker.prototype=new c.events.EventDispatcher,o.constructor=c.Ticker;var A=y("core.Animation",function(t,e){if(this.vars=e=e||{},this._duration=this._totalDuration=t||0,this._delay=Number(e.delay)||0,this._timeScale=1,this._active=e.immediateRender===!0,this.data=e.data,this._reversed=e.reversed===!0,$){h||l.wake();var i=this.vars.useFrames?V:$;i.add(this,i._time),this.vars.paused&&this.paused(!0)}});l=A.ticker=new c.Ticker,o=A.prototype,o._dirty=o._gc=o._initted=o._paused=!1,o._totalTime=o._time=0,o._rawPrevTime=-1,o._next=o._last=o._onUpdate=o._timeline=o.timeline=null,o._paused=!1;var R=function(){h&&k()-O>2e3&&l.wake(),setTimeout(R,2e3)};R(),o.play=function(t,e){return null!=t&&this.seek(t,e),this.reversed(!1).paused(!1)},o.pause=function(t,e){return null!=t&&this.seek(t,e),this.paused(!0)},o.resume=function(t,e){return null!=t&&this.seek(t,e),this.paused(!1)},o.seek=function(t,e){return this.totalTime(Number(t),e!==!1)},o.restart=function(t,e){return this.reversed(!1).paused(!1).totalTime(t?-this._delay:0,e!==!1,!0)},o.reverse=function(t,e){return null!=t&&this.seek(t||this.totalDuration(),e),this.reversed(!0).paused(!1)},o.render=function(t,e,i){},o.invalidate=function(){return this._time=this._totalTime=0,this._initted=this._gc=!1,this._rawPrevTime=-1,!this._gc&&this.timeline||this._enabled(!0),this},o.isActive=function(){var t,e=this._timeline,i=this._startTime;return!e||!this._gc&&!this._paused&&e.isActive()&&(t=e.rawTime())>=i&&t<i+this.totalDuration()/this._timeScale},o._enabled=function(t,e){return h||l.wake(),this._gc=!t,this._active=this.isActive(),e!==!0&&(t&&!this.timeline?this._timeline.add(this,this._startTime-this._delay):!t&&this.timeline&&this._timeline._remove(this,!0)),!1},o._kill=function(t,e){return this._enabled(!1,!1)},o.kill=function(t,e){return this._kill(t,e),this},o._uncache=function(t){for(var e=t?this:this.timeline;e;)e._dirty=!0,e=e.timeline;return this},o._swapSelfInParams=function(t){for(var e=t.length,i=t.concat();--e>-1;)"{self}"===t[e]&&(i[e]=this);return i},o._callback=function(t){var e=this.vars,i=e[t],n=e[t+"Params"],r=e[t+"Scope"]||e.callbackScope||this,s=n?n.length:0;switch(s){case 0:i.call(r);break;case 1:i.call(r,n[0]);break;case 2:i.call(r,n[0],n[1]);break;default:i.apply(r,n)}},o.eventCallback=function(t,e,i,n){if("on"===(t||"").substr(0,2)){var r=this.vars;if(1===arguments.length)return r[t];null==e?delete r[t]:(r[t]=e,r[t+"Params"]=_(i)&&i.join("").indexOf("{self}")!==-1?this._swapSelfInParams(i):i,r[t+"Scope"]=n),"onUpdate"===t&&(this._onUpdate=e)}return this},o.delay=function(t){return arguments.length?(this._timeline.smoothChildTiming&&this.startTime(this._startTime+t-this._delay),this._delay=t,this):this._delay},o.duration=function(t){return arguments.length?(this._duration=this._totalDuration=t,this._uncache(!0),this._timeline.smoothChildTiming&&this._time>0&&this._time<this._duration&&0!==t&&this.totalTime(this._totalTime*(t/this._duration),!0),this):(this._dirty=!1,this._duration)},o.totalDuration=function(t){return this._dirty=!1,arguments.length?this.duration(t):this._totalDuration},o.time=function(t,e){return arguments.length?(this._dirty&&this.totalDuration(),this.totalTime(t>this._duration?this._duration:t,e)):this._time},o.totalTime=function(t,e,i){if(h||l.wake(),!arguments.length)return this._totalTime;if(this._timeline){if(t<0&&!i&&(t+=this.totalDuration()),this._timeline.smoothChildTiming){this._dirty&&this.totalDuration();var n=this._totalDuration,r=this._timeline;if(t>n&&!i&&(t=n),this._startTime=(this._paused?this._pauseTime:r._time)-(this._reversed?n-t:t)/this._timeScale,r._dirty||this._uncache(!1),r._timeline)for(;r._timeline;)r._timeline._time!==(r._startTime+r._totalTime)/r._timeScale&&r.totalTime(r._totalTime,!0),r=r._timeline}this._gc&&this._enabled(!0,!1),this._totalTime===t&&0!==this._duration||(F.length&&Q(),this.render(t,e,!1),F.length&&Q())}return this},o.progress=o.totalProgress=function(t,e){var i=this.duration();return arguments.length?this.totalTime(i*t,e):i?this._time/i:this.ratio},o.startTime=function(t){return arguments.length?(t!==this._startTime&&(this._startTime=t,this.timeline&&this.timeline._sortChildren&&this.timeline.add(this,t-this._delay)),this):this._startTime},o.endTime=function(t){return this._startTime+(0!=t?this.totalDuration():this.duration())/this._timeScale},o.timeScale=function(t){if(!arguments.length)return this._timeScale;if(t=t||f,this._timeline&&this._timeline.smoothChildTiming){var e=this._pauseTime,i=e||0===e?e:this._timeline.totalTime();this._startTime=i-(i-this._startTime)*this._timeScale/t}return this._timeScale=t,this._uncache(!1)},o.reversed=function(t){return arguments.length?(t!=this._reversed&&(this._reversed=t,this.totalTime(this._timeline&&!this._timeline.smoothChildTiming?this.totalDuration()-this._totalTime:this._totalTime,!0)),this):this._reversed},o.paused=function(t){if(!arguments.length)return this._paused;var e,i,n=this._timeline;return t!=this._paused&&n&&(h||t||l.wake(),e=n.rawTime(),i=e-this._pauseTime,!t&&n.smoothChildTiming&&(this._startTime+=i,this._uncache(!1)),this._pauseTime=t?e:null,this._paused=t,this._active=this.isActive(),!t&&0!==i&&this._initted&&this.duration()&&(e=n.smoothChildTiming?this._totalTime:(e-this._startTime)/this._timeScale,this.render(e,e===this._totalTime,!0))),this._gc&&!t&&this._enabled(!0,!1),this};var D=y("core.SimpleTimeline",function(t){A.call(this,0,t),this.autoRemoveChildren=this.smoothChildTiming=!0});o=D.prototype=new A,o.constructor=D,o.kill()._gc=!1,o._first=o._last=o._recent=null,o._sortChildren=!1,o.add=o.insert=function(t,e,i,n){var r,s;if(t._startTime=Number(e||0)+t._delay,t._paused&&this!==t._timeline&&(t._pauseTime=t._startTime+(this.rawTime()-t._startTime)/t._timeScale),t.timeline&&t.timeline._remove(t,!0),t.timeline=t._timeline=this,t._gc&&t._enabled(!0,!0),r=this._last,this._sortChildren)for(s=t._startTime;r&&r._startTime>s;)r=r._prev;return r?(t._next=r._next,r._next=t):(t._next=this._first,this._first=t),t._next?t._next._prev=t:this._last=t,t._prev=r,this._recent=t,this._timeline&&this._uncache(!0),this},o._remove=function(t,e){return t.timeline===this&&(e||t._enabled(!1,!0),t._prev?t._prev._next=t._next:this._first===t&&(this._first=t._next),t._next?t._next._prev=t._prev:this._last===t&&(this._last=t._prev),t._next=t._prev=t.timeline=null,t===this._recent&&(this._recent=this._last),this._timeline&&this._uncache(!0)),this},o.render=function(t,e,i){var n,r=this._first;for(this._totalTime=this._time=this._rawPrevTime=t;r;)n=r._next,(r._active||t>=r._startTime&&!r._paused)&&(r._reversed?r.render((r._dirty?r.totalDuration():r._totalDuration)-(t-r._startTime)*r._timeScale,e,i):r.render((t-r._startTime)*r._timeScale,e,i)),r=n},o.rawTime=function(){return h||l.wake(),this._totalTime};var M=y("TweenLite",function(e,i,n){if(A.call(this,i,n),this.render=M.prototype.render,null==e)throw"Cannot tween a null target.";this.target=e="string"!=typeof e?e:M.selector(e)||e;var r,s,a,o=e.jquery||e.length&&e!==t&&e[0]&&(e[0]===t||e[0].nodeType&&e[0].style&&!e.nodeType),l=this.vars.overwrite;if(this._overwrite=l=null==l?U[M.defaultOverwrite]:"number"==typeof l?l>>0:U[l],(o||e instanceof Array||e.push&&_(e))&&"number"!=typeof e[0])for(this._targets=a=p(e),this._propLookup=[],this._siblings=[],r=0;r<a.length;r++)s=a[r],s?"string"!=typeof s?s.length&&s!==t&&s[0]&&(s[0]===t||s[0].nodeType&&s[0].style&&!s.nodeType)?(a.splice(r--,1),this._targets=a=a.concat(p(s))):(this._siblings[r]=Z(s,this,!1),1===l&&this._siblings[r].length>1&&J(s,this,null,1,this._siblings[r])):(s=a[r--]=M.selector(s),"string"==typeof s&&a.splice(r+1,1)):a.splice(r--,1);else this._propLookup={},this._siblings=Z(e,this,!1),1===l&&this._siblings.length>1&&J(e,this,null,1,this._siblings);(this.vars.immediateRender||0===i&&0===this._delay&&this.vars.immediateRender!==!1)&&(this._time=-f,this.render(Math.min(0,-this._delay)))},!0),j=function(e){return e&&e.length&&e!==t&&e[0]&&(e[0]===t||e[0].nodeType&&e[0].style&&!e.nodeType)},E=function(t,e){var i,n={};for(i in t)W[i]||i in e&&"transform"!==i&&"x"!==i&&"y"!==i&&"width"!==i&&"height"!==i&&"className"!==i&&"border"!==i||!(!X[i]||X[i]&&X[i]._autoCSS)||(n[i]=t[i],delete t[i]);t.css=n};o=M.prototype=new A,o.constructor=M,o.kill()._gc=!1,o.ratio=0,o._firstPT=o._targets=o._overwrittenProps=o._startAt=null,o._notifyPluginsOfEnabled=o._lazy=!1,M.version="1.19.0",M.defaultEase=o._ease=new w(null,null,1,1),M.defaultOverwrite="auto",M.ticker=l,M.autoSleep=120,M.lagSmoothing=function(t,e){l.lagSmoothing(t,e)},M.selector=t.$||t.jQuery||function(e){var i=t.$||t.jQuery;return i?(M.selector=i,i(e)):"undefined"==typeof document?e:document.querySelectorAll?document.querySelectorAll(e):document.getElementById("#"===e.charAt(0)?e.substr(1):e)};var F=[],N={},L=/(?:(-|-=|\+=)?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/gi,I=function(t){for(var e,i=this._firstPT,n=1e-6;i;)e=i.blob?t?this.join(""):this.start:i.c*t+i.s,i.m?e=i.m(e,this._target||i.t):e<n&&e>-n&&(e=0),i.f?i.fp?i.t[i.p](i.fp,e):i.t[i.p](e):i.t[i.p]=e,i=i._next},z=function(t,e,i,n){var r,s,a,o,l,h,u,c=[t,e],f=0,p="",d=0;for(c.start=t,i&&(i(c),t=c[0],e=c[1]),c.length=0,r=t.match(L)||[],s=e.match(L)||[],n&&(n._next=null,n.blob=1,c._firstPT=c._applyPT=n),l=s.length,o=0;o<l;o++)u=s[o],h=e.substr(f,e.indexOf(u,f)-f),p+=h||!o?h:",",f+=h.length,d?d=(d+1)%5:"rgba("===h.substr(-5)&&(d=1),u===r[o]||r.length<=o?p+=u:(p&&(c.push(p),p=""),a=parseFloat(r[o]),c.push(a),c._firstPT={_next:c._firstPT,t:c,p:c.length-1,s:a,c:("="===u.charAt(1)?parseInt(u.charAt(0)+"1",10)*parseFloat(u.substr(2)):parseFloat(u)-a)||0,f:0,m:d&&d<4?Math.round:0}),f+=u.length;return p+=e.substr(f),p&&c.push(p),c.setRatio=I,c},q=function(t,e,i,n,r,s,a,o,l){"function"==typeof n&&(n=n(l||0,t));var h,u,c="get"===i?t[e]:i,f=typeof t[e],p="string"==typeof n&&"="===n.charAt(1),d={t:t,p:e,s:c,f:"function"===f,pg:0,n:r||e,m:s?"function"==typeof s?s:Math.round:0,pr:0,c:p?parseInt(n.charAt(0)+"1",10)*parseFloat(n.substr(2)):parseFloat(n)-c||0};if("number"!==f&&("function"===f&&"get"===i&&(u=e.indexOf("set")||"function"!=typeof t["get"+e.substr(3)]?e:"get"+e.substr(3),d.s=c=a?t[u](a):t[u]()),"string"==typeof c&&(a||isNaN(c))?(d.fp=a,h=z(c,n,o||M.defaultStringFilter,d),d={t:h,p:"setRatio",s:0,c:1,f:2,pg:0,n:r||e,pr:0,m:0}):p||(d.s=parseFloat(c),d.c=parseFloat(n)-d.s||0)),d.c)return(d._next=this._firstPT)&&(d._next._prev=d),this._firstPT=d,d},B=M._internals={isArray:_,isSelector:j,lazyTweens:F,blobDif:z},X=M._plugins={},Y=B.tweenLookup={},H=0,W=B.reservedProps={ease:1,delay:1,overwrite:1,onComplete:1,onCompleteParams:1,onCompleteScope:1,useFrames:1,runBackwards:1,startAt:1,onUpdate:1,onUpdateParams:1,onUpdateScope:1,onStart:1,onStartParams:1,onStartScope:1,onReverseComplete:1,onReverseCompleteParams:1,onReverseCompleteScope:1,onRepeat:1,onRepeatParams:1,onRepeatScope:1,easeParams:1,yoyo:1,immediateRender:1,repeat:1,repeatDelay:1,data:1,paused:1,reversed:1,autoCSS:1,lazy:1,onOverwrite:1,callbackScope:1,stringFilter:1,id:1},U={none:0,all:1,auto:2,concurrent:3,allOnStart:4,preexisting:5,true:1,false:0},V=A._rootFramesTimeline=new D,$=A._rootTimeline=new D,G=30,Q=B.lazyRender=function(){var t,e=F.length;for(N={};--e>-1;)t=F[e],t&&t._lazy!==!1&&(t.render(t._lazy[0],t._lazy[1],!0),t._lazy=!1);F.length=0};$._startTime=l.time,V._startTime=l.frame,$._active=V._active=!0,setTimeout(Q,1),A._updateRoot=M.render=function(){var t,e,i;if(F.length&&Q(),$.render((l.time-$._startTime)*$._timeScale,!1,!1),V.render((l.frame-V._startTime)*V._timeScale,!1,!1),F.length&&Q(),l.frame>=G){G=l.frame+(parseInt(M.autoSleep,10)||120);for(i in Y){for(e=Y[i].tweens,t=e.length;--t>-1;)e[t]._gc&&e.splice(t,1);0===e.length&&delete Y[i]}if(i=$._first,(!i||i._paused)&&M.autoSleep&&!V._first&&1===l._listeners.tick.length){for(;i&&i._paused;)i=i._next;i||l.sleep()}}},l.addEventListener("tick",A._updateRoot);var Z=function(t,e,i){var n,r,s=t._gsTweenID;if(Y[s||(t._gsTweenID=s="t"+H++)]||(Y[s]={target:t,tweens:[]}),e&&(n=Y[s].tweens,n[r=n.length]=e,i))for(;--r>-1;)n[r]===e&&n.splice(r,1);return Y[s].tweens},K=function(t,e,i,n){var r,s,a=t.vars.onOverwrite;return a&&(r=a(t,e,i,n)),a=M.onOverwrite,a&&(s=a(t,e,i,n)),r!==!1&&s!==!1},J=function(t,e,i,n,r){var s,a,o,l;if(1===n||n>=4){for(l=r.length,s=0;s<l;s++)if((o=r[s])!==e)o._gc||o._kill(null,t,e)&&(a=!0);else if(5===n)break;return a}var h,u=e._startTime+f,c=[],p=0,d=0===e._duration;for(s=r.length;--s>-1;)(o=r[s])===e||o._gc||o._paused||(o._timeline!==e._timeline?(h=h||tt(e,0,d),0===tt(o,h,d)&&(c[p++]=o)):o._startTime<=u&&o._startTime+o.totalDuration()/o._timeScale>u&&((d||!o._initted)&&u-o._startTime<=2e-10||(c[p++]=o)));for(s=p;--s>-1;)if(o=c[s],2===n&&o._kill(i,t,e)&&(a=!0),2!==n||!o._firstPT&&o._initted){if(2!==n&&!K(o,e))continue;o._enabled(!1,!1)&&(a=!0)}return a},tt=function(t,e,i){for(var n=t._timeline,r=n._timeScale,s=t._startTime;n._timeline;){if(s+=n._startTime,r*=n._timeScale,n._paused)return-100;n=n._timeline}return s/=r,s>e?s-e:i&&s===e||!t._initted&&s-e<2*f?f:(s+=t.totalDuration()/t._timeScale/r)>e+f?0:s-e-f};o._init=function(){var t,e,i,n,r,s,a=this.vars,o=this._overwrittenProps,l=this._duration,h=!!a.immediateRender,u=a.ease;if(a.startAt){this._startAt&&(this._startAt.render(-1,!0),this._startAt.kill()),r={};for(n in a.startAt)r[n]=a.startAt[n];if(r.overwrite=!1,r.immediateRender=!0,r.lazy=h&&a.lazy!==!1,r.startAt=r.delay=null,this._startAt=M.to(this.target,0,r),h)if(this._time>0)this._startAt=null;else if(0!==l)return}else if(a.runBackwards&&0!==l)if(this._startAt)this._startAt.render(-1,!0),this._startAt.kill(),this._startAt=null;else{0!==this._time&&(h=!1),i={};for(n in a)W[n]&&"autoCSS"!==n||(i[n]=a[n]);if(i.overwrite=0,i.data="isFromStart",i.lazy=h&&a.lazy!==!1,i.immediateRender=h,this._startAt=M.to(this.target,0,i),h){if(0===this._time)return}else this._startAt._init(),this._startAt._enabled(!1),this.vars.immediateRender&&(this._startAt=null)}if(this._ease=u=u?u instanceof w?u:"function"==typeof u?new w(u,a.easeParams):b[u]||M.defaultEase:M.defaultEase,a.easeParams instanceof Array&&u.config&&(this._ease=u.config.apply(u,a.easeParams)),this._easeType=this._ease._type,this._easePower=this._ease._power,this._firstPT=null,this._targets)for(s=this._targets.length,t=0;t<s;t++)this._initProps(this._targets[t],this._propLookup[t]={},this._siblings[t],o?o[t]:null,t)&&(e=!0);else e=this._initProps(this.target,this._propLookup,this._siblings,o,0);if(e&&M._onPluginEvent("_onInitAllProps",this),o&&(this._firstPT||"function"!=typeof this.target&&this._enabled(!1,!1)),a.runBackwards)for(i=this._firstPT;i;)i.s+=i.c,i.c=-i.c,i=i._next;this._onUpdate=a.onUpdate,this._initted=!0},o._initProps=function(e,i,n,r,s){var a,o,l,h,u,c;if(null==e)return!1;N[e._gsTweenID]&&Q(),this.vars.css||e.style&&e!==t&&e.nodeType&&X.css&&this.vars.autoCSS!==!1&&E(this.vars,e);for(a in this.vars)if(c=this.vars[a],W[a])c&&(c instanceof Array||c.push&&_(c))&&c.join("").indexOf("{self}")!==-1&&(this.vars[a]=c=this._swapSelfInParams(c,this));else if(X[a]&&(h=new X[a])._onInitTween(e,this.vars[a],this,s)){for(this._firstPT=u={_next:this._firstPT,t:h,p:"setRatio",s:0,c:1,f:1,n:a,pg:1,pr:h._priority,m:0},o=h._overwriteProps.length;--o>-1;)i[h._overwriteProps[o]]=this._firstPT;(h._priority||h._onInitAllProps)&&(l=!0),(h._onDisable||h._onEnable)&&(this._notifyPluginsOfEnabled=!0),u._next&&(u._next._prev=u)}else i[a]=q.call(this,e,a,"get",c,a,0,null,this.vars.stringFilter,s);return r&&this._kill(r,e)?this._initProps(e,i,n,r,s):this._overwrite>1&&this._firstPT&&n.length>1&&J(e,this,i,this._overwrite,n)?(this._kill(i,e),this._initProps(e,i,n,r,s)):(this._firstPT&&(this.vars.lazy!==!1&&this._duration||this.vars.lazy&&!this._duration)&&(N[e._gsTweenID]=!0),l)},o.render=function(t,e,i){var n,r,s,a,o=this._time,l=this._duration,h=this._rawPrevTime;if(t>=l-1e-7)this._totalTime=this._time=l,this.ratio=this._ease._calcEnd?this._ease.getRatio(1):1,this._reversed||(n=!0,r="onComplete",i=i||this._timeline.autoRemoveChildren),0===l&&(this._initted||!this.vars.lazy||i)&&(this._startTime===this._timeline._duration&&(t=0),(h<0||t<=0&&t>=-1e-7||h===f&&"isPause"!==this.data)&&h!==t&&(i=!0,h>f&&(r="onReverseComplete")),this._rawPrevTime=a=!e||t||h===t?t:f);else if(t<1e-7)this._totalTime=this._time=0,this.ratio=this._ease._calcEnd?this._ease.getRatio(0):0,(0!==o||0===l&&h>0)&&(r="onReverseComplete",n=this._reversed),t<0&&(this._active=!1,0===l&&(this._initted||!this.vars.lazy||i)&&(h>=0&&(h!==f||"isPause"!==this.data)&&(i=!0),this._rawPrevTime=a=!e||t||h===t?t:f)),this._initted||(i=!0);else if(this._totalTime=this._time=t,this._easeType){var u=t/l,c=this._easeType,p=this._easePower;(1===c||3===c&&u>=.5)&&(u=1-u),3===c&&(u*=2),1===p?u*=u:2===p?u*=u*u:3===p?u*=u*u*u:4===p&&(u*=u*u*u*u),1===c?this.ratio=1-u:2===c?this.ratio=u:t/l<.5?this.ratio=u/2:this.ratio=1-u/2}else this.ratio=this._ease.getRatio(t/l);if(this._time!==o||i){if(!this._initted){if(this._init(),!this._initted||this._gc)return;if(!i&&this._firstPT&&(this.vars.lazy!==!1&&this._duration||this.vars.lazy&&!this._duration))return this._time=this._totalTime=o,this._rawPrevTime=h,F.push(this),void(this._lazy=[t,e]);this._time&&!n?this.ratio=this._ease.getRatio(this._time/l):n&&this._ease._calcEnd&&(this.ratio=this._ease.getRatio(0===this._time?0:1))}for(this._lazy!==!1&&(this._lazy=!1),this._active||!this._paused&&this._time!==o&&t>=0&&(this._active=!0),0===o&&(this._startAt&&(t>=0?this._startAt.render(t,e,i):r||(r="_dummyGS")),this.vars.onStart&&(0===this._time&&0!==l||e||this._callback("onStart"))),s=this._firstPT;s;)s.f?s.t[s.p](s.c*this.ratio+s.s):s.t[s.p]=s.c*this.ratio+s.s,s=s._next;this._onUpdate&&(t<0&&this._startAt&&t!==-1e-4&&this._startAt.render(t,e,i),e||(this._time!==o||n||i)&&this._callback("onUpdate")),r&&(this._gc&&!i||(t<0&&this._startAt&&!this._onUpdate&&t!==-1e-4&&this._startAt.render(t,e,i),n&&(this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[r]&&this._callback(r),0===l&&this._rawPrevTime===f&&a!==f&&(this._rawPrevTime=0)))}},o._kill=function(t,e,i){if("all"===t&&(t=null),null==t&&(null==e||e===this.target))return this._lazy=!1,this._enabled(!1,!1);e="string"!=typeof e?e||this._targets||this.target:M.selector(e)||e;var n,r,s,a,o,l,h,u,c,f=i&&this._time&&i._startTime===this._startTime&&this._timeline===i._timeline;if((_(e)||j(e))&&"number"!=typeof e[0])for(n=e.length;--n>-1;)this._kill(t,e[n],i)&&(l=!0);else{if(this._targets){for(n=this._targets.length;--n>-1;)if(e===this._targets[n]){o=this._propLookup[n]||{},this._overwrittenProps=this._overwrittenProps||[],r=this._overwrittenProps[n]=t?this._overwrittenProps[n]||{}:"all";break}}else{if(e!==this.target)return!1;o=this._propLookup,r=this._overwrittenProps=t?this._overwrittenProps||{}:"all"}if(o){if(h=t||o,u=t!==r&&"all"!==r&&t!==o&&("object"!=typeof t||!t._tempKill),i&&(M.onOverwrite||this.vars.onOverwrite)){for(s in h)o[s]&&(c||(c=[]),c.push(s));if((c||!t)&&!K(this,i,e,c))return!1}for(s in h)(a=o[s])&&(f&&(a.f?a.t[a.p](a.s):a.t[a.p]=a.s,l=!0),a.pg&&a.t._kill(h)&&(l=!0),a.pg&&0!==a.t._overwriteProps.length||(a._prev?a._prev._next=a._next:a===this._firstPT&&(this._firstPT=a._next),a._next&&(a._next._prev=a._prev),a._next=a._prev=null),delete o[s]),u&&(r[s]=1);!this._firstPT&&this._initted&&this._enabled(!1,!1)}}return l},o.invalidate=function(){return this._notifyPluginsOfEnabled&&M._onPluginEvent("_onDisable",this),this._firstPT=this._overwrittenProps=this._startAt=this._onUpdate=null,this._notifyPluginsOfEnabled=this._active=this._lazy=!1,this._propLookup=this._targets?{}:[],A.prototype.invalidate.call(this),this.vars.immediateRender&&(this._time=-f,this.render(Math.min(0,-this._delay))),this},o._enabled=function(t,e){if(h||l.wake(),t&&this._gc){var i,n=this._targets;if(n)for(i=n.length;--i>-1;)this._siblings[i]=Z(n[i],this,!0);else this._siblings=Z(this.target,this,!0)}return A.prototype._enabled.call(this,t,e),!(!this._notifyPluginsOfEnabled||!this._firstPT)&&M._onPluginEvent(t?"_onEnable":"_onDisable",this)},M.to=function(t,e,i){return new M(t,e,i)},M.from=function(t,e,i){return i.runBackwards=!0,i.immediateRender=0!=i.immediateRender,new M(t,e,i)},M.fromTo=function(t,e,i,n){return n.startAt=i,n.immediateRender=0!=n.immediateRender&&0!=i.immediateRender,new M(t,e,n)},M.delayedCall=function(t,e,i,n,r){return new M(e,0,{delay:t,onComplete:e,onCompleteParams:i,callbackScope:n,onReverseComplete:e,onReverseCompleteParams:i,immediateRender:!1,lazy:!1,useFrames:r,overwrite:0})},M.set=function(t,e){return new M(t,0,e)},M.getTweensOf=function(t,e){if(null==t)return[];t="string"!=typeof t?t:M.selector(t)||t;var i,n,r,s;if((_(t)||j(t))&&"number"!=typeof t[0]){for(i=t.length,n=[];--i>-1;)n=n.concat(M.getTweensOf(t[i],e));for(i=n.length;--i>-1;)for(s=n[i],r=i;--r>-1;)s===n[r]&&n.splice(i,1)}else for(n=Z(t).concat(),i=n.length;--i>-1;)(n[i]._gc||e&&!n[i].isActive())&&n.splice(i,1);return n},M.killTweensOf=M.killDelayedCallsTo=function(t,e,i){"object"==typeof e&&(i=e,e=!1);for(var n=M.getTweensOf(t,e),r=n.length;--r>-1;)n[r]._kill(i,t)};var et=y("plugins.TweenPlugin",function(t,e){this._overwriteProps=(t||"").split(","),this._propName=this._overwriteProps[0],this._priority=e||0,this._super=et.prototype},!0);if(o=et.prototype,et.version="1.19.0",et.API=2,o._firstPT=null,o._addTween=q,o.setRatio=I,o._kill=function(t){var e,i=this._overwriteProps,n=this._firstPT;if(null!=t[this._propName])this._overwriteProps=[];else for(e=i.length;--e>-1;)null!=t[i[e]]&&i.splice(e,1);for(;n;)null!=t[n.n]&&(n._next&&(n._next._prev=n._prev),n._prev?(n._prev._next=n._next,n._prev=null):this._firstPT===n&&(this._firstPT=n._next)),n=n._next;return!1},o._mod=o._roundProps=function(t){for(var e,i=this._firstPT;i;)e=t[this._propName]||null!=i.n&&t[i.n.split(this._propName+"_").join("")],e&&"function"==typeof e&&(2===i.f?i.t._applyPT.m=e:i.m=e),i=i._next},M._onPluginEvent=function(t,e){var i,n,r,s,a,o=e._firstPT;if("_onInitAllProps"===t){for(;o;){for(a=o._next,n=r;n&&n.pr>o.pr;)n=n._next;(o._prev=n?n._prev:s)?o._prev._next=o:r=o,(o._next=n)?n._prev=o:s=o,o=a}o=e._firstPT=r}for(;o;)o.pg&&"function"==typeof o.t[t]&&o.t[t]()&&(i=!0),o=o._next;return i},et.activate=function(t){for(var e=t.length;--e>-1;)t[e].API===et.API&&(X[(new t[e])._propName]=t[e]);return!0},v.plugin=function(t){if(!(t&&t.propName&&t.init&&t.API))throw"illegal plugin definition.";var e,i=t.propName,n=t.priority||0,r=t.overwriteProps,s={init:"_onInitTween",set:"setRatio",kill:"_kill",round:"_mod",mod:"_mod",initAll:"_onInitAllProps"},a=y("plugins."+i.charAt(0).toUpperCase()+i.substr(1)+"Plugin",function(){et.call(this,i,n),this._overwriteProps=r||[]},t.global===!0),o=a.prototype=new et(i);o.constructor=a,a.API=t.API;for(e in s)"function"==typeof t[e]&&(o[s[e]]=t[e]);return a.version=t.version,et.activate([a]),a},s=t._gsQueue){for(a=0;a<s.length;a++)s[a]();for(o in m)m[o].func||t.console.log("GSAP encountered missing dependency: "+o)}h=!1}}("undefined"!=typeof e&&e.exports&&"undefined"!=typeof t?t:this||window,"TweenMax")}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],17:[function(t,e,i){(function(i){var n="undefined"!=typeof e&&e.exports&&"undefined"!=typeof i?i:this||window;(n._gsQueue||(n._gsQueue=[])).push(function(){"use strict";function t(t,e,i,n,r,s){return i=(parseFloat(i)-parseFloat(t))*r,n=(parseFloat(n)-parseFloat(e))*s,Math.sqrt(i*i+n*n)}function e(t){return"string"!=typeof t&&t.nodeType||(t=n.TweenLite.selector(t),t.length&&(t=t[0])),t}function i(t,e,i){var n,r,s=t.indexOf(" ");return s===-1?(n=void 0!==i?i+"":t,r=t):(n=t.substr(0,s),r=t.substr(s+1)),n=n.indexOf("%")!==-1?parseFloat(n)/100*e:parseFloat(n),r=r.indexOf("%")!==-1?parseFloat(r)/100*e:parseFloat(r),n>r?[r,n]:[n,r]}function r(i){if(!i)return 0;i=e(i);var n,r,s,a,o,h,u,c=i.tagName.toLowerCase(),f=1,p=1;if("non-scaling-stroke"===i.getAttribute("vector-effect")&&(p=i.getScreenCTM(),f=p.a,p=p.d),"path"===c){a=i.style.strokeDasharray,i.style.strokeDasharray="none",n=i.getTotalLength()||0,f!==p&&console.log("Warning: <path> length cannot be measured accurately when vector-effect is non-scaling-stroke and the element isn't proportionally scaled."),n*=(f+p)/2;try{r=i.getBBox()}catch(t){}i.style.strokeDasharray=a}else if("rect"===c)n=2*i.getAttribute("width")*f+2*i.getAttribute("height")*p;else if("line"===c)n=t(i.getAttribute("x1"),i.getAttribute("y1"),i.getAttribute("x2"),i.getAttribute("y2"),f,p);else if("polyline"===c||"polygon"===c)for(s=i.getAttribute("points").match(l)||[],"polygon"===c&&s.push(s[0],s[1]),n=0,o=2;o<s.length;o+=2)n+=t(s[o-2],s[o-1],s[o],s[o+1],f,p)||0;else"circle"!==c&&"ellipse"!==c||(h=parseFloat(i.getAttribute("circle"===c?"r":"rx"))*f,u=parseFloat(i.getAttribute("circle"===c?"r":"ry"))*p,n=Math.PI*(3*(h+u)-Math.sqrt((3*h+u)*(h+3*u))));return n||0}function s(t,i){if(!t)return[0,0];t=e(t),i=i||r(t)+1;var n=o(t),s=n.strokeDasharray||"",a=parseFloat(n.strokeDashoffset),l=s.indexOf(",");return l<0&&(l=s.indexOf(" ")),s=l<0?i:parseFloat(s.substr(0,l))||1e-5,s>i&&(s=i),[Math.max(0,-a),Math.max(0,s-a)]}var a,o=document.defaultView?document.defaultView.getComputedStyle:function(){},l=/(?:(-|-=|\+=)?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/gi;a=n._gsDefine.plugin({propName:"drawSVG",API:2,version:"0.1.1",global:!0,overwriteProps:["drawSVG"],init:function(t,e,n,a){if(!t.getBBox)return!1;var o,l,h,u=r(t)+1;return this._style=t.style,"function"==typeof e&&(e=e(a,t)),e===!0||"true"===e?e="0 100%":e?(e+"").indexOf(" ")===-1&&(e="0 "+e):e="0 0",o=s(t,u),l=i(e,u,o[0]),this._length=u+10,0===o[0]&&0===l[0]?(h=Math.max(1e-5,l[1]-u),this._dash=u+h,this._offset=u-o[1]+h,this._addTween(this,"_offset",this._offset,u-l[1]+h,"drawSVG")):(this._dash=o[1]-o[0]||1e-6,this._offset=-o[0],this._addTween(this,"_dash",this._dash,l[1]-l[0]||1e-5,"drawSVG"),this._addTween(this,"_offset",this._offset,-l[0],"drawSVG")),!0},set:function(t){this._firstPT&&(this._super.setRatio.call(this,t),this._style.strokeDashoffset=this._offset,1===t||0===t?this._style.strokeDasharray=this._offset<.001&&this._length-this._dash<=10?"none":this._offset===this._dash?"0px, 999999px":this._dash+"px,"+this._length+"px":this._style.strokeDasharray=this._dash+"px,"+this._length+"px")}}),a.getLength=r,a.getPosition=s}),n._gsDefine&&n._gsQueue.pop()(),function(i){"use strict";var r=function(){return(n.GreenSockGlobals||n)[i]};"function"==typeof define&&define.amd?define(["TweenLite"],r):"undefined"!=typeof e&&e.exports&&(t("../TweenLite.js"),e.exports=r())}("DrawSVGPlugin")}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../TweenLite.js":15}],18:[function(t,e,i){!function(t,i){"use strict";"object"==typeof e&&"object"==typeof e.exports?e.exports=t.document?i(t,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return i(t)}:i(t)}("undefined"!=typeof window?window:this,function(t,e){"use strict";function i(t,e){e=e||X;var i=e.createElement("script");i.text=t,e.head.appendChild(i).parentNode.removeChild(i)}function n(t){var e=!!t&&"length"in t&&t.length,i=et.type(t);return"function"!==i&&!et.isWindow(t)&&("array"===i||0===e||"number"==typeof e&&e>0&&e-1 in t)}function r(t,e,i){return et.isFunction(e)?et.grep(t,function(t,n){return!!e.call(t,n,t)!==i}):e.nodeType?et.grep(t,function(t){return t===e!==i}):"string"!=typeof e?et.grep(t,function(t){return V.call(e,t)>-1!==i}):ct.test(e)?et.filter(e,t,i):(e=et.filter(e,t),et.grep(t,function(t){return V.call(e,t)>-1!==i&&1===t.nodeType}))}function s(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}function a(t){var e={};return et.each(t.match(gt)||[],function(t,i){e[i]=!0}),e}function o(t){return t}function l(t){throw t}function h(t,e,i){var n;try{t&&et.isFunction(n=t.promise)?n.call(t).done(e).fail(i):t&&et.isFunction(n=t.then)?n.call(t,e,i):e.call(void 0,t)}catch(t){i.call(void 0,t)}}function u(){X.removeEventListener("DOMContentLoaded",u),t.removeEventListener("load",u),et.ready()}function c(){this.expando=et.expando+c.uid++}function f(t){return"true"===t||"false"!==t&&("null"===t?null:t===+t+""?+t:Pt.test(t)?JSON.parse(t):t)}function p(t,e,i){var n;if(void 0===i&&1===t.nodeType)if(n="data-"+e.replace(St,"-$&").toLowerCase(),i=t.getAttribute(n),"string"==typeof i){try{i=f(i)}catch(t){}xt.set(t,e,i)}else i=void 0;return i}function d(t,e,i,n){var r,s=1,a=20,o=n?function(){return n.cur()}:function(){return et.css(t,e,"")},l=o(),h=i&&i[3]||(et.cssNumber[e]?"":"px"),u=(et.cssNumber[e]||"px"!==h&&+l)&&kt.exec(et.css(t,e));if(u&&u[3]!==h){h=h||u[3],i=i||[],u=+l||1;do s=s||".5",u/=s,et.style(t,e,u+h);while(s!==(s=o()/l)&&1!==s&&--a)}return i&&(u=+u||+l||0,r=i[1]?u+(i[1]+1)*i[2]:+i[2],n&&(n.unit=h,n.start=u,n.end=r)),r}function _(t){var e,i=t.ownerDocument,n=t.nodeName,r=Dt[n];return r?r:(e=i.body.appendChild(i.createElement(n)),r=et.css(e,"display"),e.parentNode.removeChild(e),"none"===r&&(r="block"),Dt[n]=r,r)}function m(t,e){for(var i,n,r=[],s=0,a=t.length;s<a;s++)n=t[s],n.style&&(i=n.style.display,e?("none"===i&&(r[s]=bt.get(n,"display")||null,r[s]||(n.style.display="")),""===n.style.display&&At(n)&&(r[s]=_(n))):"none"!==i&&(r[s]="none",bt.set(n,"display",i)));for(s=0;s<a;s++)null!=r[s]&&(t[s].style.display=r[s]);return t}function g(t,e){var i;return i="undefined"!=typeof t.getElementsByTagName?t.getElementsByTagName(e||"*"):"undefined"!=typeof t.querySelectorAll?t.querySelectorAll(e||"*"):[],void 0===e||e&&et.nodeName(t,e)?et.merge([t],i):i}function v(t,e){for(var i=0,n=t.length;i<n;i++)bt.set(t[i],"globalEval",!e||bt.get(e[i],"globalEval"))}function y(t,e,i,n,r){for(var s,a,o,l,h,u,c=e.createDocumentFragment(),f=[],p=0,d=t.length;p<d;p++)if(s=t[p],s||0===s)if("object"===et.type(s))et.merge(f,s.nodeType?[s]:s);else if(Nt.test(s)){for(a=a||c.appendChild(e.createElement("div")),o=(jt.exec(s)||["",""])[1].toLowerCase(),l=Ft[o]||Ft._default,
a.innerHTML=l[1]+et.htmlPrefilter(s)+l[2],u=l[0];u--;)a=a.lastChild;et.merge(f,a.childNodes),a=c.firstChild,a.textContent=""}else f.push(e.createTextNode(s));for(c.textContent="",p=0;s=f[p++];)if(n&&et.inArray(s,n)>-1)r&&r.push(s);else if(h=et.contains(s.ownerDocument,s),a=g(c.appendChild(s),"script"),h&&v(a),i)for(u=0;s=a[u++];)Et.test(s.type||"")&&i.push(s);return c}function T(){return!0}function w(){return!1}function b(){try{return X.activeElement}catch(t){}}function x(t,e,i,n,r,s){var a,o;if("object"==typeof e){"string"!=typeof i&&(n=n||i,i=void 0);for(o in e)x(t,o,i,n,e[o],s);return t}if(null==n&&null==r?(r=i,n=i=void 0):null==r&&("string"==typeof i?(r=n,n=void 0):(r=n,n=i,i=void 0)),r===!1)r=w;else if(!r)return t;return 1===s&&(a=r,r=function(t){return et().off(t),a.apply(this,arguments)},r.guid=a.guid||(a.guid=et.guid++)),t.each(function(){et.event.add(this,e,r,n,i)})}function P(t,e){return et.nodeName(t,"table")&&et.nodeName(11!==e.nodeType?e:e.firstChild,"tr")?t.getElementsByTagName("tbody")[0]||t:t}function S(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function C(t){var e=Ht.exec(t.type);return e?t.type=e[1]:t.removeAttribute("type"),t}function k(t,e){var i,n,r,s,a,o,l,h;if(1===e.nodeType){if(bt.hasData(t)&&(s=bt.access(t),a=bt.set(e,s),h=s.events)){delete a.handle,a.events={};for(r in h)for(i=0,n=h[r].length;i<n;i++)et.event.add(e,r,h[r][i])}xt.hasData(t)&&(o=xt.access(t),l=et.extend({},o),xt.set(e,l))}}function O(t,e){var i=e.nodeName.toLowerCase();"input"===i&&Mt.test(t.type)?e.checked=t.checked:"input"!==i&&"textarea"!==i||(e.defaultValue=t.defaultValue)}function A(t,e,n,r){e=W.apply([],e);var s,a,o,l,h,u,c=0,f=t.length,p=f-1,d=e[0],_=et.isFunction(d);if(_||f>1&&"string"==typeof d&&!J.checkClone&&Yt.test(d))return t.each(function(i){var s=t.eq(i);_&&(e[0]=d.call(this,i,s.html())),A(s,e,n,r)});if(f&&(s=y(e,t[0].ownerDocument,!1,t,r),a=s.firstChild,1===s.childNodes.length&&(s=a),a||r)){for(o=et.map(g(s,"script"),S),l=o.length;c<f;c++)h=s,c!==p&&(h=et.clone(h,!0,!0),l&&et.merge(o,g(h,"script"))),n.call(t[c],h,c);if(l)for(u=o[o.length-1].ownerDocument,et.map(o,C),c=0;c<l;c++)h=o[c],Et.test(h.type||"")&&!bt.access(h,"globalEval")&&et.contains(u,h)&&(h.src?et._evalUrl&&et._evalUrl(h.src):i(h.textContent.replace(Wt,""),u))}return t}function R(t,e,i){for(var n,r=e?et.filter(e,t):t,s=0;null!=(n=r[s]);s++)i||1!==n.nodeType||et.cleanData(g(n)),n.parentNode&&(i&&et.contains(n.ownerDocument,n)&&v(g(n,"script")),n.parentNode.removeChild(n));return t}function D(t,e,i){var n,r,s,a,o=t.style;return i=i||$t(t),i&&(a=i.getPropertyValue(e)||i[e],""!==a||et.contains(t.ownerDocument,t)||(a=et.style(t,e)),!J.pixelMarginRight()&&Vt.test(a)&&Ut.test(e)&&(n=o.width,r=o.minWidth,s=o.maxWidth,o.minWidth=o.maxWidth=o.width=a,a=i.width,o.width=n,o.minWidth=r,o.maxWidth=s)),void 0!==a?a+"":a}function M(t,e){return{get:function(){return t()?void delete this.get:(this.get=e).apply(this,arguments)}}}function j(t){if(t in Jt)return t;for(var e=t[0].toUpperCase()+t.slice(1),i=Kt.length;i--;)if(t=Kt[i]+e,t in Jt)return t}function E(t,e,i){var n=kt.exec(e);return n?Math.max(0,n[2]-(i||0))+(n[3]||"px"):e}function F(t,e,i,n,r){var s,a=0;for(s=i===(n?"border":"content")?4:"width"===e?1:0;s<4;s+=2)"margin"===i&&(a+=et.css(t,i+Ot[s],!0,r)),n?("content"===i&&(a-=et.css(t,"padding"+Ot[s],!0,r)),"margin"!==i&&(a-=et.css(t,"border"+Ot[s]+"Width",!0,r))):(a+=et.css(t,"padding"+Ot[s],!0,r),"padding"!==i&&(a+=et.css(t,"border"+Ot[s]+"Width",!0,r)));return a}function N(t,e,i){var n,r=!0,s=$t(t),a="border-box"===et.css(t,"boxSizing",!1,s);if(t.getClientRects().length&&(n=t.getBoundingClientRect()[e]),n<=0||null==n){if(n=D(t,e,s),(n<0||null==n)&&(n=t.style[e]),Vt.test(n))return n;r=a&&(J.boxSizingReliable()||n===t.style[e]),n=parseFloat(n)||0}return n+F(t,e,i||(a?"border":"content"),r,s)+"px"}function L(t){var e=t.match(gt)||[];return e.join(" ")}function I(t){return t.getAttribute&&t.getAttribute("class")||""}function z(t,e,i,n){var r;if(et.isArray(e))et.each(e,function(e,r){i||ae.test(t)?n(t,r):z(t+"["+("object"==typeof r&&null!=r?e:"")+"]",r,i,n)});else if(i||"object"!==et.type(e))n(t,e);else for(r in e)z(t+"["+r+"]",e[r],i,n)}function q(t){return et.isWindow(t)?t:9===t.nodeType&&t.defaultView}var B=[],X=t.document,Y=Object.getPrototypeOf,H=B.slice,W=B.concat,U=B.push,V=B.indexOf,$={},G=$.toString,Q=$.hasOwnProperty,Z=Q.toString,K=Z.call(Object),J={},tt="3.1.1 -ajax,-ajax/jsonp,-ajax/load,-ajax/parseXML,-ajax/script,-ajax/var/location,-ajax/var/nonce,-ajax/var/rquery,-ajax/xhr,-manipulation/_evalUrl,-event/ajax,-effects,-effects/animatedSelector,-effects/Tween,-deprecated",et=function(t,e){return new et.fn.init(t,e)},it=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,nt=/^-ms-/,rt=/-([a-z])/g,st=function(t,e){return e.toUpperCase()};et.fn=et.prototype={jquery:tt,constructor:et,length:0,toArray:function(){return H.call(this)},get:function(t){return null==t?H.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){var e=et.merge(this.constructor(),t);return e.prevObject=this,e},each:function(t){return et.each(this,t)},map:function(t){return this.pushStack(et.map(this,function(e,i){return t.call(e,i,e)}))},slice:function(){return this.pushStack(H.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,i=+t+(t<0?e:0);return this.pushStack(i>=0&&i<e?[this[i]]:[])},end:function(){return this.prevObject||this.constructor()},push:U,sort:B.sort,splice:B.splice},et.extend=et.fn.extend=function(){var t,e,i,n,r,s,a=arguments[0]||{},o=1,l=arguments.length,h=!1;for("boolean"==typeof a&&(h=a,a=arguments[o]||{},o++),"object"==typeof a||et.isFunction(a)||(a={}),o===l&&(a=this,o--);o<l;o++)if(null!=(t=arguments[o]))for(e in t)i=a[e],n=t[e],a!==n&&(h&&n&&(et.isPlainObject(n)||(r=et.isArray(n)))?(r?(r=!1,s=i&&et.isArray(i)?i:[]):s=i&&et.isPlainObject(i)?i:{},a[e]=et.extend(h,s,n)):void 0!==n&&(a[e]=n));return a},et.extend({expando:"jQuery"+(tt+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isFunction:function(t){return"function"===et.type(t)},isArray:Array.isArray,isWindow:function(t){return null!=t&&t===t.window},isNumeric:function(t){var e=et.type(t);return("number"===e||"string"===e)&&!isNaN(t-parseFloat(t))},isPlainObject:function(t){var e,i;return!(!t||"[object Object]"!==G.call(t)||(e=Y(t))&&(i=Q.call(e,"constructor")&&e.constructor,"function"!=typeof i||Z.call(i)!==K))},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},type:function(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?$[G.call(t)]||"object":typeof t},globalEval:function(t){i(t)},camelCase:function(t){return t.replace(nt,"ms-").replace(rt,st)},nodeName:function(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()},each:function(t,e){var i,r=0;if(n(t))for(i=t.length;r<i&&e.call(t[r],r,t[r])!==!1;r++);else for(r in t)if(e.call(t[r],r,t[r])===!1)break;return t},trim:function(t){return null==t?"":(t+"").replace(it,"")},makeArray:function(t,e){var i=e||[];return null!=t&&(n(Object(t))?et.merge(i,"string"==typeof t?[t]:t):U.call(i,t)),i},inArray:function(t,e,i){return null==e?-1:V.call(e,t,i)},merge:function(t,e){for(var i=+e.length,n=0,r=t.length;n<i;n++)t[r++]=e[n];return t.length=r,t},grep:function(t,e,i){for(var n,r=[],s=0,a=t.length,o=!i;s<a;s++)n=!e(t[s],s),n!==o&&r.push(t[s]);return r},map:function(t,e,i){var r,s,a=0,o=[];if(n(t))for(r=t.length;a<r;a++)s=e(t[a],a,i),null!=s&&o.push(s);else for(a in t)s=e(t[a],a,i),null!=s&&o.push(s);return W.apply([],o)},guid:1,proxy:function(t,e){var i,n,r;if("string"==typeof e&&(i=t[e],e=t,t=i),et.isFunction(t))return n=H.call(arguments,2),r=function(){return t.apply(e||this,n.concat(H.call(arguments)))},r.guid=t.guid=t.guid||et.guid++,r},now:Date.now,support:J}),"function"==typeof Symbol&&(et.fn[Symbol.iterator]=B[Symbol.iterator]),et.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(t,e){$["[object "+e+"]"]=e.toLowerCase()});var at=function(t){function e(t,e,i,n){var r,s,a,o,l,h,u,f=e&&e.ownerDocument,d=e?e.nodeType:9;if(i=i||[],"string"!=typeof t||!t||1!==d&&9!==d&&11!==d)return i;if(!n&&((e?e.ownerDocument||e:B)!==j&&M(e),e=e||j,F)){if(11!==d&&(l=gt.exec(t)))if(r=l[1]){if(9===d){if(!(a=e.getElementById(r)))return i;if(a.id===r)return i.push(a),i}else if(f&&(a=f.getElementById(r))&&z(e,a)&&a.id===r)return i.push(a),i}else{if(l[2])return K.apply(i,e.getElementsByTagName(t)),i;if((r=l[3])&&b.getElementsByClassName&&e.getElementsByClassName)return K.apply(i,e.getElementsByClassName(r)),i}if(b.qsa&&!U[t+" "]&&(!N||!N.test(t))){if(1!==d)f=e,u=t;else if("object"!==e.nodeName.toLowerCase()){for((o=e.getAttribute("id"))?o=o.replace(wt,bt):e.setAttribute("id",o=q),h=C(t),s=h.length;s--;)h[s]="#"+o+" "+p(h[s]);u=h.join(","),f=vt.test(t)&&c(e.parentNode)||e}if(u)try{return K.apply(i,f.querySelectorAll(u)),i}catch(t){}finally{o===q&&e.removeAttribute("id")}}}return O(t.replace(ot,"$1"),e,i,n)}function i(){function t(i,n){return e.push(i+" ")>x.cacheLength&&delete t[e.shift()],t[i+" "]=n}var e=[];return t}function n(t){return t[q]=!0,t}function r(t){var e=j.createElement("fieldset");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function s(t,e){for(var i=t.split("|"),n=i.length;n--;)x.attrHandle[i[n]]=e}function a(t,e){var i=e&&t,n=i&&1===t.nodeType&&1===e.nodeType&&t.sourceIndex-e.sourceIndex;if(n)return n;if(i)for(;i=i.nextSibling;)if(i===e)return-1;return t?1:-1}function o(t){return function(e){var i=e.nodeName.toLowerCase();return"input"===i&&e.type===t}}function l(t){return function(e){var i=e.nodeName.toLowerCase();return("input"===i||"button"===i)&&e.type===t}}function h(t){return function(e){return"form"in e?e.parentNode&&e.disabled===!1?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&Pt(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function u(t){return n(function(e){return e=+e,n(function(i,n){for(var r,s=t([],i.length,e),a=s.length;a--;)i[r=s[a]]&&(i[r]=!(n[r]=i[r]))})})}function c(t){return t&&"undefined"!=typeof t.getElementsByTagName&&t}function f(){}function p(t){for(var e=0,i=t.length,n="";e<i;e++)n+=t[e].value;return n}function d(t,e,i){var n=e.dir,r=e.next,s=r||n,a=i&&"parentNode"===s,o=Y++;return e.first?function(e,i,r){for(;e=e[n];)if(1===e.nodeType||a)return t(e,i,r);return!1}:function(e,i,l){var h,u,c,f=[X,o];if(l){for(;e=e[n];)if((1===e.nodeType||a)&&t(e,i,l))return!0}else for(;e=e[n];)if(1===e.nodeType||a)if(c=e[q]||(e[q]={}),u=c[e.uniqueID]||(c[e.uniqueID]={}),r&&r===e.nodeName.toLowerCase())e=e[n]||e;else{if((h=u[s])&&h[0]===X&&h[1]===o)return f[2]=h[2];if(u[s]=f,f[2]=t(e,i,l))return!0}return!1}}function _(t){return t.length>1?function(e,i,n){for(var r=t.length;r--;)if(!t[r](e,i,n))return!1;return!0}:t[0]}function m(t,i,n){for(var r=0,s=i.length;r<s;r++)e(t,i[r],n);return n}function g(t,e,i,n,r){for(var s,a=[],o=0,l=t.length,h=null!=e;o<l;o++)(s=t[o])&&(i&&!i(s,n,r)||(a.push(s),h&&e.push(o)));return a}function v(t,e,i,r,s,a){return r&&!r[q]&&(r=v(r)),s&&!s[q]&&(s=v(s,a)),n(function(n,a,o,l){var h,u,c,f=[],p=[],d=a.length,_=n||m(e||"*",o.nodeType?[o]:o,[]),v=!t||!n&&e?_:g(_,f,t,o,l),y=i?s||(n?t:d||r)?[]:a:v;if(i&&i(v,y,o,l),r)for(h=g(y,p),r(h,[],o,l),u=h.length;u--;)(c=h[u])&&(y[p[u]]=!(v[p[u]]=c));if(n){if(s||t){if(s){for(h=[],u=y.length;u--;)(c=y[u])&&h.push(v[u]=c);s(null,y=[],h,l)}for(u=y.length;u--;)(c=y[u])&&(h=s?tt(n,c):f[u])>-1&&(n[h]=!(a[h]=c))}}else y=g(y===a?y.splice(d,y.length):y),s?s(null,a,y,l):K.apply(a,y)})}function y(t){for(var e,i,n,r=t.length,s=x.relative[t[0].type],a=s||x.relative[" "],o=s?1:0,l=d(function(t){return t===e},a,!0),h=d(function(t){return tt(e,t)>-1},a,!0),u=[function(t,i,n){var r=!s&&(n||i!==A)||((e=i).nodeType?l(t,i,n):h(t,i,n));return e=null,r}];o<r;o++)if(i=x.relative[t[o].type])u=[d(_(u),i)];else{if(i=x.filter[t[o].type].apply(null,t[o].matches),i[q]){for(n=++o;n<r&&!x.relative[t[n].type];n++);return v(o>1&&_(u),o>1&&p(t.slice(0,o-1).concat({value:" "===t[o-2].type?"*":""})).replace(ot,"$1"),i,o<n&&y(t.slice(o,n)),n<r&&y(t=t.slice(n)),n<r&&p(t))}u.push(i)}return _(u)}function T(t,i){var r=i.length>0,s=t.length>0,a=function(n,a,o,l,h){var u,c,f,p=0,d="0",_=n&&[],m=[],v=A,y=n||s&&x.find.TAG("*",h),T=X+=null==v?1:Math.random()||.1,w=y.length;for(h&&(A=a===j||a||h);d!==w&&null!=(u=y[d]);d++){if(s&&u){for(c=0,a||u.ownerDocument===j||(M(u),o=!F);f=t[c++];)if(f(u,a||j,o)){l.push(u);break}h&&(X=T)}r&&((u=!f&&u)&&p--,n&&_.push(u))}if(p+=d,r&&d!==p){for(c=0;f=i[c++];)f(_,m,a,o);if(n){if(p>0)for(;d--;)_[d]||m[d]||(m[d]=Q.call(l));m=g(m)}K.apply(l,m),h&&!n&&m.length>0&&p+i.length>1&&e.uniqueSort(l)}return h&&(X=T,A=v),_};return r?n(a):a}var w,b,x,P,S,C,k,O,A,R,D,M,j,E,F,N,L,I,z,q="sizzle"+1*new Date,B=t.document,X=0,Y=0,H=i(),W=i(),U=i(),V=function(t,e){return t===e&&(D=!0),0},$={}.hasOwnProperty,G=[],Q=G.pop,Z=G.push,K=G.push,J=G.slice,tt=function(t,e){for(var i=0,n=t.length;i<n;i++)if(t[i]===e)return i;return-1},et="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",it="[\\x20\\t\\r\\n\\f]",nt="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",rt="\\["+it+"*("+nt+")(?:"+it+"*([*^$|!~]?=)"+it+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+nt+"))|)"+it+"*\\]",st=":("+nt+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+rt+")*)|.*)\\)|)",at=new RegExp(it+"+","g"),ot=new RegExp("^"+it+"+|((?:^|[^\\\\])(?:\\\\.)*)"+it+"+$","g"),lt=new RegExp("^"+it+"*,"+it+"*"),ht=new RegExp("^"+it+"*([>+~]|"+it+")"+it+"*"),ut=new RegExp("="+it+"*([^\\]'\"]*?)"+it+"*\\]","g"),ct=new RegExp(st),ft=new RegExp("^"+nt+"$"),pt={ID:new RegExp("^#("+nt+")"),CLASS:new RegExp("^\\.("+nt+")"),TAG:new RegExp("^("+nt+"|[*])"),ATTR:new RegExp("^"+rt),PSEUDO:new RegExp("^"+st),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+it+"*(even|odd|(([+-]|)(\\d*)n|)"+it+"*(?:([+-]|)"+it+"*(\\d+)|))"+it+"*\\)|)","i"),bool:new RegExp("^(?:"+et+")$","i"),needsContext:new RegExp("^"+it+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+it+"*((?:-\\d)?\\d*)"+it+"*\\)|)(?=[^-]|$)","i")},dt=/^(?:input|select|textarea|button)$/i,_t=/^h\d$/i,mt=/^[^{]+\{\s*\[native \w/,gt=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,vt=/[+~]/,yt=new RegExp("\\\\([\\da-f]{1,6}"+it+"?|("+it+")|.)","ig"),Tt=function(t,e,i){var n="0x"+e-65536;return n!==n||i?e:n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320)},wt=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,bt=function(t,e){return e?"\0"===t?"�":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t},xt=function(){M()},Pt=d(function(t){return t.disabled===!0&&("form"in t||"label"in t)},{dir:"parentNode",next:"legend"});try{K.apply(G=J.call(B.childNodes),B.childNodes),G[B.childNodes.length].nodeType}catch(t){K={apply:G.length?function(t,e){Z.apply(t,J.call(e))}:function(t,e){for(var i=t.length,n=0;t[i++]=e[n++];);t.length=i-1}}}b=e.support={},S=e.isXML=function(t){var e=t&&(t.ownerDocument||t).documentElement;return!!e&&"HTML"!==e.nodeName},M=e.setDocument=function(t){var e,i,n=t?t.ownerDocument||t:B;return n!==j&&9===n.nodeType&&n.documentElement?(j=n,E=j.documentElement,F=!S(j),B!==j&&(i=j.defaultView)&&i.top!==i&&(i.addEventListener?i.addEventListener("unload",xt,!1):i.attachEvent&&i.attachEvent("onunload",xt)),b.attributes=r(function(t){return t.className="i",!t.getAttribute("className")}),b.getElementsByTagName=r(function(t){return t.appendChild(j.createComment("")),!t.getElementsByTagName("*").length}),b.getElementsByClassName=mt.test(j.getElementsByClassName),b.getById=r(function(t){return E.appendChild(t).id=q,!j.getElementsByName||!j.getElementsByName(q).length}),b.getById?(x.filter.ID=function(t){var e=t.replace(yt,Tt);return function(t){return t.getAttribute("id")===e}},x.find.ID=function(t,e){if("undefined"!=typeof e.getElementById&&F){var i=e.getElementById(t);return i?[i]:[]}}):(x.filter.ID=function(t){var e=t.replace(yt,Tt);return function(t){var i="undefined"!=typeof t.getAttributeNode&&t.getAttributeNode("id");return i&&i.value===e}},x.find.ID=function(t,e){if("undefined"!=typeof e.getElementById&&F){var i,n,r,s=e.getElementById(t);if(s){if(i=s.getAttributeNode("id"),i&&i.value===t)return[s];for(r=e.getElementsByName(t),n=0;s=r[n++];)if(i=s.getAttributeNode("id"),i&&i.value===t)return[s]}return[]}}),x.find.TAG=b.getElementsByTagName?function(t,e){return"undefined"!=typeof e.getElementsByTagName?e.getElementsByTagName(t):b.qsa?e.querySelectorAll(t):void 0}:function(t,e){var i,n=[],r=0,s=e.getElementsByTagName(t);if("*"===t){for(;i=s[r++];)1===i.nodeType&&n.push(i);return n}return s},x.find.CLASS=b.getElementsByClassName&&function(t,e){if("undefined"!=typeof e.getElementsByClassName&&F)return e.getElementsByClassName(t)},L=[],N=[],(b.qsa=mt.test(j.querySelectorAll))&&(r(function(t){E.appendChild(t).innerHTML="<a id='"+q+"'></a><select id='"+q+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&N.push("[*^$]="+it+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||N.push("\\["+it+"*(?:value|"+et+")"),t.querySelectorAll("[id~="+q+"-]").length||N.push("~="),t.querySelectorAll(":checked").length||N.push(":checked"),t.querySelectorAll("a#"+q+"+*").length||N.push(".#.+[+~]")}),r(function(t){t.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var e=j.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&N.push("name"+it+"*[*^$|!~]?="),2!==t.querySelectorAll(":enabled").length&&N.push(":enabled",":disabled"),E.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&N.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),N.push(",.*:")})),(b.matchesSelector=mt.test(I=E.matches||E.webkitMatchesSelector||E.mozMatchesSelector||E.oMatchesSelector||E.msMatchesSelector))&&r(function(t){b.disconnectedMatch=I.call(t,"*"),I.call(t,"[s!='']:x"),L.push("!=",st)}),N=N.length&&new RegExp(N.join("|")),L=L.length&&new RegExp(L.join("|")),e=mt.test(E.compareDocumentPosition),z=e||mt.test(E.contains)?function(t,e){var i=9===t.nodeType?t.documentElement:t,n=e&&e.parentNode;return t===n||!(!n||1!==n.nodeType||!(i.contains?i.contains(n):t.compareDocumentPosition&&16&t.compareDocumentPosition(n)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},V=e?function(t,e){if(t===e)return D=!0,0;var i=!t.compareDocumentPosition-!e.compareDocumentPosition;return i?i:(i=(t.ownerDocument||t)===(e.ownerDocument||e)?t.compareDocumentPosition(e):1,1&i||!b.sortDetached&&e.compareDocumentPosition(t)===i?t===j||t.ownerDocument===B&&z(B,t)?-1:e===j||e.ownerDocument===B&&z(B,e)?1:R?tt(R,t)-tt(R,e):0:4&i?-1:1)}:function(t,e){if(t===e)return D=!0,0;var i,n=0,r=t.parentNode,s=e.parentNode,o=[t],l=[e];if(!r||!s)return t===j?-1:e===j?1:r?-1:s?1:R?tt(R,t)-tt(R,e):0;if(r===s)return a(t,e);for(i=t;i=i.parentNode;)o.unshift(i);for(i=e;i=i.parentNode;)l.unshift(i);for(;o[n]===l[n];)n++;return n?a(o[n],l[n]):o[n]===B?-1:l[n]===B?1:0},j):j},e.matches=function(t,i){return e(t,null,null,i)},e.matchesSelector=function(t,i){if((t.ownerDocument||t)!==j&&M(t),i=i.replace(ut,"='$1']"),b.matchesSelector&&F&&!U[i+" "]&&(!L||!L.test(i))&&(!N||!N.test(i)))try{var n=I.call(t,i);if(n||b.disconnectedMatch||t.document&&11!==t.document.nodeType)return n}catch(t){}return e(i,j,null,[t]).length>0},e.contains=function(t,e){return(t.ownerDocument||t)!==j&&M(t),z(t,e)},e.attr=function(t,e){(t.ownerDocument||t)!==j&&M(t);var i=x.attrHandle[e.toLowerCase()],n=i&&$.call(x.attrHandle,e.toLowerCase())?i(t,e,!F):void 0;return void 0!==n?n:b.attributes||!F?t.getAttribute(e):(n=t.getAttributeNode(e))&&n.specified?n.value:null},e.escape=function(t){return(t+"").replace(wt,bt)},e.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},e.uniqueSort=function(t){var e,i=[],n=0,r=0;if(D=!b.detectDuplicates,R=!b.sortStable&&t.slice(0),t.sort(V),D){for(;e=t[r++];)e===t[r]&&(n=i.push(r));for(;n--;)t.splice(i[n],1)}return R=null,t},P=e.getText=function(t){var e,i="",n=0,r=t.nodeType;if(r){if(1===r||9===r||11===r){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)i+=P(t)}else if(3===r||4===r)return t.nodeValue}else for(;e=t[n++];)i+=P(e);return i},x=e.selectors={cacheLength:50,createPseudo:n,match:pt,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(yt,Tt),t[3]=(t[3]||t[4]||t[5]||"").replace(yt,Tt),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||e.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&e.error(t[0]),t},PSEUDO:function(t){var e,i=!t[6]&&t[2];return pt.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":i&&ct.test(i)&&(e=C(i,!0))&&(e=i.indexOf(")",i.length-e)-i.length)&&(t[0]=t[0].slice(0,e),t[2]=i.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(yt,Tt).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=H[t+" "];return e||(e=new RegExp("(^|"+it+")"+t+"("+it+"|$)"))&&H(t,function(t){return e.test("string"==typeof t.className&&t.className||"undefined"!=typeof t.getAttribute&&t.getAttribute("class")||"")})},ATTR:function(t,i,n){return function(r){var s=e.attr(r,t);return null==s?"!="===i:!i||(s+="","="===i?s===n:"!="===i?s!==n:"^="===i?n&&0===s.indexOf(n):"*="===i?n&&s.indexOf(n)>-1:"$="===i?n&&s.slice(-n.length)===n:"~="===i?(" "+s.replace(at," ")+" ").indexOf(n)>-1:"|="===i&&(s===n||s.slice(0,n.length+1)===n+"-"))}},CHILD:function(t,e,i,n,r){var s="nth"!==t.slice(0,3),a="last"!==t.slice(-4),o="of-type"===e;return 1===n&&0===r?function(t){return!!t.parentNode}:function(e,i,l){var h,u,c,f,p,d,_=s!==a?"nextSibling":"previousSibling",m=e.parentNode,g=o&&e.nodeName.toLowerCase(),v=!l&&!o,y=!1;if(m){if(s){for(;_;){for(f=e;f=f[_];)if(o?f.nodeName.toLowerCase()===g:1===f.nodeType)return!1;d=_="only"===t&&!d&&"nextSibling"}return!0}if(d=[a?m.firstChild:m.lastChild],a&&v){for(f=m,c=f[q]||(f[q]={}),u=c[f.uniqueID]||(c[f.uniqueID]={}),h=u[t]||[],p=h[0]===X&&h[1],y=p&&h[2],f=p&&m.childNodes[p];f=++p&&f&&f[_]||(y=p=0)||d.pop();)if(1===f.nodeType&&++y&&f===e){u[t]=[X,p,y];break}}else if(v&&(f=e,c=f[q]||(f[q]={}),u=c[f.uniqueID]||(c[f.uniqueID]={}),h=u[t]||[],p=h[0]===X&&h[1],y=p),y===!1)for(;(f=++p&&f&&f[_]||(y=p=0)||d.pop())&&((o?f.nodeName.toLowerCase()!==g:1!==f.nodeType)||!++y||(v&&(c=f[q]||(f[q]={}),u=c[f.uniqueID]||(c[f.uniqueID]={}),u[t]=[X,y]),f!==e)););return y-=r,y===n||y%n===0&&y/n>=0}}},PSEUDO:function(t,i){var r,s=x.pseudos[t]||x.setFilters[t.toLowerCase()]||e.error("unsupported pseudo: "+t);return s[q]?s(i):s.length>1?(r=[t,t,"",i],x.setFilters.hasOwnProperty(t.toLowerCase())?n(function(t,e){for(var n,r=s(t,i),a=r.length;a--;)n=tt(t,r[a]),t[n]=!(e[n]=r[a])}):function(t){return s(t,0,r)}):s}},pseudos:{not:n(function(t){var e=[],i=[],r=k(t.replace(ot,"$1"));return r[q]?n(function(t,e,i,n){for(var s,a=r(t,null,n,[]),o=t.length;o--;)(s=a[o])&&(t[o]=!(e[o]=s))}):function(t,n,s){return e[0]=t,r(e,null,s,i),e[0]=null,!i.pop()}}),has:n(function(t){return function(i){return e(t,i).length>0}}),contains:n(function(t){return t=t.replace(yt,Tt),function(e){return(e.textContent||e.innerText||P(e)).indexOf(t)>-1}}),lang:n(function(t){return ft.test(t||"")||e.error("unsupported lang: "+t),t=t.replace(yt,Tt).toLowerCase(),function(e){var i;do if(i=F?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return i=i.toLowerCase(),i===t||0===i.indexOf(t+"-");while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var i=t.location&&t.location.hash;return i&&i.slice(1)===e.id},root:function(t){return t===E},focus:function(t){return t===j.activeElement&&(!j.hasFocus||j.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:h(!1),disabled:h(!0),checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,t.selected===!0},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!x.pseudos.empty(t)},header:function(t){return _t.test(t.nodeName)},input:function(t){return dt.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:u(function(){return[0]}),last:u(function(t,e){return[e-1]}),eq:u(function(t,e,i){return[i<0?i+e:i]}),even:u(function(t,e){for(var i=0;i<e;i+=2)t.push(i);return t}),odd:u(function(t,e){for(var i=1;i<e;i+=2)t.push(i);return t}),lt:u(function(t,e,i){for(var n=i<0?i+e:i;--n>=0;)t.push(n);return t}),gt:u(function(t,e,i){for(var n=i<0?i+e:i;++n<e;)t.push(n);return t})}},x.pseudos.nth=x.pseudos.eq;for(w in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})x.pseudos[w]=o(w);for(w in{submit:!0,reset:!0})x.pseudos[w]=l(w);return f.prototype=x.filters=x.pseudos,x.setFilters=new f,C=e.tokenize=function(t,i){var n,r,s,a,o,l,h,u=W[t+" "];if(u)return i?0:u.slice(0);for(o=t,l=[],h=x.preFilter;o;){n&&!(r=lt.exec(o))||(r&&(o=o.slice(r[0].length)||o),l.push(s=[])),n=!1,(r=ht.exec(o))&&(n=r.shift(),s.push({value:n,type:r[0].replace(ot," ")}),o=o.slice(n.length));for(a in x.filter)!(r=pt[a].exec(o))||h[a]&&!(r=h[a](r))||(n=r.shift(),s.push({value:n,type:a,matches:r}),o=o.slice(n.length));if(!n)break}return i?o.length:o?e.error(t):W(t,l).slice(0)},k=e.compile=function(t,e){var i,n=[],r=[],s=U[t+" "];if(!s){for(e||(e=C(t)),i=e.length;i--;)s=y(e[i]),s[q]?n.push(s):r.push(s);s=U(t,T(r,n)),s.selector=t}return s},O=e.select=function(t,e,i,n){var r,s,a,o,l,h="function"==typeof t&&t,u=!n&&C(t=h.selector||t);if(i=i||[],1===u.length){if(s=u[0]=u[0].slice(0),s.length>2&&"ID"===(a=s[0]).type&&9===e.nodeType&&F&&x.relative[s[1].type]){if(e=(x.find.ID(a.matches[0].replace(yt,Tt),e)||[])[0],!e)return i;h&&(e=e.parentNode),t=t.slice(s.shift().value.length)}for(r=pt.needsContext.test(t)?0:s.length;r--&&(a=s[r],!x.relative[o=a.type]);)if((l=x.find[o])&&(n=l(a.matches[0].replace(yt,Tt),vt.test(s[0].type)&&c(e.parentNode)||e))){if(s.splice(r,1),t=n.length&&p(s),!t)return K.apply(i,n),i;break}}return(h||k(t,u))(n,e,!F,i,!e||vt.test(t)&&c(e.parentNode)||e),i},b.sortStable=q.split("").sort(V).join("")===q,b.detectDuplicates=!!D,M(),b.sortDetached=r(function(t){return 1&t.compareDocumentPosition(j.createElement("fieldset"))}),r(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||s("type|href|height|width",function(t,e,i){if(!i)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)}),b.attributes&&r(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||s("value",function(t,e,i){if(!i&&"input"===t.nodeName.toLowerCase())return t.defaultValue}),r(function(t){return null==t.getAttribute("disabled")})||s(et,function(t,e,i){var n;if(!i)return t[e]===!0?e.toLowerCase():(n=t.getAttributeNode(e))&&n.specified?n.value:null}),e}(t);et.find=at,et.expr=at.selectors,et.expr[":"]=et.expr.pseudos,et.uniqueSort=et.unique=at.uniqueSort,et.text=at.getText,et.isXMLDoc=at.isXML,et.contains=at.contains,et.escapeSelector=at.escape;var ot=function(t,e,i){for(var n=[],r=void 0!==i;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(r&&et(t).is(i))break;n.push(t)}return n},lt=function(t,e){for(var i=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&i.push(t);return i},ht=et.expr.match.needsContext,ut=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i,ct=/^.[^:#\[\.,]*$/;et.filter=function(t,e,i){var n=e[0];return i&&(t=":not("+t+")"),1===e.length&&1===n.nodeType?et.find.matchesSelector(n,t)?[n]:[]:et.find.matches(t,et.grep(e,function(t){return 1===t.nodeType}))},et.fn.extend({find:function(t){var e,i,n=this.length,r=this;if("string"!=typeof t)return this.pushStack(et(t).filter(function(){for(e=0;e<n;e++)if(et.contains(r[e],this))return!0}));for(i=this.pushStack([]),e=0;e<n;e++)et.find(t,r[e],i);return n>1?et.uniqueSort(i):i},filter:function(t){return this.pushStack(r(this,t||[],!1))},not:function(t){return this.pushStack(r(this,t||[],!0))},is:function(t){return!!r(this,"string"==typeof t&&ht.test(t)?et(t):t||[],!1).length}});var ft,pt=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,dt=et.fn.init=function(t,e,i){var n,r;if(!t)return this;if(i=i||ft,"string"==typeof t){if(n="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:pt.exec(t),!n||!n[1]&&e)return!e||e.jquery?(e||i).find(t):this.constructor(e).find(t);if(n[1]){if(e=e instanceof et?e[0]:e,et.merge(this,et.parseHTML(n[1],e&&e.nodeType?e.ownerDocument||e:X,!0)),ut.test(n[1])&&et.isPlainObject(e))for(n in e)et.isFunction(this[n])?this[n](e[n]):this.attr(n,e[n]);return this}return r=X.getElementById(n[2]),r&&(this[0]=r,this.length=1),this}return t.nodeType?(this[0]=t,this.length=1,this):et.isFunction(t)?void 0!==i.ready?i.ready(t):t(et):et.makeArray(t,this)};dt.prototype=et.fn,ft=et(X);var _t=/^(?:parents|prev(?:Until|All))/,mt={children:!0,contents:!0,next:!0,prev:!0};et.fn.extend({has:function(t){var e=et(t,this),i=e.length;return this.filter(function(){for(var t=0;t<i;t++)if(et.contains(this,e[t]))return!0})},closest:function(t,e){var i,n=0,r=this.length,s=[],a="string"!=typeof t&&et(t);if(!ht.test(t))for(;n<r;n++)for(i=this[n];i&&i!==e;i=i.parentNode)if(i.nodeType<11&&(a?a.index(i)>-1:1===i.nodeType&&et.find.matchesSelector(i,t))){s.push(i);break}return this.pushStack(s.length>1?et.uniqueSort(s):s)},index:function(t){return t?"string"==typeof t?V.call(et(t),this[0]):V.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(et.uniqueSort(et.merge(this.get(),et(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),et.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return ot(t,"parentNode")},parentsUntil:function(t,e,i){return ot(t,"parentNode",i)},next:function(t){return s(t,"nextSibling")},prev:function(t){return s(t,"previousSibling")},nextAll:function(t){return ot(t,"nextSibling")},prevAll:function(t){return ot(t,"previousSibling")},nextUntil:function(t,e,i){return ot(t,"nextSibling",i)},prevUntil:function(t,e,i){return ot(t,"previousSibling",i)},siblings:function(t){return lt((t.parentNode||{}).firstChild,t)},children:function(t){return lt(t.firstChild)},contents:function(t){return t.contentDocument||et.merge([],t.childNodes)}},function(t,e){et.fn[t]=function(i,n){var r=et.map(this,e,i);return"Until"!==t.slice(-5)&&(n=i),n&&"string"==typeof n&&(r=et.filter(n,r)),this.length>1&&(mt[t]||et.uniqueSort(r),_t.test(t)&&r.reverse()),this.pushStack(r)}});var gt=/[^\x20\t\r\n\f]+/g;et.Callbacks=function(t){t="string"==typeof t?a(t):et.extend({},t);var e,i,n,r,s=[],o=[],l=-1,h=function(){for(r=t.once,n=e=!0;o.length;l=-1)for(i=o.shift();++l<s.length;)s[l].apply(i[0],i[1])===!1&&t.stopOnFalse&&(l=s.length,i=!1);t.memory||(i=!1),e=!1,r&&(s=i?[]:"")},u={add:function(){return s&&(i&&!e&&(l=s.length-1,o.push(i)),function e(i){et.each(i,function(i,n){et.isFunction(n)?t.unique&&u.has(n)||s.push(n):n&&n.length&&"string"!==et.type(n)&&e(n)})}(arguments),i&&!e&&h()),this},remove:function(){return et.each(arguments,function(t,e){for(var i;(i=et.inArray(e,s,i))>-1;)s.splice(i,1),i<=l&&l--}),this},has:function(t){return t?et.inArray(t,s)>-1:s.length>0},empty:function(){
return s&&(s=[]),this},disable:function(){return r=o=[],s=i="",this},disabled:function(){return!s},lock:function(){return r=o=[],i||e||(s=i=""),this},locked:function(){return!!r},fireWith:function(t,i){return r||(i=i||[],i=[t,i.slice?i.slice():i],o.push(i),e||h()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!n}};return u},et.extend({Deferred:function(e){var i=[["notify","progress",et.Callbacks("memory"),et.Callbacks("memory"),2],["resolve","done",et.Callbacks("once memory"),et.Callbacks("once memory"),0,"resolved"],["reject","fail",et.Callbacks("once memory"),et.Callbacks("once memory"),1,"rejected"]],n="pending",r={state:function(){return n},always:function(){return s.done(arguments).fail(arguments),this},catch:function(t){return r.then(null,t)},pipe:function(){var t=arguments;return et.Deferred(function(e){et.each(i,function(i,n){var r=et.isFunction(t[n[4]])&&t[n[4]];s[n[1]](function(){var t=r&&r.apply(this,arguments);t&&et.isFunction(t.promise)?t.promise().progress(e.notify).done(e.resolve).fail(e.reject):e[n[0]+"With"](this,r?[t]:arguments)})}),t=null}).promise()},then:function(e,n,r){function s(e,i,n,r){return function(){var h=this,u=arguments,c=function(){var t,c;if(!(e<a)){if(t=n.apply(h,u),t===i.promise())throw new TypeError("Thenable self-resolution");c=t&&("object"==typeof t||"function"==typeof t)&&t.then,et.isFunction(c)?r?c.call(t,s(a,i,o,r),s(a,i,l,r)):(a++,c.call(t,s(a,i,o,r),s(a,i,l,r),s(a,i,o,i.notifyWith))):(n!==o&&(h=void 0,u=[t]),(r||i.resolveWith)(h,u))}},f=r?c:function(){try{c()}catch(t){et.Deferred.exceptionHook&&et.Deferred.exceptionHook(t,f.stackTrace),e+1>=a&&(n!==l&&(h=void 0,u=[t]),i.rejectWith(h,u))}};e?f():(et.Deferred.getStackHook&&(f.stackTrace=et.Deferred.getStackHook()),t.setTimeout(f))}}var a=0;return et.Deferred(function(t){i[0][3].add(s(0,t,et.isFunction(r)?r:o,t.notifyWith)),i[1][3].add(s(0,t,et.isFunction(e)?e:o)),i[2][3].add(s(0,t,et.isFunction(n)?n:l))}).promise()},promise:function(t){return null!=t?et.extend(t,r):r}},s={};return et.each(i,function(t,e){var a=e[2],o=e[5];r[e[1]]=a.add,o&&a.add(function(){n=o},i[3-t][2].disable,i[0][2].lock),a.add(e[3].fire),s[e[0]]=function(){return s[e[0]+"With"](this===s?void 0:this,arguments),this},s[e[0]+"With"]=a.fireWith}),r.promise(s),e&&e.call(s,s),s},when:function(t){var e=arguments.length,i=e,n=Array(i),r=H.call(arguments),s=et.Deferred(),a=function(t){return function(i){n[t]=this,r[t]=arguments.length>1?H.call(arguments):i,--e||s.resolveWith(n,r)}};if(e<=1&&(h(t,s.done(a(i)).resolve,s.reject),"pending"===s.state()||et.isFunction(r[i]&&r[i].then)))return s.then();for(;i--;)h(r[i],a(i),s.reject);return s.promise()}});var vt=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;et.Deferred.exceptionHook=function(e,i){t.console&&t.console.warn&&e&&vt.test(e.name)&&t.console.warn("jQuery.Deferred exception: "+e.message,e.stack,i)},et.readyException=function(e){t.setTimeout(function(){throw e})};var yt=et.Deferred();et.fn.ready=function(t){return yt.then(t).catch(function(t){et.readyException(t)}),this},et.extend({isReady:!1,readyWait:1,holdReady:function(t){t?et.readyWait++:et.ready(!0)},ready:function(t){(t===!0?--et.readyWait:et.isReady)||(et.isReady=!0,t!==!0&&--et.readyWait>0||yt.resolveWith(X,[et]))}}),et.ready.then=yt.then,"complete"===X.readyState||"loading"!==X.readyState&&!X.documentElement.doScroll?t.setTimeout(et.ready):(X.addEventListener("DOMContentLoaded",u),t.addEventListener("load",u));var Tt=function(t,e,i,n,r,s,a){var o=0,l=t.length,h=null==i;if("object"===et.type(i)){r=!0;for(o in i)Tt(t,e,o,i[o],!0,s,a)}else if(void 0!==n&&(r=!0,et.isFunction(n)||(a=!0),h&&(a?(e.call(t,n),e=null):(h=e,e=function(t,e,i){return h.call(et(t),i)})),e))for(;o<l;o++)e(t[o],i,a?n:n.call(t[o],o,e(t[o],i)));return r?t:h?e.call(t):l?e(t[0],i):s},wt=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};c.uid=1,c.prototype={cache:function(t){var e=t[this.expando];return e||(e={},wt(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,i){var n,r=this.cache(t);if("string"==typeof e)r[et.camelCase(e)]=i;else for(n in e)r[et.camelCase(n)]=e[n];return r},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][et.camelCase(e)]},access:function(t,e,i){return void 0===e||e&&"string"==typeof e&&void 0===i?this.get(t,e):(this.set(t,e,i),void 0!==i?i:e)},remove:function(t,e){var i,n=t[this.expando];if(void 0!==n){if(void 0!==e){et.isArray(e)?e=e.map(et.camelCase):(e=et.camelCase(e),e=e in n?[e]:e.match(gt)||[]),i=e.length;for(;i--;)delete n[e[i]]}(void 0===e||et.isEmptyObject(n))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!et.isEmptyObject(e)}};var bt=new c,xt=new c,Pt=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,St=/[A-Z]/g;et.extend({hasData:function(t){return xt.hasData(t)||bt.hasData(t)},data:function(t,e,i){return xt.access(t,e,i)},removeData:function(t,e){xt.remove(t,e)},_data:function(t,e,i){return bt.access(t,e,i)},_removeData:function(t,e){bt.remove(t,e)}}),et.fn.extend({data:function(t,e){var i,n,r,s=this[0],a=s&&s.attributes;if(void 0===t){if(this.length&&(r=xt.get(s),1===s.nodeType&&!bt.get(s,"hasDataAttrs"))){for(i=a.length;i--;)a[i]&&(n=a[i].name,0===n.indexOf("data-")&&(n=et.camelCase(n.slice(5)),p(s,n,r[n])));bt.set(s,"hasDataAttrs",!0)}return r}return"object"==typeof t?this.each(function(){xt.set(this,t)}):Tt(this,function(e){var i;if(s&&void 0===e){if(i=xt.get(s,t),void 0!==i)return i;if(i=p(s,t),void 0!==i)return i}else this.each(function(){xt.set(this,t,e)})},null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each(function(){xt.remove(this,t)})}}),et.extend({queue:function(t,e,i){var n;if(t)return e=(e||"fx")+"queue",n=bt.get(t,e),i&&(!n||et.isArray(i)?n=bt.access(t,e,et.makeArray(i)):n.push(i)),n||[]},dequeue:function(t,e){e=e||"fx";var i=et.queue(t,e),n=i.length,r=i.shift(),s=et._queueHooks(t,e),a=function(){et.dequeue(t,e)};"inprogress"===r&&(r=i.shift(),n--),r&&("fx"===e&&i.unshift("inprogress"),delete s.stop,r.call(t,a,s)),!n&&s&&s.empty.fire()},_queueHooks:function(t,e){var i=e+"queueHooks";return bt.get(t,i)||bt.access(t,i,{empty:et.Callbacks("once memory").add(function(){bt.remove(t,[e+"queue",i])})})}}),et.fn.extend({queue:function(t,e){var i=2;return"string"!=typeof t&&(e=t,t="fx",i--),arguments.length<i?et.queue(this[0],t):void 0===e?this:this.each(function(){var i=et.queue(this,t,e);et._queueHooks(this,t),"fx"===t&&"inprogress"!==i[0]&&et.dequeue(this,t)})},dequeue:function(t){return this.each(function(){et.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var i,n=1,r=et.Deferred(),s=this,a=this.length,o=function(){--n||r.resolveWith(s,[s])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";a--;)i=bt.get(s[a],t+"queueHooks"),i&&i.empty&&(n++,i.empty.add(o));return o(),r.promise(e)}});var Ct=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,kt=new RegExp("^(?:([+-])=|)("+Ct+")([a-z%]*)$","i"),Ot=["Top","Right","Bottom","Left"],At=function(t,e){return t=e||t,"none"===t.style.display||""===t.style.display&&et.contains(t.ownerDocument,t)&&"none"===et.css(t,"display")},Rt=function(t,e,i,n){var r,s,a={};for(s in e)a[s]=t.style[s],t.style[s]=e[s];r=i.apply(t,n||[]);for(s in e)t.style[s]=a[s];return r},Dt={};et.fn.extend({show:function(){return m(this,!0)},hide:function(){return m(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){At(this)?et(this).show():et(this).hide()})}});var Mt=/^(?:checkbox|radio)$/i,jt=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,Et=/^$|\/(?:java|ecma)script/i,Ft={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Ft.optgroup=Ft.option,Ft.tbody=Ft.tfoot=Ft.colgroup=Ft.caption=Ft.thead,Ft.th=Ft.td;var Nt=/<|&#?\w+;/;!function(){var t=X.createDocumentFragment(),e=t.appendChild(X.createElement("div")),i=X.createElement("input");i.setAttribute("type","radio"),i.setAttribute("checked","checked"),i.setAttribute("name","t"),e.appendChild(i),J.checkClone=e.cloneNode(!0).cloneNode(!0).lastChild.checked,e.innerHTML="<textarea>x</textarea>",J.noCloneChecked=!!e.cloneNode(!0).lastChild.defaultValue}();var Lt=X.documentElement,It=/^key/,zt=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,qt=/^([^.]*)(?:\.(.+)|)/;et.event={global:{},add:function(t,e,i,n,r){var s,a,o,l,h,u,c,f,p,d,_,m=bt.get(t);if(m)for(i.handler&&(s=i,i=s.handler,r=s.selector),r&&et.find.matchesSelector(Lt,r),i.guid||(i.guid=et.guid++),(l=m.events)||(l=m.events={}),(a=m.handle)||(a=m.handle=function(e){return"undefined"!=typeof et&&et.event.triggered!==e.type?et.event.dispatch.apply(t,arguments):void 0}),e=(e||"").match(gt)||[""],h=e.length;h--;)o=qt.exec(e[h])||[],p=_=o[1],d=(o[2]||"").split(".").sort(),p&&(c=et.event.special[p]||{},p=(r?c.delegateType:c.bindType)||p,c=et.event.special[p]||{},u=et.extend({type:p,origType:_,data:n,handler:i,guid:i.guid,selector:r,needsContext:r&&et.expr.match.needsContext.test(r),namespace:d.join(".")},s),(f=l[p])||(f=l[p]=[],f.delegateCount=0,c.setup&&c.setup.call(t,n,d,a)!==!1||t.addEventListener&&t.addEventListener(p,a)),c.add&&(c.add.call(t,u),u.handler.guid||(u.handler.guid=i.guid)),r?f.splice(f.delegateCount++,0,u):f.push(u),et.event.global[p]=!0)},remove:function(t,e,i,n,r){var s,a,o,l,h,u,c,f,p,d,_,m=bt.hasData(t)&&bt.get(t);if(m&&(l=m.events)){for(e=(e||"").match(gt)||[""],h=e.length;h--;)if(o=qt.exec(e[h])||[],p=_=o[1],d=(o[2]||"").split(".").sort(),p){for(c=et.event.special[p]||{},p=(n?c.delegateType:c.bindType)||p,f=l[p]||[],o=o[2]&&new RegExp("(^|\\.)"+d.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=s=f.length;s--;)u=f[s],!r&&_!==u.origType||i&&i.guid!==u.guid||o&&!o.test(u.namespace)||n&&n!==u.selector&&("**"!==n||!u.selector)||(f.splice(s,1),u.selector&&f.delegateCount--,c.remove&&c.remove.call(t,u));a&&!f.length&&(c.teardown&&c.teardown.call(t,d,m.handle)!==!1||et.removeEvent(t,p,m.handle),delete l[p])}else for(p in l)et.event.remove(t,p+e[h],i,n,!0);et.isEmptyObject(l)&&bt.remove(t,"handle events")}},dispatch:function(t){var e,i,n,r,s,a,o=et.event.fix(t),l=new Array(arguments.length),h=(bt.get(this,"events")||{})[o.type]||[],u=et.event.special[o.type]||{};for(l[0]=o,e=1;e<arguments.length;e++)l[e]=arguments[e];if(o.delegateTarget=this,!u.preDispatch||u.preDispatch.call(this,o)!==!1){for(a=et.event.handlers.call(this,o,h),e=0;(r=a[e++])&&!o.isPropagationStopped();)for(o.currentTarget=r.elem,i=0;(s=r.handlers[i++])&&!o.isImmediatePropagationStopped();)o.rnamespace&&!o.rnamespace.test(s.namespace)||(o.handleObj=s,o.data=s.data,n=((et.event.special[s.origType]||{}).handle||s.handler).apply(r.elem,l),void 0!==n&&(o.result=n)===!1&&(o.preventDefault(),o.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,o),o.result}},handlers:function(t,e){var i,n,r,s,a,o=[],l=e.delegateCount,h=t.target;if(l&&h.nodeType&&!("click"===t.type&&t.button>=1))for(;h!==this;h=h.parentNode||this)if(1===h.nodeType&&("click"!==t.type||h.disabled!==!0)){for(s=[],a={},i=0;i<l;i++)n=e[i],r=n.selector+" ",void 0===a[r]&&(a[r]=n.needsContext?et(r,this).index(h)>-1:et.find(r,this,null,[h]).length),a[r]&&s.push(n);s.length&&o.push({elem:h,handlers:s})}return h=this,l<e.length&&o.push({elem:h,handlers:e.slice(l)}),o},addProp:function(t,e){Object.defineProperty(et.Event.prototype,t,{enumerable:!0,configurable:!0,get:et.isFunction(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(t){return t[et.expando]?t:new et.Event(t)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==b()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===b()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&et.nodeName(this,"input"))return this.click(),!1},_default:function(t){return et.nodeName(t.target,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},et.removeEvent=function(t,e,i){t.removeEventListener&&t.removeEventListener(e,i)},et.Event=function(t,e){return this instanceof et.Event?(t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&t.returnValue===!1?T:w,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,e&&et.extend(this,e),this.timeStamp=t&&t.timeStamp||et.now(),void(this[et.expando]=!0)):new et.Event(t,e)},et.Event.prototype={constructor:et.Event,isDefaultPrevented:w,isPropagationStopped:w,isImmediatePropagationStopped:w,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=T,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=T,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=T,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},et.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(t){var e=t.button;return null==t.which&&It.test(t.type)?null!=t.charCode?t.charCode:t.keyCode:!t.which&&void 0!==e&&zt.test(t.type)?1&e?1:2&e?3:4&e?2:0:t.which}},et.event.addProp),et.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,e){et.event.special[t]={delegateType:e,bindType:e,handle:function(t){var i,n=this,r=t.relatedTarget,s=t.handleObj;return r&&(r===n||et.contains(n,r))||(t.type=s.origType,i=s.handler.apply(this,arguments),t.type=e),i}}}),et.fn.extend({on:function(t,e,i,n){return x(this,t,e,i,n)},one:function(t,e,i,n){return x(this,t,e,i,n,1)},off:function(t,e,i){var n,r;if(t&&t.preventDefault&&t.handleObj)return n=t.handleObj,et(t.delegateTarget).off(n.namespace?n.origType+"."+n.namespace:n.origType,n.selector,n.handler),this;if("object"==typeof t){for(r in t)this.off(r,e,t[r]);return this}return e!==!1&&"function"!=typeof e||(i=e,e=void 0),i===!1&&(i=w),this.each(function(){et.event.remove(this,t,i,e)})}});var Bt=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,Xt=/<script|<style|<link/i,Yt=/checked\s*(?:[^=]|=\s*.checked.)/i,Ht=/^true\/(.*)/,Wt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;et.extend({htmlPrefilter:function(t){return t.replace(Bt,"<$1></$2>")},clone:function(t,e,i){var n,r,s,a,o=t.cloneNode(!0),l=et.contains(t.ownerDocument,t);if(!(J.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||et.isXMLDoc(t)))for(a=g(o),s=g(t),n=0,r=s.length;n<r;n++)O(s[n],a[n]);if(e)if(i)for(s=s||g(t),a=a||g(o),n=0,r=s.length;n<r;n++)k(s[n],a[n]);else k(t,o);return a=g(o,"script"),a.length>0&&v(a,!l&&g(t,"script")),o},cleanData:function(t){for(var e,i,n,r=et.event.special,s=0;void 0!==(i=t[s]);s++)if(wt(i)){if(e=i[bt.expando]){if(e.events)for(n in e.events)r[n]?et.event.remove(i,n):et.removeEvent(i,n,e.handle);i[bt.expando]=void 0}i[xt.expando]&&(i[xt.expando]=void 0)}}}),et.fn.extend({detach:function(t){return R(this,t,!0)},remove:function(t){return R(this,t)},text:function(t){return Tt(this,function(t){return void 0===t?et.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)})},null,t,arguments.length)},append:function(){return A(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=P(this,t);e.appendChild(t)}})},prepend:function(){return A(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=P(this,t);e.insertBefore(t,e.firstChild)}})},before:function(){return A(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return A(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(et.cleanData(g(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map(function(){return et.clone(this,t,e)})},html:function(t){return Tt(this,function(t){var e=this[0]||{},i=0,n=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!Xt.test(t)&&!Ft[(jt.exec(t)||["",""])[1].toLowerCase()]){t=et.htmlPrefilter(t);try{for(;i<n;i++)e=this[i]||{},1===e.nodeType&&(et.cleanData(g(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var t=[];return A(this,arguments,function(e){var i=this.parentNode;et.inArray(this,t)<0&&(et.cleanData(g(this)),i&&i.replaceChild(e,this))},t)}}),et.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,e){et.fn[t]=function(t){for(var i,n=[],r=et(t),s=r.length-1,a=0;a<=s;a++)i=a===s?this:this.clone(!0),et(r[a])[e](i),U.apply(n,i.get());return this.pushStack(n)}});var Ut=/^margin/,Vt=new RegExp("^("+Ct+")(?!px)[a-z%]+$","i"),$t=function(e){var i=e.ownerDocument.defaultView;return i&&i.opener||(i=t),i.getComputedStyle(e)};!function(){function e(){if(o){o.style.cssText="box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",o.innerHTML="",Lt.appendChild(a);var e=t.getComputedStyle(o);i="1%"!==e.top,s="2px"===e.marginLeft,n="4px"===e.width,o.style.marginRight="50%",r="4px"===e.marginRight,Lt.removeChild(a),o=null}}var i,n,r,s,a=X.createElement("div"),o=X.createElement("div");o.style&&(o.style.backgroundClip="content-box",o.cloneNode(!0).style.backgroundClip="",J.clearCloneStyle="content-box"===o.style.backgroundClip,a.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",a.appendChild(o),et.extend(J,{pixelPosition:function(){return e(),i},boxSizingReliable:function(){return e(),n},pixelMarginRight:function(){return e(),r},reliableMarginLeft:function(){return e(),s}}))}();var Gt=/^(none|table(?!-c[ea]).+)/,Qt={position:"absolute",visibility:"hidden",display:"block"},Zt={letterSpacing:"0",fontWeight:"400"},Kt=["Webkit","Moz","ms"],Jt=X.createElement("div").style;et.extend({cssHooks:{opacity:{get:function(t,e){if(e){var i=D(t,"opacity");return""===i?"1":i}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:"cssFloat"},style:function(t,e,i,n){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var r,s,a,o=et.camelCase(e),l=t.style;return e=et.cssProps[o]||(et.cssProps[o]=j(o)||o),a=et.cssHooks[e]||et.cssHooks[o],void 0===i?a&&"get"in a&&void 0!==(r=a.get(t,!1,n))?r:l[e]:(s=typeof i,"string"===s&&(r=kt.exec(i))&&r[1]&&(i=d(t,e,r),s="number"),void(null!=i&&i===i&&("number"===s&&(i+=r&&r[3]||(et.cssNumber[o]?"":"px")),J.clearCloneStyle||""!==i||0!==e.indexOf("background")||(l[e]="inherit"),a&&"set"in a&&void 0===(i=a.set(t,i,n))||(l[e]=i))))}},css:function(t,e,i,n){var r,s,a,o=et.camelCase(e);return e=et.cssProps[o]||(et.cssProps[o]=j(o)||o),a=et.cssHooks[e]||et.cssHooks[o],a&&"get"in a&&(r=a.get(t,!0,i)),void 0===r&&(r=D(t,e,n)),"normal"===r&&e in Zt&&(r=Zt[e]),""===i||i?(s=parseFloat(r),i===!0||isFinite(s)?s||0:r):r}}),et.each(["height","width"],function(t,e){et.cssHooks[e]={get:function(t,i,n){if(i)return!Gt.test(et.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?N(t,e,n):Rt(t,Qt,function(){return N(t,e,n)})},set:function(t,i,n){var r,s=n&&$t(t),a=n&&F(t,e,n,"border-box"===et.css(t,"boxSizing",!1,s),s);return a&&(r=kt.exec(i))&&"px"!==(r[3]||"px")&&(t.style[e]=i,i=et.css(t,e)),E(t,i,a)}}}),et.cssHooks.marginLeft=M(J.reliableMarginLeft,function(t,e){if(e)return(parseFloat(D(t,"marginLeft"))||t.getBoundingClientRect().left-Rt(t,{marginLeft:0},function(){return t.getBoundingClientRect().left}))+"px"}),et.each({margin:"",padding:"",border:"Width"},function(t,e){et.cssHooks[t+e]={expand:function(i){for(var n=0,r={},s="string"==typeof i?i.split(" "):[i];n<4;n++)r[t+Ot[n]+e]=s[n]||s[n-2]||s[0];return r}},Ut.test(t)||(et.cssHooks[t+e].set=E)}),et.fn.extend({css:function(t,e){return Tt(this,function(t,e,i){var n,r,s={},a=0;if(et.isArray(e)){for(n=$t(t),r=e.length;a<r;a++)s[e[a]]=et.css(t,e[a],!1,n);return s}return void 0!==i?et.style(t,e,i):et.css(t,e)},t,e,arguments.length>1)}}),et.fn.delay=function(e,i){return e=et.fx?et.fx.speeds[e]||e:e,i=i||"fx",this.queue(i,function(i,n){var r=t.setTimeout(i,e);n.stop=function(){t.clearTimeout(r)}})},function(){var t=X.createElement("input"),e=X.createElement("select"),i=e.appendChild(X.createElement("option"));t.type="checkbox",J.checkOn=""!==t.value,J.optSelected=i.selected,t=X.createElement("input"),t.value="t",t.type="radio",J.radioValue="t"===t.value}();var te,ee=et.expr.attrHandle;et.fn.extend({attr:function(t,e){return Tt(this,et.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each(function(){et.removeAttr(this,t)})}}),et.extend({attr:function(t,e,i){var n,r,s=t.nodeType;if(3!==s&&8!==s&&2!==s)return"undefined"==typeof t.getAttribute?et.prop(t,e,i):(1===s&&et.isXMLDoc(t)||(r=et.attrHooks[e.toLowerCase()]||(et.expr.match.bool.test(e)?te:void 0)),void 0!==i?null===i?void et.removeAttr(t,e):r&&"set"in r&&void 0!==(n=r.set(t,i,e))?n:(t.setAttribute(e,i+""),i):r&&"get"in r&&null!==(n=r.get(t,e))?n:(n=et.find.attr(t,e),null==n?void 0:n))},attrHooks:{type:{set:function(t,e){if(!J.radioValue&&"radio"===e&&et.nodeName(t,"input")){var i=t.value;return t.setAttribute("type",e),i&&(t.value=i),e}}}},removeAttr:function(t,e){var i,n=0,r=e&&e.match(gt);if(r&&1===t.nodeType)for(;i=r[n++];)t.removeAttribute(i)}}),te={set:function(t,e,i){return e===!1?et.removeAttr(t,i):t.setAttribute(i,i),i}},et.each(et.expr.match.bool.source.match(/\w+/g),function(t,e){var i=ee[e]||et.find.attr;ee[e]=function(t,e,n){var r,s,a=e.toLowerCase();return n||(s=ee[a],ee[a]=r,r=null!=i(t,e,n)?a:null,ee[a]=s),r}});var ie=/^(?:input|select|textarea|button)$/i,ne=/^(?:a|area)$/i;et.fn.extend({prop:function(t,e){return Tt(this,et.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each(function(){delete this[et.propFix[t]||t]})}}),et.extend({prop:function(t,e,i){var n,r,s=t.nodeType;if(3!==s&&8!==s&&2!==s)return 1===s&&et.isXMLDoc(t)||(e=et.propFix[e]||e,r=et.propHooks[e]),void 0!==i?r&&"set"in r&&void 0!==(n=r.set(t,i,e))?n:t[e]=i:r&&"get"in r&&null!==(n=r.get(t,e))?n:t[e]},propHooks:{tabIndex:{get:function(t){var e=et.find.attr(t,"tabindex");return e?parseInt(e,10):ie.test(t.nodeName)||ne.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),J.optSelected||(et.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),et.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){et.propFix[this.toLowerCase()]=this}),et.fn.extend({addClass:function(t){var e,i,n,r,s,a,o,l=0;if(et.isFunction(t))return this.each(function(e){et(this).addClass(t.call(this,e,I(this)))});if("string"==typeof t&&t)for(e=t.match(gt)||[];i=this[l++];)if(r=I(i),n=1===i.nodeType&&" "+L(r)+" "){for(a=0;s=e[a++];)n.indexOf(" "+s+" ")<0&&(n+=s+" ");o=L(n),r!==o&&i.setAttribute("class",o)}return this},removeClass:function(t){var e,i,n,r,s,a,o,l=0;if(et.isFunction(t))return this.each(function(e){et(this).removeClass(t.call(this,e,I(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof t&&t)for(e=t.match(gt)||[];i=this[l++];)if(r=I(i),n=1===i.nodeType&&" "+L(r)+" "){for(a=0;s=e[a++];)for(;n.indexOf(" "+s+" ")>-1;)n=n.replace(" "+s+" "," ");o=L(n),r!==o&&i.setAttribute("class",o)}return this},toggleClass:function(t,e){var i=typeof t;return"boolean"==typeof e&&"string"===i?e?this.addClass(t):this.removeClass(t):et.isFunction(t)?this.each(function(i){et(this).toggleClass(t.call(this,i,I(this),e),e)}):this.each(function(){var e,n,r,s;if("string"===i)for(n=0,r=et(this),s=t.match(gt)||[];e=s[n++];)r.hasClass(e)?r.removeClass(e):r.addClass(e);else void 0!==t&&"boolean"!==i||(e=I(this),e&&bt.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||t===!1?"":bt.get(this,"__className__")||""))})},hasClass:function(t){var e,i,n=0;for(e=" "+t+" ";i=this[n++];)if(1===i.nodeType&&(" "+L(I(i))+" ").indexOf(e)>-1)return!0;return!1}});var re=/\r/g;et.fn.extend({val:function(t){var e,i,n,r=this[0];return arguments.length?(n=et.isFunction(t),this.each(function(i){var r;1===this.nodeType&&(r=n?t.call(this,i,et(this).val()):t,null==r?r="":"number"==typeof r?r+="":et.isArray(r)&&(r=et.map(r,function(t){return null==t?"":t+""})),e=et.valHooks[this.type]||et.valHooks[this.nodeName.toLowerCase()],e&&"set"in e&&void 0!==e.set(this,r,"value")||(this.value=r))})):r?(e=et.valHooks[r.type]||et.valHooks[r.nodeName.toLowerCase()],e&&"get"in e&&void 0!==(i=e.get(r,"value"))?i:(i=r.value,"string"==typeof i?i.replace(re,""):null==i?"":i)):void 0}}),et.extend({valHooks:{option:{get:function(t){var e=et.find.attr(t,"value");return null!=e?e:L(et.text(t))}},select:{get:function(t){var e,i,n,r=t.options,s=t.selectedIndex,a="select-one"===t.type,o=a?null:[],l=a?s+1:r.length;for(n=s<0?l:a?s:0;n<l;n++)if(i=r[n],(i.selected||n===s)&&!i.disabled&&(!i.parentNode.disabled||!et.nodeName(i.parentNode,"optgroup"))){if(e=et(i).val(),a)return e;o.push(e)}return o},set:function(t,e){for(var i,n,r=t.options,s=et.makeArray(e),a=r.length;a--;)n=r[a],(n.selected=et.inArray(et.valHooks.option.get(n),s)>-1)&&(i=!0);return i||(t.selectedIndex=-1),s}}}}),et.each(["radio","checkbox"],function(){et.valHooks[this]={set:function(t,e){if(et.isArray(e))return t.checked=et.inArray(et(t).val(),e)>-1}},J.checkOn||(et.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})});var se=/^(?:focusinfocus|focusoutblur)$/;et.extend(et.event,{trigger:function(e,i,n,r){var s,a,o,l,h,u,c,f=[n||X],p=Q.call(e,"type")?e.type:e,d=Q.call(e,"namespace")?e.namespace.split("."):[];if(a=o=n=n||X,3!==n.nodeType&&8!==n.nodeType&&!se.test(p+et.event.triggered)&&(p.indexOf(".")>-1&&(d=p.split("."),p=d.shift(),d.sort()),h=p.indexOf(":")<0&&"on"+p,e=e[et.expando]?e:new et.Event(p,"object"==typeof e&&e),e.isTrigger=r?2:3,e.namespace=d.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+d.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),i=null==i?[e]:et.makeArray(i,[e]),c=et.event.special[p]||{},r||!c.trigger||c.trigger.apply(n,i)!==!1)){if(!r&&!c.noBubble&&!et.isWindow(n)){for(l=c.delegateType||p,se.test(l+p)||(a=a.parentNode);a;a=a.parentNode)f.push(a),o=a;o===(n.ownerDocument||X)&&f.push(o.defaultView||o.parentWindow||t)}for(s=0;(a=f[s++])&&!e.isPropagationStopped();)e.type=s>1?l:c.bindType||p,u=(bt.get(a,"events")||{})[e.type]&&bt.get(a,"handle"),u&&u.apply(a,i),u=h&&a[h],u&&u.apply&&wt(a)&&(e.result=u.apply(a,i),e.result===!1&&e.preventDefault());return e.type=p,r||e.isDefaultPrevented()||c._default&&c._default.apply(f.pop(),i)!==!1||!wt(n)||h&&et.isFunction(n[p])&&!et.isWindow(n)&&(o=n[h],o&&(n[h]=null),et.event.triggered=p,n[p](),et.event.triggered=void 0,o&&(n[h]=o)),e.result}},simulate:function(t,e,i){var n=et.extend(new et.Event,i,{type:t,isSimulated:!0});et.event.trigger(n,null,e)}}),et.fn.extend({trigger:function(t,e){return this.each(function(){et.event.trigger(t,e,this)})},triggerHandler:function(t,e){var i=this[0];if(i)return et.event.trigger(t,e,i,!0)}}),et.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(t,e){et.fn[e]=function(t,i){return arguments.length>0?this.on(e,null,t,i):this.trigger(e)}}),et.fn.extend({hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),J.focusin="onfocusin"in t,J.focusin||et.each({focus:"focusin",blur:"focusout"},function(t,e){var i=function(t){et.event.simulate(e,t.target,et.event.fix(t))};et.event.special[e]={setup:function(){var n=this.ownerDocument||this,r=bt.access(n,e);r||n.addEventListener(t,i,!0),bt.access(n,e,(r||0)+1)},teardown:function(){var n=this.ownerDocument||this,r=bt.access(n,e)-1;r?bt.access(n,e,r):(n.removeEventListener(t,i,!0),bt.remove(n,e))}}});var ae=/\[\]$/,oe=/\r?\n/g,le=/^(?:submit|button|image|reset|file)$/i,he=/^(?:input|select|textarea|keygen)/i;et.param=function(t,e){var i,n=[],r=function(t,e){var i=et.isFunction(e)?e():e;n[n.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==i?"":i)};if(et.isArray(t)||t.jquery&&!et.isPlainObject(t))et.each(t,function(){r(this.name,this.value)});else for(i in t)z(i,t[i],e,r);return n.join("&")},et.fn.extend({serialize:function(){return et.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=et.prop(this,"elements");return t?et.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!et(this).is(":disabled")&&he.test(this.nodeName)&&!le.test(t)&&(this.checked||!Mt.test(t))}).map(function(t,e){var i=et(this).val();return null==i?null:et.isArray(i)?et.map(i,function(t){return{name:e.name,value:t.replace(oe,"\r\n")}}):{name:e.name,value:i.replace(oe,"\r\n")}}).get()}}),et.fn.extend({wrapAll:function(t){var e;return this[0]&&(et.isFunction(t)&&(t=t.call(this[0])),e=et(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t}).append(this)),this},wrapInner:function(t){return et.isFunction(t)?this.each(function(e){et(this).wrapInner(t.call(this,e))}):this.each(function(){var e=et(this),i=e.contents();i.length?i.wrapAll(t):e.append(t)})},wrap:function(t){var e=et.isFunction(t);return this.each(function(i){et(this).wrapAll(e?t.call(this,i):t)})},unwrap:function(t){return this.parent(t).not("body").each(function(){et(this).replaceWith(this.childNodes)}),this}}),et.expr.pseudos.hidden=function(t){return!et.expr.pseudos.visible(t)},et.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},J.createHTMLDocument=function(){var t=X.implementation.createHTMLDocument("").body;return t.innerHTML="<form></form><form></form>",2===t.childNodes.length}(),et.parseHTML=function(t,e,i){if("string"!=typeof t)return[];"boolean"==typeof e&&(i=e,e=!1);var n,r,s;return e||(J.createHTMLDocument?(e=X.implementation.createHTMLDocument(""),n=e.createElement("base"),n.href=X.location.href,e.head.appendChild(n)):e=X),r=ut.exec(t),s=!i&&[],r?[e.createElement(r[1])]:(r=y([t],e,s),s&&s.length&&et(s).remove(),et.merge([],r.childNodes))},et.offset={setOffset:function(t,e,i){var n,r,s,a,o,l,h,u=et.css(t,"position"),c=et(t),f={};"static"===u&&(t.style.position="relative"),o=c.offset(),s=et.css(t,"top"),l=et.css(t,"left"),h=("absolute"===u||"fixed"===u)&&(s+l).indexOf("auto")>-1,h?(n=c.position(),a=n.top,r=n.left):(a=parseFloat(s)||0,r=parseFloat(l)||0),et.isFunction(e)&&(e=e.call(t,i,et.extend({},o))),null!=e.top&&(f.top=e.top-o.top+a),null!=e.left&&(f.left=e.left-o.left+r),"using"in e?e.using.call(t,f):c.css(f);
}},et.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){et.offset.setOffset(this,t,e)});var e,i,n,r,s=this[0];return s?s.getClientRects().length?(n=s.getBoundingClientRect(),n.width||n.height?(r=s.ownerDocument,i=q(r),e=r.documentElement,{top:n.top+i.pageYOffset-e.clientTop,left:n.left+i.pageXOffset-e.clientLeft}):n):{top:0,left:0}:void 0},position:function(){if(this[0]){var t,e,i=this[0],n={top:0,left:0};return"fixed"===et.css(i,"position")?e=i.getBoundingClientRect():(t=this.offsetParent(),e=this.offset(),et.nodeName(t[0],"html")||(n=t.offset()),n={top:n.top+et.css(t[0],"borderTopWidth",!0),left:n.left+et.css(t[0],"borderLeftWidth",!0)}),{top:e.top-n.top-et.css(i,"marginTop",!0),left:e.left-n.left-et.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent;t&&"static"===et.css(t,"position");)t=t.offsetParent;return t||Lt})}}),et.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,e){var i="pageYOffset"===e;et.fn[t]=function(n){return Tt(this,function(t,n,r){var s=q(t);return void 0===r?s?s[e]:t[n]:void(s?s.scrollTo(i?s.pageXOffset:r,i?r:s.pageYOffset):t[n]=r)},t,n,arguments.length)}}),et.each(["top","left"],function(t,e){et.cssHooks[e]=M(J.pixelPosition,function(t,i){if(i)return i=D(t,e),Vt.test(i)?et(t).position()[e]+"px":i})}),et.each({Height:"height",Width:"width"},function(t,e){et.each({padding:"inner"+t,content:e,"":"outer"+t},function(i,n){et.fn[n]=function(r,s){var a=arguments.length&&(i||"boolean"!=typeof r),o=i||(r===!0||s===!0?"margin":"border");return Tt(this,function(e,i,r){var s;return et.isWindow(e)?0===n.indexOf("outer")?e["inner"+t]:e.document.documentElement["client"+t]:9===e.nodeType?(s=e.documentElement,Math.max(e.body["scroll"+t],s["scroll"+t],e.body["offset"+t],s["offset"+t],s["client"+t])):void 0===r?et.css(e,i,o):et.style(e,i,r,o)},e,a?r:void 0,a)}})}),"function"==typeof define&&define.amd&&define("jquery",[],function(){return et});var ue=t.jQuery,ce=t.$;return et.noConflict=function(e){return t.$===et&&(t.$=ce),e&&t.jQuery===et&&(t.jQuery=ue),et},e||(t.jQuery=t.$=et),et})},{}],19:[function(t,e,i){arguments[4][2][0].apply(i,arguments)},{dup:2}],20:[function(t,e,i){!function(e,n){"function"==typeof define&&define.amd?define(["ScrollMagic","TweenMax","TimelineMax"],n):"object"==typeof i?(t("gsap"),n(t("scrollmagic"),TweenMax,TimelineMax)):n(e.ScrollMagic||e.jQuery&&e.jQuery.ScrollMagic,e.TweenMax||e.TweenLite,e.TimelineMax||e.TimelineLite)}(this,function(t,e,i){"use strict";var n="animation.gsap",r=window.console||{},s=Function.prototype.bind.call(r.error||r.log||function(){},r);t||s("("+n+") -> ERROR: The ScrollMagic main module could not be found. Please make sure it's loaded before this plugin or use an asynchronous loader like requirejs."),e||s("("+n+") -> ERROR: TweenLite or TweenMax could not be found. Please make sure GSAP is loaded before ScrollMagic or use an asynchronous loader like requirejs."),t.Scene.addOption("tweenChanges",!1,function(t){return!!t}),t.Scene.extend(function(){var t,r=this,s=function(){r._log&&(Array.prototype.splice.call(arguments,1,0,"("+n+")","->"),r._log.apply(this,arguments))};r.on("progress.plugin_gsap",function(){a()}),r.on("destroy.plugin_gsap",function(t){r.removeTween(t.reset)});var a=function(){if(t){var e=r.progress(),i=r.state();t.repeat&&t.repeat()===-1?"DURING"===i&&t.paused()?t.play():"DURING"===i||t.paused()||t.pause():e!=t.progress()&&(0===r.duration()?e>0?t.play():t.reverse():r.tweenChanges()&&t.tweenTo?t.tweenTo(e*t.duration()):t.progress(e).pause())}};r.setTween=function(n,o,l){var h;arguments.length>1&&(arguments.length<3&&(l=o,o=1),n=e.to(n,o,l));try{h=i?new i({smoothChildTiming:!0}).add(n):n,h.pause()}catch(t){return s(1,"ERROR calling method 'setTween()': Supplied argument is not a valid TweenObject"),r}if(t&&r.removeTween(),t=h,n.repeat&&n.repeat()===-1&&(t.repeat(-1),t.yoyo(n.yoyo())),r.tweenChanges()&&!t.tweenTo&&s(2,"WARNING: tweenChanges will only work if the TimelineMax object is available for ScrollMagic."),t&&r.controller()&&r.triggerElement()&&r.loglevel()>=2){var u=e.getTweensOf(r.triggerElement()),c=r.controller().info("vertical");u.forEach(function(t,e){var i=t.vars.css||t.vars,n=c?void 0!==i.top||void 0!==i.bottom:void 0!==i.left||void 0!==i.right;if(n)return s(2,"WARNING: Tweening the position of the trigger element affects the scene timing and should be avoided!"),!1})}if(parseFloat(TweenLite.version)>=1.14)for(var f,p,d=t.getChildren?t.getChildren(!0,!0,!1):[t],_=function(){s(2,"WARNING: tween was overwritten by another. To learn how to avoid this issue see here: https://github.com/janpaepke/ScrollMagic/wiki/WARNING:-tween-was-overwritten-by-another")},m=0;m<d.length;m++)f=d[m],p!==_&&(p=f.vars.onOverwrite,f.vars.onOverwrite=function(){p&&p.apply(this,arguments),_.apply(this,arguments)});return s(3,"added tween"),a(),r},r.removeTween=function(e){return t&&(e&&t.progress(0).pause(),t.kill(),t=void 0,s(3,"removed tween (reset: "+(e?"true":"false")+")")),r}})})},{gsap:1,scrollmagic:2}],21:[function(t,e,i){"use strict";var n=t("./libs/barba.min.js"),r=t("./libs/jquery/dist/jquery.slim.min.js"),s=t("./isMobile.min.js");r(function(){var e=t("./pageTransition.js"),i=t("./animHeader.js"),a=t("./animTop.js"),o=t("./animSkillsScroll.js"),l=t("./portfolioItemsAnimation.js"),h=t("./animSkillsHover.js"),u=t("./animYearABout.js"),c=t("./animTextABout.js"),f=t("./animScrollAbout.js"),p=t("./map.js"),d=r(window).outerWidth(),_=r(window).height(),m=r(document).scrollTop(),g=r("body"),v=r("html"),y=r("#header"),T=r("#skillsHome"),w=T.length?T.offset().top-100:0;if(v.removeClass("no-js").addClass("js"),s.any?v.addClass("is-mobile"):v.addClass("is-desktop"),"CSS"in window&&"supports"in window.CSS){var b=window.CSS.supports("mix-blend-mode","soft-light");b=b?"mix-blend-mode":"no-mix-blend-mode",r("html").addClass(b)}i(m,g,y,T);var x=o(m,g,y,T);T.data("top",w);var P=a(m,g,y,T),S=n.BaseView.extend({namespace:"home",onEnter:function(){T=r("#skillsHome"),w=T.offset().top-100,T.data("top",w)},onEnterCompleted:function(){var t=r("#portfolio").find(".portfolio-item");r("#video");P||(P=a(m,g,y,T)),x||(x=o(m,g,y,T)),s.any||(l(m,_,d,t),h(g,t))},onLeave:function(){},onLeaveCompleted:function(){}});S.init();var C=n.BaseView.extend({namespace:"portfolio",onEnter:function(){},onEnterCompleted:function(){},onLeave:function(){},onLeaveCompleted:function(){}});C.init();var k=n.BaseView.extend({namespace:"about",onEnter:function(){},onEnterCompleted:function(){u(m,d),c(),f()},onLeave:function(){},onLeaveCompleted:function(){}});k.init();var O=n.BaseView.extend({namespace:"contact",onEnter:function(){},onEnterCompleted:function(){p()},onLeave:function(){},onLeaveCompleted:function(){}});O.init();var A=t("./transiInHome.js"),R=t("./transiInPortfolio.js");g.hasClass("home")?A():g.hasClass("portfolio")?R():g.hasClass("about"),n.Pjax.start(),n.Dispatcher.on("linkClicked",function(t){n.Pjax.getTransition=function(){return e(t,g)}}),r(window).on("resize",function(){T.length&&!T.hasClass("fixed")&&(w=T.offset().top-100,T.data("top",w))}).on("load",function(){})})},{"./animHeader.js":3,"./animScrollAbout.js":4,"./animSkillsHover.js":5,"./animSkillsScroll.js":7,"./animTextABout.js":8,"./animTop.js":9,"./animYearABout.js":10,"./isMobile.min.js":12,"./libs/barba.min.js":13,"./libs/jquery/dist/jquery.slim.min.js":18,"./map.js":22,"./pageTransition.js":23,"./portfolioItemsAnimation.js":24,"./transiInHome.js":30,"./transiInPortfolio.js":31}],22:[function(t,e,i){var n=t("./libs/jquery/dist/jquery.slim.min.js");e.exports=function(){function t(t,e,i,n,r,s){var a=i-t,o=n-e,l=200-180*Math.atan2(a,o)/Math.PI,h=a<r?a:r,u=o>s?o:s;return"translate3d("+h+"px, "+u+"px, 0) rotate("+l+"deg)"}var e=n(window).outerWidth()<1100?[-1.59,47.2]:[-1.62,47.2],i={type:"FeatureCollection",features:[{type:"Feature",properties:{message:"Stéréosuper",iconSize:[30,35]},geometry:{type:"Point",coordinates:[-1.5728402,47.2082126]}}]};mapboxgl.accessToken="pk.eyJ1Ijoic3RlcmVvc3VwZXIiLCJhIjoiY2lyM2JnMDIwMDAxM2k0bWNndmUzeTFhbSJ9.UZ-XuPASxGVtYFSqdVyppg";var r=new mapboxgl.Map({container:"map",style:"mapbox://styles/stereosuper/ciuqyq3oc00so2jl8t50ltwwl",center:e,zoom:5,bearing:20});r.scrollZoom.disable(),r.dragPan.disable(),i.features.forEach(function(t){var e=document.createElement("div");e.className="marker",new mapboxgl.Marker(e,{offset:[-t.properties.iconSize[0]/2,-t.properties.iconSize[1]/2]}).setLngLat(t.geometry.coordinates).addTo(r)}),r.on("load",function(){var e,i,s,a,o,l,h,u=n("#map"),c=u.find(".marker"),f=u.find(".mapboxgl-canvas-container"),p=c.height(),d=c.width()/2;f.addClass("on").append('<div class="hand"></div>'),e=u.find(".hand"),i=e.width(),s=e.height(),setTimeout(function(){r.easeTo({duration:7e3,zoom:12,bearing:0})},800),r.on("moveend",function(){a=c.offset().top+p,o=c.offset().left+d,e.css({left:o-i+"px",top:a-s+"px"}).addClass("on")}),u.on("mousemove resize",function(n){a=c.offset().top+p,o=c.offset().left+d,l=n.clientX,h=n.clientY,l>o-10&&l<o+10&&h>a-10&&h<a+10||e.css({left:o-i+"px",top:a-s+"px",transform:t(l,h,o,a,u.width()-c.offset().left-i/2,-(c.offset().top/2))})})}),n(window).on("resize",function(){e=n(window).outerWidth()<1100?[-1.59,47.2]:[-1.62,47.2],r.flyTo({center:e})})}},{"./libs/jquery/dist/jquery.slim.min.js":18}],23:[function(t,e,i){var n=t("./libs/barba.min.js"),r=t("./libs/jquery/dist/jquery.slim.min.js"),s=t("./libs/gsap/src/uncompressed/TweenMax.js"),a=t("./transiInHome.js"),o=t("./transiOutHome.js"),l=t("./transiInPortfolio.js"),h=t("./transiOutPortfolio.js");e.exports=function(t,e){return n.BaseTransition.extend({start:function(){Promise.all([this.newContainerLoading,this.fadeOut()]).then(this.fadeIn.bind(this))},fadeOut:function(){return e.hasClass("home")?o(t):e.hasClass("portfolio")?h():r(this.oldContainer).animate({opacity:0}).promise()},fadeIn:function(){var t=this,i=r(this.newContainer);return e.removeClass(r(this.oldContainer).data("class")).addClass(i.data("class")),s.set(i,{visibility:"visible",opacity:0,onComplete:function(){r(document).scrollTop(0)}}),s.set(i,{opacity:1}),r(this.oldContainer).hide(),e.hasClass("portfolio")?l(t):e.hasClass("home")?a(t):void t.done()}})}},{"./libs/barba.min.js":13,"./libs/gsap/src/uncompressed/TweenMax.js":16,"./libs/jquery/dist/jquery.slim.min.js":18,"./transiInHome.js":30,"./transiInPortfolio.js":31,"./transiOutHome.js":32,"./transiOutPortfolio.js":33}],24:[function(t,e,i){var n=t("./libs/jquery/dist/jquery.slim.min.js"),r=t("./libs/gsap/src/uncompressed/TweenMax.js"),s=t("./sinusoid.js");e.exports=function(t,e,i,a){var o,l,h,u,c,f,p=.6,d=t;new TimelineMax;!function _(){t=n(document).scrollTop(),t!==d&&(e=n(window).height(),i=n(window).outerWidth(),o=e>767?200:100,a.each(function(a){h=n(this).offset().top,u=n(this).find("h2"),thisDesc=n(this).find(".wrapper-desc"),c=h-t,h>=t+e-o?(l=(c-e+o)*p|0,r.to(thisDesc,1,{opacity:0})):h<=t+o?(l=(c-o)*p|0,r.to(thisDesc,1,{opacity:0})):(l=0,r.to(thisDesc,1,{opacity:1})),f=i>780?s(250,0,c,30):0,r.to(u,.1,{y:l,x:f})})),d=t,requestAnimFrame(_)}(),a.on("mouseenter focusin",function(){opacityItemHover=n(this).hasClass("lbb-item")?.75:.3,r.set(n(this).find(".wrapper-bloc"),{css:{rotation:"0.01deg",z:.01,force3D:!0}}),r.to([n(this).find(".bg"),n(this).find(".wrapper-bg-img")],.3,{css:{scale:1.05,rotation:"0.01deg",z:.01,force3D:!0},ease:Power1.easeInOut}),r.to(n(this).find(".bg-img"),.3,{css:{opacity:opacityItemHover,scale:1,rotation:"0.01deg",z:.01,force3D:!0},ease:Power1.easeInOut})}).on("mouseleave focusout",function(){opacityItemLeave=n(this).hasClass("lbb-item")?.6:.15,r.set(n(this).find(".wrapper-bloc"),{css:{clearProps:"rotation",force3D:!0}}),r.to([n(this).find(".bg"),n(this).find(".wrapper-bg-img")],.25,{css:{scale:1,rotation:"0.01deg",z:.01,force3D:!0},ease:Power1.easeInOut}),r.to(n(this).find(".bg-img"),.25,{css:{opacity:opacityItemLeave,scale:1.05,rotation:"0.01deg",z:.01,force3D:!0},ease:Power1.easeInOut})})}},{"./libs/gsap/src/uncompressed/TweenMax.js":16,"./libs/jquery/dist/jquery.slim.min.js":18,"./sinusoid.js":26}],25:[function(t,e,i){e.exports=function(){return window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(t){window.setTimeout(t,1e3/60)}}()},{}],26:[function(t,e,i){e.exports=function(t,e,i,n){var r=e+n*Math.sin(i/t);return r}},{}],27:[function(t,e,i){e.exports=function(t){var e=t.split(",").map(function(t){return t});return e}},{}],28:[function(t,e,i){var n=(t("./libs/gsap/src/uncompressed/TweenMax.js"),t("./libs/gsap/src/uncompressed/TimelineMax.js"));e.exports=function(t,e){var i=new n({paused:!0});return i.to(t,.2,{scaleX:1.5,ease:Quad.easeIn}).to(t,.3,{scaleX:1,x:e,ease:Quad.easeOut}),i}},{"./libs/gsap/src/uncompressed/TimelineMax.js":14,"./libs/gsap/src/uncompressed/TweenMax.js":16}],29:[function(t,e,i){var n=(t("./libs/gsap/src/uncompressed/TweenMax.js"),t("./libs/gsap/src/uncompressed/TimelineMax.js"));e.exports=function(t,e,i){var r=new n({paused:!0});return t?i?r.staggerTo(e,.35,{opacity:1,y:0,ease:Back.easeOut.config(5)},.06):r.staggerTo(e,.35,{opacity:1,scaleY:1,ease:Back.easeOut.config(5)},.06):r.to(i,2,{width:"140%"}).to(e,.8,{scaleY:1,ease:Back.easeOut.config(5)},0),r}},{"./libs/gsap/src/uncompressed/TimelineMax.js":14,"./libs/gsap/src/uncompressed/TweenMax.js":16}],30:[function(t,e,i){var n=t("./libs/jquery/dist/jquery.slim.min.js"),r=t("./libs/gsap/src/uncompressed/TweenMax.js"),s=t("./libs/gsap/src/uncompressed/TimelineMax.js"),a=t("./animSkillsIn.js");e.exports=function(t){var e=a(),i=new s({delay:.5,onComplete:function(){void 0!==t&&t.done()}});r.to(n(".skills"),.5,{y:0,opacity:1,ease:Circ.easeOut,delay:.5}),i.add(e)}},{"./animSkillsIn.js":6,"./libs/gsap/src/uncompressed/TimelineMax.js":14,"./libs/gsap/src/uncompressed/TweenMax.js":16,"./libs/jquery/dist/jquery.slim.min.js":18}],31:[function(t,e,i){var n=t("./libs/jquery/dist/jquery.slim.min.js"),r=t("./libs/gsap/src/uncompressed/TweenMax.js"),s=t("./libs/gsap/src/uncompressed/TimelineMax.js"),a=t("./animSkillsIn.js");e.exports=function(t){function e(){var e=a(),i=new s;r.to([n(".portfolio-text").find("p")],.3,{y:0,opacity:1,ease:Power4.easeOut}),r.staggerTo(n(".portfolio-role").find("p"),.5,{y:0,opacity:1,ease:Circ.easeOut,delay:.2},.1),r.to(n(".skills"),.5,{y:0,opacity:1,ease:Circ.easeOut,delay:.5}),i.add(e),r.to(n(".portfolio-role").find("a"),.5,{y:0,opacity:1,ease:Circ.easeOut,delay:.6,onComplete:function(){void 0!==t&&t.done()}})}var i=new s({onComplete:e}),o=new r.to(n(".bgPortfolio"),.5,{scaleY:1,ease:Power4.easeOut}),l=new r.to(n(".bgPagePortfolio"),.5,{scaleY:1,ease:Power4.easeOut}),h=new r.to(n(".portfolio-text").find("h1"),.5,{y:0,opacity:1,ease:Circ.easeOut}),u=new r.to([n(".portfolio-cover")],.5,{x:0,opacity:1,ease:Power4.easeOut,delay:.3});i.add([o,l,h,u]).set(n("#header"),{className:"+= bgVisible"})}},{"./animSkillsIn.js":6,"./libs/gsap/src/uncompressed/TimelineMax.js":14,"./libs/gsap/src/uncompressed/TweenMax.js":16,"./libs/jquery/dist/jquery.slim.min.js":18}],32:[function(t,e,i){var n=t("./libs/jquery/dist/jquery.slim.min.js"),r=t("./libs/gsap/src/uncompressed/TweenMax.js"),s=t("./libs/gsap/src/uncompressed/TimelineMax.js");e.exports=function(t){var e;return new Promise(function(i,a){n(t).find("h2").prepend('<span class="bg-transition"></span>');var o=n(t).find("h2").offset().left,l=n(window).outerWidth()-o-n(t).find("h2").outerWidth(),h=new r.to(n(t).find(".bg-transition"),.4,{scaleX:1,scaleY:1.05,ease:Power4.easeOut}),u=new r.to(n(t).find(".logo"),.2,{y:40,opacity:0,ease:Linear.easeNone}),c=new r.to([n(t).find("time"),n(t).find(".title")],.4,{x:60,opacity:0,ease:Circ.easeOut}),f=new r.to(n(t).find(".border-left"),.4,{scaleY:0,ease:Circ.easeOut}),p=new r.to(n(t).find(".border-middle"),.4,{scaleX:0,ease:Circ.easeOut});e=new s({onComplete:function(){i(!0)}}),e.to(n(".portfolio-item .bg-img"),0,{opacity:0,ease:Power4.easeOut}).set(n(t).find(".bg"),{className:"+=transi"}).set(n(t).find(".bg-transition"),{left:-o+"px",right:-l+"px",scaleX:0,scaleY:1}).add([h,u,c,f,p])})}},{"./libs/gsap/src/uncompressed/TimelineMax.js":14,"./libs/gsap/src/uncompressed/TweenMax.js":16,"./libs/jquery/dist/jquery.slim.min.js":18}],33:[function(t,e,i){var n=t("./libs/jquery/dist/jquery.slim.min.js"),r=t("./libs/gsap/src/uncompressed/TweenMax.js"),s=t("./libs/gsap/src/uncompressed/TimelineMax.js");t("./animSkillsIn.js");e.exports=function(t){var e;return new Promise(function(t,i){var a=new r.to(n(".bgPortfolio"),.25,{scaleY:0,ease:Power4.easeOut}),o=new r.to(n(".bgPagePortfolio"),.25,{scaleY:0,ease:Power4.easeOut}),l=new r.to(n(".portfolio-text").find("h1"),.25,{y:-40,opacity:0,ease:Circ.easeOut,delay:.15}),h=new r.to([n(".portfolio-cover")],.25,{x:-40,opacity:0,ease:Power4.easeOut});e=new s({paused:!0,onComplete:function(){-t(!0)}}),e.add([a,o,l,h]),r.to(n(".portfolio-role").find("a"),.25,{y:-80,opacity:0,ease:Circ.easeOut}),r.to(n(".skills"),.25,{y:-80,opacity:0,ease:Circ.easeOut,delay:.1}),r.staggerTo(n(".portfolio-role").find("p"),.25,{y:-80,opacity:0,ease:Circ.easeOut,delay:.25},.05),r.to([n(".portfolio-text").find("p")],.15,{y:-80,opacity:0,ease:Power4.easeOut,delay:.3,onComplete:function(){r.set(n("#header"),{className:"-= bgVisible"}),e.play()}})})}},{"./animSkillsIn.js":6,"./libs/gsap/src/uncompressed/TimelineMax.js":14,"./libs/gsap/src/uncompressed/TweenMax.js":16,"./libs/jquery/dist/jquery.slim.min.js":18}]},{},[21]);
//# sourceMappingURL=data:application/json;base64,
